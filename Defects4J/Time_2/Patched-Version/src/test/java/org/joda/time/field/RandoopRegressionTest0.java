package org.joda.time.field;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test001");
        org.joda.time.tz.Provider provider0 = null;
        org.joda.time.DateTimeZone.setProvider(provider0);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test002");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.junit.Assert.assertNotNull(chronology1);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test003");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        java.lang.String str12 = dateTime8.toString("1");
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test004");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test005");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField11.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = partial7.withField(dateTimeFieldType12, 91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test006");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        int[] intArray10 = new int[] { 20 };
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.minutes();
        org.joda.time.DateTimeField dateTimeField13 = gregorianChronology11.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray10, (org.joda.time.Chronology) gregorianChronology11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[20]");
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test007");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate8.withPeriodAdded(readablePeriod9, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now((org.joda.time.Chronology) gJChronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldType3, (int) (short) -1, (org.joda.time.Chronology) gJChronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for weekOfWeekyear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gJChronology14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test008");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate3.withMonthOfYear((-28800000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28800000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test009");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DurationField durationField11 = gJChronology9.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = durationField11.getMillis((int) (byte) 10, 97L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test010");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dividedDateTimeField6.set((-2699186760000000L), 91);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 91 for millisOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test011");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = julianChronology0.weekOfWeekyear();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology0);
        long long7 = julianChronology0.getDateTimeMillis((int) ' ', 7, 7, (int) ' ');
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-61141277221968L) + "'", long7 == (-61141277221968L));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test012");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
        int[] intArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test013");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = partial7.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test014");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField16 = new org.joda.time.field.DividedDateTimeField(dateTimeField12, durationField13, dateTimeFieldType14, (int) '4');
        boolean boolean17 = dividedDateTimeField16.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dividedDateTimeField16.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDate9.get(dateTimeFieldType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test015");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31, 2);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(copticChronology37);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test016");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        java.lang.String str11 = remainderDateTimeField10.toString();
        int int13 = remainderDateTimeField10.get(10L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[secondOfDay]" + "'", str11, "DateTimeField[secondOfDay]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test017");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        long long15 = dividedDateTimeField6.addWrapField(100L, (int) (byte) 10);
        org.joda.time.DurationField durationField16 = dividedDateTimeField6.getDurationField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test018");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        long long12 = dateTimeZone7.previousTransition((-61141277221968L));
        org.joda.time.chrono.BuddhistChronology buddhistChronology13 = org.joda.time.chrono.BuddhistChronology.getInstance(dateTimeZone7);
        long long15 = dateTimeZone7.nextTransition(1711927792875L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-61141277221968L) + "'", long12 == (-61141277221968L));
        org.junit.Assert.assertNotNull(buddhistChronology13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1730624400000L + "'", long15 == 1730624400000L);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test019");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        long long12 = dateTimeZone7.adjustOffset((long) 84596, false);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 84596L + "'", long12 == 84596L);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test020");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial17.getFieldTypes();
        int[] intArray19 = partial17.getValues();
        int int20 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate6, intArray19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        long long32 = dateTimeZone28.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight34 = localDate6.toDateMidnight(dateTimeZone28);
        boolean boolean35 = dateTimeZone28.isFixed();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test021");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = iSOChronology10.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology10.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test022");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dividedDateTimeField6.getType();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = gregorianChronology9.halfdays();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.minutes();
        int int13 = durationField10.compareTo(durationField12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField20 = new org.joda.time.field.DividedDateTimeField(dateTimeField16, durationField17, dateTimeFieldType18, (int) '4');
        boolean boolean21 = dividedDateTimeField20.isSupported();
        org.joda.time.DurationField durationField22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField24 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField20, durationField22, dateTimeFieldType23);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField12, dateTimeFieldType23);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate32.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate38 = localDate36.withYear((int) (short) 0);
        int int39 = localDate36.size();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfDay();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate47 = localDate44.withPeriodAdded(readablePeriod45, (int) (short) 10);
        org.joda.time.Partial partial48 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial48.getFieldTypes();
        int[] intArray50 = partial48.getValues();
        java.util.Locale locale52 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = remainderDateTimeField25.set((org.joda.time.ReadablePartial) localDate36, (int) ' ', intArray50, "-28800000", locale52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28800000 for secondOfDay must be in the range [0,51]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2024, 3, 31]");
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test023");
        org.joda.time.DateTimeUtils.setCurrentMillisSystem();
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test024");
        org.joda.time.IllegalInstantException illegalInstantException2 = new org.joda.time.IllegalInstantException((long) 'a', "");
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test025");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        java.lang.String str1 = buddhistChronology0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Chronology chronology3 = buddhistChronology0.withZone(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.millisOfSecond();
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "BuddhistChronology[UTC]" + "'", str1, "BuddhistChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test026");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField36 = gJChronology9.eras();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = durationField36.getValue((long) 91, 31420800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test027");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(10L);
        java.lang.String str12 = property9.getName();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 2);
        int int15 = dateTime14.getDayOfWeek();
        int int16 = property9.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfDay" + "'", str12, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test028");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = dateTimeField3.getType();
        java.lang.String str6 = dateTimeField3.getAsShortText((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType7, 20, (int) (byte) 100, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDate0.get(dateTimeFieldType7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test029");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime10 = property9.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test030");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test031");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.junit.Assert.assertNotNull(durationFieldType0);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test032");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = unsupportedDurationField1.getDifferenceAsLong((long) (byte) 1, (long) 3600);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test033");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = limitChronology19.getDateTimeMillis(2024, 3, (-20), (int) 'a', 3, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test034");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = unsupportedDurationField1.getMillis(54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test035");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = localDate6.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate18 = localDate16.withWeekyear(7);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2024-03-31" + "'", str13, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test036");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException(durationFieldType0, "hi!");
        java.lang.String str3 = illegalFieldValueException2.getIllegalValueAsString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test037");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        long long12 = dateTimeZone7.previousTransition((-61141277221968L));
        org.joda.time.chrono.BuddhistChronology buddhistChronology13 = org.joda.time.chrono.BuddhistChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology14.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) buddhistChronology13, (org.joda.time.Chronology) julianChronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.BuddhistChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-61141277221968L) + "'", long12 == (-61141277221968L));
        org.junit.Assert.assertNotNull(buddhistChronology13);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test038");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        java.lang.String str1 = buddhistChronology0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Chronology chronology3 = buddhistChronology0.withZone(dateTimeZone2);
        java.lang.String str4 = buddhistChronology0.toString();
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "BuddhistChronology[UTC]" + "'", str1, "BuddhistChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BuddhistChronology[UTC]" + "'", str4, "BuddhistChronology[UTC]");
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test039");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField36 = gJChronology9.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = durationField36.getMillis(230400031L, 33033600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test040");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = gregorianChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test041");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 2);
        int int36 = dateTime35.getDayOfWeek();
        org.joda.time.DateTime dateTime37 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property38 = dateTime37.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test042");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = unsupportedDurationField1.add((long) (byte) -1, 604800010L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test043");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        long long15 = dividedDateTimeField6.addWrapField(100L, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate19.withPeriodAdded(readablePeriod20, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate22.plusDays((int) (short) -1);
        int int27 = dividedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = localDate22.toInterval(dateTimeZone28);
        org.joda.time.chrono.GregorianChronology gregorianChronology30 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField31 = gregorianChronology30.minutes();
        org.joda.time.DateTimeField dateTimeField32 = gregorianChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = gregorianChronology30.clockhourOfHalfday();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate43.withPeriodAdded(readablePeriod44, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        long long51 = dateTimeZone47.adjustOffset(0L, true);
        org.joda.time.DateMidnight dateMidnight52 = localDate37.toDateMidnight(dateTimeZone47);
        org.joda.time.Chronology chronology53 = gregorianChronology30.withZone(dateTimeZone47);
        org.joda.time.Interval interval54 = localDate22.toInterval(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(gregorianChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test044");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = unsupportedDurationField1.getMillis(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test045");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(10L);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfDay((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.weekOfWeekyear();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology14);
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime16);
        java.lang.String str18 = dateTime16.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(julianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2024-03-18T16:30:12.463-07:00" + "'", str18, "2024-03-18T16:30:12.463-07:00");
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test046");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        java.lang.String str5 = dateTimeField2.getAsShortText((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField10 = new org.joda.time.field.OffsetDateTimeField(dateTimeField2, dateTimeFieldType6, 20, (int) (byte) 100, (int) (byte) 10);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        int int22 = dateTime21.getCenturyOfEra();
        int int23 = dateTime21.getMinuteOfDay();
        int int24 = dateTime21.getMinuteOfDay();
        org.joda.time.DateTime dateTime26 = dateTime21.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology27 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology27.dayOfMonth();
        long long31 = dateTimeField28.getDifferenceAsLong((long) (short) 0, 0L);
        int int32 = dateTime21.get(dateTimeField28);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        java.lang.String str37 = localDate36.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = localDate36.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate48 = localDate45.withPeriodAdded(readablePeriod46, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = localDate48.toDateTimeAtMidnight(dateTimeZone49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.Chronology chronology52 = gJChronology51.withUTC();
        boolean boolean53 = durationFieldType41.isSupported((org.joda.time.Chronology) gJChronology51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology51);
        org.joda.time.DateTime dateTime55 = localDate36.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.clockhourOfDay();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDate localDate63 = localDate60.withPeriodAdded(readablePeriod61, (int) (short) 10);
        org.joda.time.Partial partial64 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = partial64.getFieldTypes();
        int[] intArray66 = partial64.getValues();
        int[] intArray68 = dateTimeField28.add((org.joda.time.ReadablePartial) localDate36, (int) (byte) 10, intArray66, 0);
        int[] intArray70 = dateTimeField2.addWrapPartial(readablePartial11, 0, intArray68, 0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(gregorianChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2024-03-31" + "'", str37, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(gJChronology51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2024, 3, 31]");
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test047");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test048");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = unsupportedDurationField1.getValue((long) 7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test049");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField36 = gJChronology9.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = durationField36.subtract((long) 13, (long) 84597);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test050");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate8 = localDate5.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.plusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime15 = dateTime10.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime17 = dateTime10.withSecondOfMinute(0);
        boolean boolean18 = readableInterval1.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test051");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        int int34 = zeroIsMaxDateTimeField15.getMinimumValue(230399999L);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = zeroIsMaxDateTimeField15.roundHalfCeiling(0L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test052");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.halfdays();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = gregorianChronology0.add(readablePeriod2, (long) '4', 0);
        org.joda.time.DateTimeField dateTimeField6 = gregorianChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test053");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getSecondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.minus(readableDuration13);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test054");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = limitChronology19.getDateTimeMillis((long) 20, 1, 52, (int) (byte) 1, 3600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test055");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        int int7 = localDate3.getYearOfEra();
        java.util.Date date8 = localDate3.toDate();
        org.joda.time.LocalDate localDate10 = localDate3.minusYears(1);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.LocalDate localDate12 = localDate3.withFields(readablePartial11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology23.getZone();
        org.joda.time.DateTime dateTime25 = localDate12.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate12.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test056");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.LocalDate localDate21 = localDate19.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate19.minus(readablePeriod22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDate23, 31, locale25);
        java.util.Locale locale27 = null;
        int int28 = dividedDateTimeField6.getMaximumTextLength(locale27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        java.lang.String str33 = localDate32.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = localDate32.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate40.withPeriodAdded(readablePeriod41, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        int int46 = dateTime45.getCenturyOfEra();
        int int47 = dateTime45.getMinuteOfDay();
        int int48 = dateTime45.getMinuteOfDay();
        org.joda.time.DateTime dateTime50 = dateTime45.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology51 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology51.dayOfMonth();
        long long55 = dateTimeField52.getDifferenceAsLong((long) (short) 0, 0L);
        int int56 = dateTime45.get(dateTimeField52);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.clockhourOfDay();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology58);
        java.lang.String str61 = localDate60.toString();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtMidnight(dateTimeZone62);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant66);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfDay();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate72 = localDate69.withPeriodAdded(readablePeriod70, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73);
        org.joda.time.Chronology chronology76 = gJChronology75.withUTC();
        boolean boolean77 = durationFieldType65.isSupported((org.joda.time.Chronology) gJChronology75);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology75);
        org.joda.time.DateTime dateTime79 = localDate60.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.Chronology chronology82 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant81);
        org.joda.time.DateTimeField dateTimeField83 = chronology82.clockhourOfDay();
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(chronology82);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalDate localDate87 = localDate84.withPeriodAdded(readablePeriod85, (int) (short) 10);
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate84);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray89 = partial88.getFieldTypes();
        int[] intArray90 = partial88.getValues();
        int[] intArray92 = dateTimeField52.add((org.joda.time.ReadablePartial) localDate60, (int) (byte) 10, intArray90, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = dividedDateTimeField6.set((org.joda.time.ReadablePartial) localDate32, 84597, intArray92, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 84597");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "31" + "'", str26, "31");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2024-03-31" + "'", str33, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(gregorianChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 31 + "'", int56 == 31);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2024-03-31" + "'", str61, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(gJChronology75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[2024, 3, 31]");
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test057");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.era();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate17.withPeriodAdded(readablePeriod18, (int) (short) 10);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate23 = localDate17.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property24 = localDate17.yearOfEra();
        org.joda.time.LocalDate localDate25 = property24.roundHalfEvenCopy();
        int[] intArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            iSOChronology12.validate((org.joda.time.ReadablePartial) localDate25, intArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test058");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        int int14 = delegatedDateTimeField9.getDifference(1711927792875L, 230399999L);
        long long16 = delegatedDateTimeField9.roundHalfEven((long) (short) 100);
        long long19 = delegatedDateTimeField9.add(6031065600000000000L, (long) ' ');
        int int20 = delegatedDateTimeField9.getMaximumValue();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = localDate24.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate43.withPeriodAdded(readablePeriod44, (int) (short) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate43);
        int[] intArray48 = partial47.getValues();
        java.util.Locale locale50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = delegatedDateTimeField9.set((org.joda.time.ReadablePartial) localDate24, 2014, intArray48, "10", locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2014");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2830 + "'", int14 == 2830);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-230400000L) + "'", long16 == (-230400000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 6031065619353600000L + "'", long19 == 6031065619353600000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[2024, 3, 31]");
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test059");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        int int14 = delegatedDateTimeField9.getDifference(1711927792875L, 230399999L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.Partial partial40 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial40.getFieldTypes();
        int[] intArray42 = partial40.getValues();
        int int43 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDate29, intArray42);
        int int44 = delegatedDateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) partial22, intArray42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property46 = partial22.property(dateTimeFieldType45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2830 + "'", int14 == 2830);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test060");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        int int7 = localDate3.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        boolean boolean21 = durationFieldType9.isSupported((org.joda.time.Chronology) gJChronology19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology19);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.plusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime36 = dateTime31.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime38 = dateTime36.withYear(54);
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime36.toYearMonthDay();
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime41 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(gJChronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test061");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial7.minus(readablePeriod9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial13 = partial7.withFieldAddWrapped(durationFieldType11, 20);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        org.joda.time.Partial partial16 = partial7.withFieldAddWrapped(durationFieldType14, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = partial16.toString("2024-03-31T00:00:00.000-07:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test062");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = unsupportedDurationField1.add((long) (short) 100, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test063");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.roundFloor((long) (-28800000));
        long long14 = delegatedDateTimeField9.addWrapField((long) (-28800000), (int) (short) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = localDate18.toDateTimeAtMidnight(dateTimeZone28);
        int[] intArray39 = new int[] { 2024, 24, 31, (byte) 100, '#', 54 };
        int int40 = delegatedDateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray39);
        org.joda.time.LocalDate.Property property41 = localDate18.year();
        org.joda.time.LocalDate localDate42 = property41.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.Interval interval45 = localDate42.toInterval(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-230400000L) + "'", long11 == (-230400000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31420800000L + "'", long14 == 31420800000L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2024, 24, 31, 100, 35, 54]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(interval45);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test064");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = limitChronology19.getLowerLimit();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField41 = new org.joda.time.field.DividedDateTimeField(dateTimeField37, durationField38, dateTimeFieldType39, (int) '4');
        java.util.Locale locale42 = null;
        int int43 = dateTimeField37.getMaximumShortTextLength(locale42);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField44 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField37);
        long long46 = delegatedDateTimeField44.remainder((-1L));
        java.lang.String str48 = delegatedDateTimeField44.getAsShortText((long) (short) -1);
        int int50 = delegatedDateTimeField44.getMaximumValue(0L);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField51 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) limitChronology19, (org.joda.time.DateTimeField) delegatedDateTimeField44);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.DividedDateTimeField dividedDateTimeField54 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) skipUndoDateTimeField51, dateTimeFieldType52, (-20));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The divisor must be at least 2");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 230399999L + "'", long46 == 230399999L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test065");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.roundFloor((long) (-28800000));
        long long14 = delegatedDateTimeField9.addWrapField((long) (-28800000), (int) (short) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = localDate18.toDateTimeAtMidnight(dateTimeZone28);
        int[] intArray39 = new int[] { 2024, 24, 31, (byte) 100, '#', 54 };
        int int40 = delegatedDateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray39);
        org.joda.time.LocalDate.Property property41 = localDate18.year();
        int int42 = localDate18.size();
        int int43 = localDate18.getDayOfYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-230400000L) + "'", long11 == (-230400000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31420800000L + "'", long14 == 31420800000L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2024, 24, 31, 100, 35, 54]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 91 + "'", int43 == 91);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test066");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.RemainderDateTimeField remainderDateTimeField16 = new org.joda.time.field.RemainderDateTimeField(dateTimeField13, dateTimeFieldType14, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field must be supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test067");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getSecondOfDay();
        int int12 = dateTime8.getMonthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime8.minus(7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test068");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.roundFloor((long) (-28800000));
        long long14 = delegatedDateTimeField9.addWrapField((long) (-28800000), (int) (short) -1);
        java.lang.String str15 = delegatedDateTimeField9.getName();
        boolean boolean17 = delegatedDateTimeField9.isLeap((-210866774822000L));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-230400000L) + "'", long11 == (-230400000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31420800000L + "'", long14 == 31420800000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekOfWeekyear" + "'", str15, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test069");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime13 = dateTime8.withMinuteOfHour(10);
        int int14 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime16 = dateTime8.plusYears((int) ' ');
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test070");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        long long15 = dividedDateTimeField6.addWrapField(100L, (int) (byte) 10);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dividedDateTimeField6.getAsText((-28800000), locale17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.LocalDate localDate27 = localDate25.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate25.minus(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTime dateTime47 = localDate33.toDateTimeAtMidnight(dateTimeZone43);
        boolean boolean48 = localDate25.isBefore((org.joda.time.ReadablePartial) localDate33);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dividedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDate25, 10, locale50);
        long long54 = dividedDateTimeField6.set(230399999L, 0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-28800000" + "'", str18, "-28800000");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "10" + "'", str51, "10");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 230399999L + "'", long54 == 230399999L);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test071");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.plusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime14 = dateTime9.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(54);
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime14.toYearMonthDay();
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) dateTime14, (int) (short) 1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(gJChronology19);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test072");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        java.lang.String str5 = dateTimeField2.getAsShortText((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField10 = new org.joda.time.field.OffsetDateTimeField(dateTimeField2, dateTimeFieldType6, 20, (int) (byte) 100, (int) (byte) 10);
        long long12 = offsetDateTimeField10.roundFloor((long) (short) 10);
        int int14 = offsetDateTimeField10.get(63072000000L);
        int int15 = offsetDateTimeField10.getOffset();
        int int17 = offsetDateTimeField10.getLeapAmount(0L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        int int35 = dateTime34.getDayOfYear();
        org.joda.time.DateTime.Property property36 = dateTime34.yearOfCentury();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate44 = localDate41.withPeriodAdded(readablePeriod42, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = localDate44.toDateTimeAtMidnight(dateTimeZone45);
        int int47 = dateTime46.getDayOfYear();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfDay();
        boolean boolean50 = property48.equals((java.lang.Object) 2);
        org.joda.time.Interval interval51 = property48.toInterval();
        boolean boolean52 = interval37.isAfter((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Period period53 = interval51.toPeriod();
        org.joda.time.Partial partial54 = partial25.minus((org.joda.time.ReadablePeriod) period53);
        java.util.Locale locale55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = offsetDateTimeField10.getAsShortText((org.joda.time.ReadablePartial) partial54, locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-230400000L) + "'", long12 == (-230400000L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 72 + "'", int14 == 72);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 91 + "'", int35 == 91);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 91 + "'", int47 == 91);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(partial54);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test073");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        java.lang.String str13 = delegatedDateTimeField9.getAsShortText((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate17.withPeriodAdded(readablePeriod18, (int) (short) 10);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate23 = localDate17.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property24 = localDate17.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = dateTime33.getDayOfYear();
        org.joda.time.DateTime.Property property35 = dateTime33.yearOfCentury();
        boolean boolean36 = localDate17.equals((java.lang.Object) property35);
        int int37 = localDate17.getWeekyear();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate42.withPeriodAdded(readablePeriod43, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        int int48 = dateTime47.getCenturyOfEra();
        int int49 = dateTime47.getMinuteOfDay();
        int int50 = dateTime47.getMinuteOfDay();
        org.joda.time.DateTime dateTime52 = dateTime47.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology53 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology53.dayOfMonth();
        long long57 = dateTimeField54.getDifferenceAsLong((long) (short) 0, 0L);
        int int58 = dateTime47.get(dateTimeField54);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant59);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfDay();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology60);
        java.lang.String str63 = localDate62.toString();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = localDate62.toDateTimeAtMidnight(dateTimeZone64);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Chronology chronology69 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant68);
        org.joda.time.DateTimeField dateTimeField70 = chronology69.clockhourOfDay();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDate localDate74 = localDate71.withPeriodAdded(readablePeriod72, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = localDate74.toDateTimeAtMidnight(dateTimeZone75);
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75);
        org.joda.time.Chronology chronology78 = gJChronology77.withUTC();
        boolean boolean79 = durationFieldType67.isSupported((org.joda.time.Chronology) gJChronology77);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology77);
        org.joda.time.DateTime dateTime81 = localDate62.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Chronology chronology84 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant83);
        org.joda.time.DateTimeField dateTimeField85 = chronology84.clockhourOfDay();
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(chronology84);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.LocalDate localDate89 = localDate86.withPeriodAdded(readablePeriod87, (int) (short) 10);
        org.joda.time.Partial partial90 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate86);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray91 = partial90.getFieldTypes();
        int[] intArray92 = partial90.getValues();
        int[] intArray94 = dateTimeField54.add((org.joda.time.ReadablePartial) localDate62, (int) (byte) 10, intArray92, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = delegatedDateTimeField9.addWrapField((org.joda.time.ReadablePartial) localDate17, 7, intArray92, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 91 + "'", int34 == 91);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2024 + "'", int37 == 2024);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(gregorianChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 31 + "'", int58 == 31);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2024-03-31" + "'", str63, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(gJChronology77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[2024, 3, 31]");
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test074");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.era();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test075");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField36 = gJChronology9.eras();
        boolean boolean37 = durationField36.isSupported();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test076");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        long long10 = dividedDateTimeField6.add((long) 1, 0L);
        long long13 = dividedDateTimeField6.addWrapField((long) 31, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dividedDateTimeField6.roundFloor(1711868460000L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 31L + "'", long13 == 31L);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test077");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology11 = gJChronology10.withUTC();
        boolean boolean12 = durationFieldType0.isSupported((org.joda.time.Chronology) gJChronology10);
        java.lang.String str13 = durationFieldType0.getName();
        org.joda.time.IllegalFieldValueException illegalFieldValueException15 = new org.joda.time.IllegalFieldValueException(durationFieldType0, "DateTimeField[secondOfDay]");
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(gJChronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "minutes" + "'", str13, "minutes");
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test078");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = dateTime13.toString("minutes", locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test079");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        java.lang.String str11 = remainderDateTimeField10.toString();
        int int12 = remainderDateTimeField10.getMinimumValue();
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology13.era();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField16.getType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField18 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField10, dateTimeFieldType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate25.plusDays((int) (short) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate34.withPeriodAdded(readablePeriod35, (int) (short) 10);
        org.joda.time.Partial partial38 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate34);
        int[] intArray39 = partial38.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray41 = remainderDateTimeField10.add((org.joda.time.ReadablePartial) localDate25, 3, intArray39, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[secondOfDay]" + "'", str11, "DateTimeField[secondOfDay]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(julianChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2024, 3, 31]");
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test080");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = unsupportedDurationField1.getValueAsLong(1730624400000L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test081");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.era();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test082");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) (short) 10);
        int int4 = dateTimeZone0.getOffset((long) 100);
        long long8 = dateTimeZone0.convertLocalToUTC((-32L), false, (long) 24);
        java.lang.String str9 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-28800000) + "'", int4 == (-28800000));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 28799968L + "'", long8 == 28799968L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "America/Los_Angeles" + "'", str9, "America/Los_Angeles");
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test083");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial17.getFieldTypes();
        int[] intArray19 = partial17.getValues();
        int int20 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate6, intArray19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        long long32 = dateTimeZone28.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight34 = localDate6.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) (short) 10);
        int int39 = dateTimeZone35.getOffset((long) 100);
        int int41 = dateTimeZone35.getOffset(0L);
        org.joda.time.DateTime dateTime42 = localDate6.toDateTimeAtCurrentTime(dateTimeZone35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) localDate6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-28800000) + "'", int39 == (-28800000));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-28800000) + "'", int41 == (-28800000));
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test084");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        int[] intArray8 = partial7.getValues();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate12.withPeriodAdded(readablePeriod13, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property18.addToCopy(10L);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime24 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.minusMonths(100);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test085");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = gJChronology9.getDateTimeMillis(0, (int) (short) 100, 3600, 1, 51, (int) (byte) 100, 72);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test086");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.months();
        org.joda.time.DurationField durationField16 = chronology12.hours();
        boolean boolean17 = property10.equals((java.lang.Object) durationField16);
        org.joda.time.DateTime dateTime18 = property10.roundCeilingCopy();
        int int19 = dateTime18.getWeekOfWeekyear();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate34 = localDate31.withPeriodAdded(readablePeriod32, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        int int37 = dateTime36.getDayOfYear();
        org.joda.time.DateTime.Property property38 = dateTime36.yearOfCentury();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate43.withPeriodAdded(readablePeriod44, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        int int49 = dateTime48.getDayOfYear();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfDay();
        boolean boolean52 = property50.equals((java.lang.Object) 2);
        org.joda.time.Interval interval53 = property50.toInterval();
        boolean boolean54 = interval39.isAfter((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Period period55 = interval53.toPeriod();
        org.joda.time.Partial partial56 = partial27.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = dateTime18.plus((org.joda.time.ReadablePeriod) period55);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 13 + "'", int19 == 13);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 91 + "'", int37 == 91);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 91 + "'", int49 == 91);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test087");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        org.joda.time.LocalDate localDate92 = localDate33.minusYears((int) '4');
        org.joda.time.LocalDate.Property property93 = localDate92.weekOfWeekyear();
        int int94 = localDate92.size();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test088");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = iSOChronology10.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = iSOChronology10.weeks();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test089");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property11.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = dateTime12.toString("secondOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test090");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField11 = iSOChronology10.weekyears();
        org.joda.time.DurationField durationField12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = durationField11.compareTo(durationField12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test091");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = iSOChronology0.getDateTimeMillis(4, (int) (byte) 100, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test092");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        java.lang.String str1 = buddhistChronology0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Chronology chronology3 = buddhistChronology0.withZone(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = buddhistChronology0.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate8.withPeriodAdded(readablePeriod9, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        long long16 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.Chronology chronology17 = buddhistChronology0.withZone(dateTimeZone12);
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "BuddhistChronology[UTC]" + "'", str1, "BuddhistChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test093");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DurationField durationField11 = gJChronology9.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = gJChronology9.getDateTimeMillis((int) (byte) 1, 21, 24, 84597);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test094");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DurationField durationField11 = gJChronology9.eras();
        java.lang.String str12 = durationField11.getName();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = durationField11.getMillis(31420800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eras" + "'", str12, "eras");
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test095");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property58 = localDate23.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate60 = property58.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test096");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekOfWeekyear();
        java.util.Locale locale5 = null;
        int int6 = dateTimeField4.getMaximumShortTextLength(locale5);
        long long9 = dateTimeField4.addWrapField(10L, 1);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField10 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) gregorianChronology0, dateTimeField4);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 604800010L + "'", long9 == 604800010L);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test097");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = unsupportedDurationField1.subtract(72L, (-230400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test098");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 100, "-28800000");
        java.lang.Throwable[] throwableArray4 = illegalFieldValueException3.getSuppressed();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test099");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        long long15 = dividedDateTimeField6.addWrapField(100L, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate19.withPeriodAdded(readablePeriod20, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate22.plusDays((int) (short) -1);
        int int27 = dividedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate34 = localDate31.withPeriodAdded(readablePeriod32, (int) (short) 10);
        org.joda.time.Partial partial35 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate31);
        int[] intArray40 = new int[] { 91, 2014, (-28800000) };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = dividedDateTimeField6.set((org.joda.time.ReadablePartial) localDate31, (-28800000), intArray40, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -28800000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[91, 2014, -28800000]");
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test100");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31, 2);
        java.lang.String str38 = copticChronology37.toString();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate42.withPeriodAdded(readablePeriod43, (int) (short) 10);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial46.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial46.minus(readablePeriod48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial52 = partial46.withFieldAddWrapped(durationFieldType50, 20);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.years();
        org.joda.time.Partial partial55 = partial46.withFieldAddWrapped(durationFieldType53, 0);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfDay();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDate localDate62 = localDate59.withPeriodAdded(readablePeriod60, (int) (short) 10);
        org.joda.time.Partial partial63 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial63.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial63.minus(readablePeriod65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial69 = partial63.withFieldAddWrapped(durationFieldType67, 20);
        org.joda.time.Partial partial71 = partial46.withFieldAdded(durationFieldType67, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long73 = copticChronology37.set((org.joda.time.ReadablePartial) partial46, (long) 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CopticChronology[America/Los_Angeles,mdfw=2]" + "'", str38, "CopticChronology[America/Los_Angeles,mdfw=2]");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial71);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test101");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial17.getFieldTypes();
        int[] intArray19 = partial17.getValues();
        int int20 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate6, intArray19);
        boolean boolean22 = dateTimeField2.isLeap((long) (-28378000));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test102");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField11 = iSOChronology10.weekyears();
        org.joda.time.DurationField durationField12 = iSOChronology10.weekyears();
        org.joda.time.DurationField durationField13 = iSOChronology10.centuries();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test103");
        org.joda.time.ReadablePartial readablePartial0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial1 = new org.joda.time.Partial(readablePartial0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test104");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate11.withPeriodAdded(readablePeriod12, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        int int17 = dateTime16.getDayOfYear();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfCentury();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getDayOfYear();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfDay();
        boolean boolean32 = property30.equals((java.lang.Object) 2);
        org.joda.time.Interval interval33 = property30.toInterval();
        boolean boolean34 = interval19.isAfter((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Period period35 = interval33.toPeriod();
        org.joda.time.Partial partial36 = partial7.minus((org.joda.time.ReadablePeriod) period35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType38 = period35.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 91 + "'", int17 == 91);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 91 + "'", int29 == 91);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(partial36);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test105");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        java.util.Locale locale92 = null;
        int int93 = zeroIsMaxDateTimeField15.convertText("1969", locale92);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1969 + "'", int93 == 1969);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test106");
        org.joda.time.IllegalInstantException illegalInstantException1 = new org.joda.time.IllegalInstantException("weekOfWeekyear");
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test107");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        // The following exception was thrown during execution in test generation
        try {
            long long4 = unsupportedDurationField1.add((long) 24, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test108");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = unsupportedDurationField1.add(28799968L, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test109");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        int int35 = zeroIsMaxDateTimeField15.getDifference(1730624400000L, (long) 84596);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = zeroIsMaxDateTimeField15.roundHalfEven(10L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 55 + "'", int35 == 55);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test110");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        int int14 = delegatedDateTimeField9.getDifference(1711927792875L, 230399999L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.Partial partial40 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial40.getFieldTypes();
        int[] intArray42 = partial40.getValues();
        int int43 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDate29, intArray42);
        int int44 = delegatedDateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) partial22, intArray42);
        // The following exception was thrown during execution in test generation
        try {
            long long47 = delegatedDateTimeField9.add(6031065600000000000L, 6031065600000000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 6031065600000000000 * 604800000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2830 + "'", int14 == 2830);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test111");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = unsupportedDurationField1.add(1711868460000L, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test112");
        double double1 = org.joda.time.DateTimeUtils.toJulianDay((long) 51);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2440587.5000005905d + "'", double1 == 2440587.5000005905d);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test113");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = limitChronology19.getLowerLimit();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField41 = new org.joda.time.field.DividedDateTimeField(dateTimeField37, durationField38, dateTimeFieldType39, (int) '4');
        java.util.Locale locale42 = null;
        int int43 = dateTimeField37.getMaximumShortTextLength(locale42);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField44 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField37);
        long long46 = delegatedDateTimeField44.remainder((-1L));
        java.lang.String str48 = delegatedDateTimeField44.getAsShortText((long) (short) -1);
        int int50 = delegatedDateTimeField44.getMaximumValue(0L);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField51 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) limitChronology19, (org.joda.time.DateTimeField) delegatedDateTimeField44);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDate localDate58 = localDate55.withPeriodAdded(readablePeriod56, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = localDate58.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate64 = localDate62.withYear((int) (short) 0);
        int int65 = localDate62.size();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant66);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfDay();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate72 = localDate69.withPeriodAdded(readablePeriod70, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Chronology chronology76 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant75);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.clockhourOfDay();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(chronology76);
        java.lang.String str79 = localDate78.toString();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = localDate78.toDateTimeAtMidnight(dateTimeZone80);
        org.joda.time.LocalDate localDate82 = localDate72.withFields((org.joda.time.ReadablePartial) localDate78);
        int int83 = localDate62.compareTo((org.joda.time.ReadablePartial) localDate72);
        int int84 = skipUndoDateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDate62);
        java.util.Locale locale85 = null;
        int int86 = skipUndoDateTimeField51.getMaximumShortTextLength(locale85);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 230399999L + "'", long46 == 230399999L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2024-03-31" + "'", str79, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test114");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        java.lang.String str5 = dateTimeField2.getAsShortText((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField10 = new org.joda.time.field.OffsetDateTimeField(dateTimeField2, dateTimeFieldType6, 20, (int) (byte) 100, (int) (byte) 10);
        long long12 = offsetDateTimeField10.roundFloor((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = offsetDateTimeField10.set(0L, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for millisOfDay must be in the range [100,10]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-230400000L) + "'", long12 == (-230400000L));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test115");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property58 = localDate23.dayOfWeek();
        org.joda.time.LocalDate localDate60 = property58.addWrapFieldToCopy(72);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test116");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial7.minus(readablePeriod9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial13 = partial7.withFieldAddWrapped(durationFieldType11, 20);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        org.joda.time.Partial partial16 = partial7.withFieldAddWrapped(durationFieldType14, 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial24.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial24.minus(readablePeriod26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial30 = partial24.withFieldAddWrapped(durationFieldType28, 20);
        org.joda.time.Partial partial32 = partial7.withFieldAdded(durationFieldType28, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType34 = partial32.getFieldType(53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test117");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DurationField durationField38 = limitChronology19.weeks();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test118");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = property9.setCopy(1);
        long long12 = dateTime11.getMillis();
        int int13 = dateTime11.getSecondOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868460000L + "'", long12 == 1711868460000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 60 + "'", int13 == 60);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test119");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.Instant instant17 = instant13.toInstant();
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DurationField durationField19 = chronology18.centuries();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test120");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = iSOChronology10.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = iSOChronology10.weeks();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        java.lang.String str28 = localDate27.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate localDate31 = localDate21.withFields((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate38 = localDate35.withPeriodAdded(readablePeriod36, (int) (short) 10);
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate35);
        int[] intArray40 = partial39.getValues();
        iSOChronology10.validate((org.joda.time.ReadablePartial) localDate27, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology10.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2024-03-31" + "'", str28, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test121");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.minusHours((-1));
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears((int) (byte) 10);
        boolean boolean14 = dateTime13.isAfterNow();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test122");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = julianChronology0.weekOfWeekyear();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology0);
        org.joda.time.DurationField durationField3 = julianChronology0.eras();
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test123");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.yearOfEra();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.months();
        org.joda.time.DurationField durationField8 = chronology4.hours();
        boolean boolean9 = gregorianChronology0.equals((java.lang.Object) chronology4);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test124");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = limitChronology19.getLowerLimit();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) (short) 10);
        int int39 = dateTimeZone35.getOffset((long) 100);
        int int41 = dateTimeZone35.getOffset(0L);
        org.joda.time.Chronology chronology42 = limitChronology19.withZone(dateTimeZone35);
        // The following exception was thrown during execution in test generation
        try {
            long long47 = limitChronology19.getDateTimeMillis((int) ' ', 55, (int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-28800000) + "'", int39 == (-28800000));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-28800000) + "'", int41 == (-28800000));
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test125");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        org.joda.time.DurationField durationField3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = unsupportedDurationField1.compareTo(durationField3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test126");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        org.joda.time.LocalDate localDate92 = localDate33.minusYears((int) '4');
        org.joda.time.LocalDate.Property property93 = localDate92.weekOfWeekyear();
        org.joda.time.LocalDate.Property property94 = localDate92.weekOfWeekyear();
        org.joda.time.LocalDate localDate95 = property94.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate97 = property94.setCopy(55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(localDate95);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test127");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate4);
        int[] intArray9 = partial8.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial8.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant11 = org.joda.time.Instant.parse("13", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"13\" is too short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test128");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfCeilingCopy();
        int int13 = property11.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 365 + "'", int13 == 365);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test129");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.year();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test130");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField36 = gJChronology9.eras();
        java.lang.String str37 = durationField36.getName();
        boolean boolean38 = durationField36.isSupported();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.years();
        org.joda.time.IllegalFieldValueException illegalFieldValueException41 = new org.joda.time.IllegalFieldValueException(durationFieldType39, "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.ScaledDurationField scaledDurationField43 = new org.joda.time.field.ScaledDurationField(durationField36, durationFieldType39, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field must be supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eras" + "'", str37, "eras");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationFieldType39);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test131");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        int int34 = zeroIsMaxDateTimeField15.getMinimumValue(230399999L);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = zeroIsMaxDateTimeField15.roundHalfEven(100L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test132");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate4);
        int[] intArray9 = partial8.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial8.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant11 = org.joda.time.Instant.parse("CopticChronology[America/Los_Angeles,mdfw=2]", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"CopticChronology[America/Los_Ang...\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test133");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        java.lang.String str13 = delegatedDateTimeField9.getAsShortText((long) (short) -1);
        int int15 = delegatedDateTimeField9.getMaximumValue(0L);
        boolean boolean17 = delegatedDateTimeField9.isLeap((long) 365);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test134");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        int int7 = localDate3.getYearOfEra();
        java.util.Date date8 = localDate3.toDate();
        org.joda.time.LocalDate localDate10 = localDate3.minusYears(1);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.LocalDate localDate12 = localDate3.withFields(readablePartial11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology23.getZone();
        org.joda.time.DateTime dateTime25 = localDate12.toDateTimeAtMidnight(dateTimeZone24);
        int int26 = localDate12.getEra();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test135");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.toDurationMillis();
        long long3 = readableInterval1.toDurationMillis();
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate11.withPeriodAdded(readablePeriod12, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial22.getFieldTypes();
        int[] intArray24 = partial22.getValues();
        int int25 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDate11, intArray24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        long long37 = dateTimeZone33.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight39 = localDate11.toDateMidnight(dateTimeZone33);
        int int40 = dateMidnight39.getMinuteOfDay();
        boolean boolean41 = readableInterval4.isAfter((org.joda.time.ReadableInstant) dateMidnight39);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test136");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = julianChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test137");
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField0 = null;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField2 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType1);
        org.joda.time.DurationFieldType durationFieldType3 = unsupportedDurationField2.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.DividedDateTimeField dividedDateTimeField5 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField0, (org.joda.time.DurationField) unsupportedDurationField2, dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(unsupportedDurationField2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test138");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        boolean boolean34 = dividedDateTimeField6.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = dividedDateTimeField6.add((long) 600, 31420800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1633881600000 * 604800000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test139");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTimeField dateTimeField38 = limitChronology19.yearOfEra();
        org.joda.time.DateTime dateTime39 = limitChronology19.getLowerLimit();
        // The following exception was thrown during execution in test generation
        try {
            long long45 = limitChronology19.getDateTimeMillis(33L, 59, 100, (int) (byte) 10, 38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNull(dateTime39);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test140");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean20 = dateTimeZone18.isStandardOffset((long) (short) 10);
        int int22 = dateTimeZone18.getOffset((long) 100);
        long long26 = dateTimeZone18.convertLocalToUTC((-32L), false, (long) 24);
        long long30 = dateTimeZone18.convertLocalToUTC((long) 10, true, (-20117426760000000L));
        long long32 = cachedDateTimeZone17.getMillisKeepLocal(dateTimeZone18, (long) (-28800000));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-28800000) + "'", int22 == (-28800000));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 28799968L + "'", long26 == 28799968L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 28800010L + "'", long30 == 28800010L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-28800000L) + "'", long32 == (-28800000L));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test141");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 2);
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test142");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.Chronology chronology23 = gJChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.yearOfEra();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = dateTime33.getCenturyOfEra();
        int int35 = dateTime33.getMinuteOfDay();
        int int36 = dateTime33.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate40.withPeriodAdded(readablePeriod41, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime33.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology48 = gJChronology22.withZone(dateTimeZone44);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone44.getShortName((long) 72, locale50);
        org.joda.time.Chronology chronology52 = iSOChronology10.withZone(dateTimeZone44);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Chronology chronology54 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant53);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfDay();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate59 = localDate56.withPeriodAdded(readablePeriod57, (int) (short) 10);
        int int60 = localDate56.getYearOfEra();
        java.util.Date date61 = localDate56.toDate();
        org.joda.time.LocalDate localDate63 = localDate56.minusYears(1);
        org.joda.time.ReadablePartial readablePartial64 = null;
        org.joda.time.LocalDate localDate65 = localDate56.withFields(readablePartial64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant66);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfDay();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate72 = localDate69.withPeriodAdded(readablePeriod70, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73);
        org.joda.time.chrono.ISOChronology iSOChronology76 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone77 = iSOChronology76.getZone();
        org.joda.time.DateTime dateTime78 = localDate65.toDateTimeAtMidnight(dateTimeZone77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((java.lang.Object) iSOChronology10, dateTimeZone77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gJChronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(gJChronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-08:00" + "'", str51, "-08:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2024 + "'", int60 == 2024);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(gJChronology75);
        org.junit.Assert.assertNotNull(iSOChronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test143");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = unsupportedDurationField1.getValue(1711879200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test144");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.toDurationMillis();
        org.joda.time.Chronology chronology3 = readableInterval1.getChronology();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        int int13 = dateTime12.getCenturyOfEra();
        int int14 = dateTime12.getMinuteOfDay();
        int int15 = dateTime12.getSecondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.LocalDate localDate25 = localDate23.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate23.minus(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate31.toDateTimeAtMidnight(dateTimeZone41);
        boolean boolean46 = localDate23.isBefore((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfDay();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDate localDate53 = localDate50.withPeriodAdded(readablePeriod51, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = localDate53.toDateTimeAtMidnight(dateTimeZone54);
        org.joda.time.DateTime.Property property56 = dateTime55.minuteOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.minusHours((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property60 = dateTime55.property(dateTimeFieldType59);
        boolean boolean61 = localDate23.isSupported(dateTimeFieldType59);
        org.joda.time.DateTime dateTime63 = dateTime12.withField(dateTimeFieldType59, 24);
        boolean boolean64 = readableInterval1.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(gJChronology43);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test145");
        long long2 = org.joda.time.field.FieldUtils.safeAdd((long) 8, (long) 3600);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3608L + "'", long2 == 3608L);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test146");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        long long15 = dividedDateTimeField6.addWrapField(100L, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate19.withPeriodAdded(readablePeriod20, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate22.plusDays((int) (short) -1);
        int int27 = dividedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = localDate22.toInterval(dateTimeZone28);
        int int30 = localDate22.getEra();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test147");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.months();
        org.joda.time.DurationField durationField16 = chronology12.hours();
        boolean boolean17 = property10.equals((java.lang.Object) durationField16);
        org.joda.time.DateTime dateTime18 = property10.roundCeilingCopy();
        int int19 = dateTime18.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime18.toMutableDateTime(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 13 + "'", int19 == 13);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test148");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        int int14 = delegatedDateTimeField9.getDifference(1711927792875L, 230399999L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.Partial partial40 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial40.getFieldTypes();
        int[] intArray42 = partial40.getValues();
        int int43 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDate29, intArray42);
        int int44 = delegatedDateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) partial22, intArray42);
        java.lang.String str45 = partial22.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2830 + "'", int14 == 2830);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2024-03-31" + "'", str45, "2024-03-31");
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test149");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dividedDateTimeField6.getType();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = gregorianChronology9.halfdays();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.minutes();
        int int13 = durationField10.compareTo(durationField12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField20 = new org.joda.time.field.DividedDateTimeField(dateTimeField16, durationField17, dateTimeFieldType18, (int) '4');
        boolean boolean21 = dividedDateTimeField20.isSupported();
        org.joda.time.DurationField durationField22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField24 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField20, durationField22, dateTimeFieldType23);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField12, dateTimeFieldType23);
        int int26 = dividedDateTimeField6.getMinimumValue();
        boolean boolean27 = dividedDateTimeField6.isSupported();
        java.lang.String str28 = dividedDateTimeField6.toString();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.LocalDate localDate37 = localDate35.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate39 = localDate35.minus(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant46);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.clockhourOfDay();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate52 = localDate49.withPeriodAdded(readablePeriod50, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = localDate52.toDateTimeAtMidnight(dateTimeZone53);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = localDate43.toDateTimeAtMidnight(dateTimeZone53);
        boolean boolean58 = localDate35.isBefore((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = localDate35.getFieldType((int) (byte) 1);
        int int61 = dividedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate35);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[millisOfDay]" + "'", str28, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(gJChronology55);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test150");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        java.lang.String str11 = remainderDateTimeField10.toString();
        long long13 = remainderDateTimeField10.roundFloor(0L);
        org.joda.time.DurationField durationField14 = remainderDateTimeField10.getDurationField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[secondOfDay]" + "'", str11, "DateTimeField[secondOfDay]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-230400000L) + "'", long13 == (-230400000L));
        org.junit.Assert.assertNull(durationField14);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test151");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal(1584000000L);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 1, locale4);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-28800000) + "'", int2 == (-28800000));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-08:00" + "'", str5, "-08:00");
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test152");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = limitChronology19.getLowerLimit();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField41 = new org.joda.time.field.DividedDateTimeField(dateTimeField37, durationField38, dateTimeFieldType39, (int) '4');
        java.util.Locale locale42 = null;
        int int43 = dateTimeField37.getMaximumShortTextLength(locale42);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField44 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField37);
        long long46 = delegatedDateTimeField44.remainder((-1L));
        java.lang.String str48 = delegatedDateTimeField44.getAsShortText((long) (short) -1);
        int int50 = delegatedDateTimeField44.getMaximumValue(0L);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField51 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) limitChronology19, (org.joda.time.DateTimeField) delegatedDateTimeField44);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDate localDate58 = localDate55.withPeriodAdded(readablePeriod56, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = localDate58.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate64 = localDate62.withYear((int) (short) 0);
        int int65 = localDate62.size();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant66);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfDay();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate72 = localDate69.withPeriodAdded(readablePeriod70, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Chronology chronology76 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant75);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.clockhourOfDay();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(chronology76);
        java.lang.String str79 = localDate78.toString();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = localDate78.toDateTimeAtMidnight(dateTimeZone80);
        org.joda.time.LocalDate localDate82 = localDate72.withFields((org.joda.time.ReadablePartial) localDate78);
        int int83 = localDate62.compareTo((org.joda.time.ReadablePartial) localDate72);
        int int84 = skipUndoDateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDate62);
        long long87 = skipUndoDateTimeField51.set((long) 10, (int) (byte) 10);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 230399999L + "'", long46 == 230399999L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2024-03-31" + "'", str79, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 5443200010L + "'", long87 == 5443200010L);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test153");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(3);
        long long3 = dateTimeZone1.previousTransition(5443200010L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 5443200010L + "'", long3 == 5443200010L);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test154");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property58 = localDate23.dayOfWeek();
        java.util.Locale locale60 = null;
        org.joda.time.LocalDate localDate61 = property58.setCopy("2", locale60);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test155");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        long long20 = zeroIsMaxDateTimeField15.add((-1L), (long) (byte) 10);
        int int22 = zeroIsMaxDateTimeField15.getMaximumValue(0L);
        boolean boolean23 = zeroIsMaxDateTimeField15.isSupported();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 314495999999L + "'", long20 == 314495999999L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test156");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        int[] intArray8 = partial7.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial7.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = partial7.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test157");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate59 = localDate23.withCenturyOfEra(52);
        org.joda.time.LocalDate localDate61 = localDate23.minusYears(84596);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant62);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfDay();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDate localDate68 = localDate65.withPeriodAdded(readablePeriod66, (int) (short) 10);
        org.joda.time.Partial partial69 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = partial69.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial72 = partial69.minus(readablePeriod71);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial75 = partial69.withFieldAddWrapped(durationFieldType73, 20);
        org.joda.time.LocalDate localDate76 = localDate61.withFields((org.joda.time.ReadablePartial) partial75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Chronology chronology78 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant77);
        org.joda.time.DateTimeField dateTimeField79 = chronology78.weekOfWeekyear();
        org.joda.time.DurationField durationField80 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField83 = new org.joda.time.field.DividedDateTimeField(dateTimeField79, durationField80, dateTimeFieldType81, (int) '4');
        boolean boolean84 = dividedDateTimeField83.isSupported();
        org.joda.time.DurationField durationField85 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField87 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField83, durationField85, dateTimeFieldType86);
        int int88 = localDate76.indexOf(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray70);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test158");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        long long18 = zeroIsMaxDateTimeField15.add((long) 84596, (int) (byte) 0);
        long long21 = zeroIsMaxDateTimeField15.add(31556952000L, 73);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 84596L + "'", long18 == 84596L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2327374152000L + "'", long21 == 2327374152000L);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test159");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekOfWeekyear();
        org.joda.time.DurationField durationField33 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField36 = new org.joda.time.field.DividedDateTimeField(dateTimeField32, durationField33, dateTimeFieldType34, (int) '4');
        java.util.Locale locale37 = null;
        int int38 = dateTimeField32.getMaximumShortTextLength(locale37);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField39 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField32);
        long long41 = delegatedDateTimeField39.remainder((-1L));
        int int44 = delegatedDateTimeField39.getDifference(1711927792875L, 230399999L);
        long long46 = delegatedDateTimeField39.roundHalfEven((long) (short) 100);
        boolean boolean47 = partial25.equals((java.lang.Object) long46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial25.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDate localDate55 = localDate52.withPeriodAdded(readablePeriod53, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = localDate55.toDateTimeAtMidnight(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateTime57.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.plus(readableDuration59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Chronology chronology62 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant61);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.clockhourOfDay();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDate localDate67 = localDate64.withPeriodAdded(readablePeriod65, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = localDate67.toDateTimeAtMidnight(dateTimeZone68);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfDay();
        org.joda.time.DateTime dateTime72 = dateTime69.minusHours((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property74 = dateTime69.property(dateTimeFieldType73);
        boolean boolean75 = dateTime60.isSupported(dateTimeFieldType73);
        boolean boolean76 = partial25.isSupported(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 230399999L + "'", long41 == 230399999L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2830 + "'", int44 == 2830);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-230400000L) + "'", long46 == (-230400000L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test160");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfCentury();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getDayOfYear();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfDay();
        boolean boolean24 = property22.equals((java.lang.Object) 2);
        org.joda.time.Interval interval25 = property22.toInterval();
        boolean boolean26 = interval11.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Period period27 = interval25.toPeriod();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        java.lang.String str32 = localDate31.toString();
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtCurrentTime();
        boolean boolean34 = period27.equals((java.lang.Object) localDate31);
        org.joda.time.LocalDate.Property property35 = localDate31.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 91 + "'", int21 == 91);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2024-03-31" + "'", str32, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test161");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        boolean boolean12 = property10.equals((java.lang.Object) 2);
        java.lang.String str13 = property10.getAsShortText();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate17.withPeriodAdded(readablePeriod18, (int) (short) 10);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate17);
        int[] intArray22 = partial21.getValues();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfDay();
        org.joda.time.DateTime dateTime34 = property32.addToCopy(10L);
        org.joda.time.DateTime dateTime36 = dateTime34.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property37 = dateTime34.yearOfCentury();
        org.joda.time.DateTime dateTime38 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTime();
        boolean boolean40 = property10.equals((java.lang.Object) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.plusDays(3);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test162");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = limitChronology19.getDateTimeMillis(21, (int) (short) 10, 31, (int) (byte) 100, 2014, 13, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test163");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        org.joda.time.LocalDate localDate92 = localDate33.minusYears((int) '4');
        org.joda.time.LocalDate localDate94 = localDate33.withWeekyear(2014);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(localDate94);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test164");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField36 = gJChronology9.eras();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        java.lang.String str41 = localDate40.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtMidnight(dateTimeZone42);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone42);
        org.joda.time.Chronology chronology45 = gJChronology9.withZone(dateTimeZone42);
        java.lang.String str46 = chronology45.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2024-03-31" + "'", str41, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GJChronology[America/Los_Angeles]" + "'", str46, "GJChronology[America/Los_Angeles]");
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test165");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property6 = dateTime5.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2024-03-31" + "'", str4, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test166");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial7.minus(readablePeriod9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial13 = partial7.withFieldAddWrapped(durationFieldType11, 20);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        org.joda.time.Partial partial16 = partial7.withFieldAddWrapped(durationFieldType14, 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial24.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial24.minus(readablePeriod26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial30 = partial24.withFieldAddWrapped(durationFieldType28, 20);
        org.joda.time.Partial partial32 = partial7.withFieldAdded(durationFieldType28, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int34 = partial7.get(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = partial7.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 31 + "'", int34 == 31);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test167");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        java.lang.String str91 = localDate33.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2024-03-31" + "'", str91, "2024-03-31");
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test168");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.year();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        long long30 = dateTimeZone26.adjustOffset(0L, true);
        org.joda.time.DateMidnight dateMidnight31 = localDate16.toDateMidnight(dateTimeZone26);
        org.joda.time.Chronology chronology32 = gJChronology9.withZone(dateTimeZone26);
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology33.weekyearOfCentury();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test169");
        org.joda.time.DurationField durationField0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = gregorianChronology1.minutes();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        boolean boolean15 = durationFieldType3.isSupported((org.joda.time.Chronology) gJChronology13);
        org.joda.time.IllegalFieldValueException illegalFieldValueException17 = new org.joda.time.IllegalFieldValueException(durationFieldType3, "2024-03-31T00:00:00.000-07:00");
        org.joda.time.field.ScaledDurationField scaledDurationField19 = new org.joda.time.field.ScaledDurationField(durationField2, durationFieldType3, 60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.DecoratedDurationField decoratedDurationField20 = new org.joda.time.field.DecoratedDurationField(durationField0, durationFieldType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gJChronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test170");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        long long18 = zeroIsMaxDateTimeField15.add((long) 84596, (int) (byte) 0);
        long long21 = zeroIsMaxDateTimeField15.add(1584000000L, (int) (byte) 1);
        int int22 = zeroIsMaxDateTimeField15.getMaximumValue();
        boolean boolean24 = zeroIsMaxDateTimeField15.isLeap((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = zeroIsMaxDateTimeField15.roundHalfFloor((long) 84677);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 84596L + "'", long18 == 84596L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 33033600000L + "'", long21 == 33033600000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test171");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        int int19 = cachedDateTimeZone17.getStandardOffset(31420800000L);
        int int21 = cachedDateTimeZone17.getStandardOffset(0L);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now((org.joda.time.DateTimeZone) cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-28800000) + "'", int19 == (-28800000));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-28800000) + "'", int21 == (-28800000));
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test172");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        long long4 = unsupportedDurationField1.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = unsupportedDurationField1.getValueAsLong((long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test173");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.halfdays();
        long long3 = durationField1.getMillis(0L);
        java.lang.String str4 = durationField1.getName();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "halfdays" + "'", str4, "halfdays");
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test174");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial17.getFieldTypes();
        int[] intArray19 = partial17.getValues();
        int int20 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate6, intArray19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        java.lang.String str25 = localDate24.toString();
        int int26 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = localDate24.withWeekOfWeekyear((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2024-03-31" + "'", str25, "2024-03-31");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 24 + "'", int26 == 24);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test175");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property58 = localDate23.dayOfWeek();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant59);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant62);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfDay();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDate localDate68 = localDate65.withPeriodAdded(readablePeriod66, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Chronology chronology70 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant69);
        org.joda.time.DateTimeField dateTimeField71 = chronology70.clockhourOfDay();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(chronology70);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDate localDate75 = localDate72.withPeriodAdded(readablePeriod73, (int) (short) 10);
        org.joda.time.Partial partial76 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = partial76.getFieldTypes();
        int[] intArray78 = partial76.getValues();
        int int79 = dateTimeField61.getMinimumValue((org.joda.time.ReadablePartial) localDate65, intArray78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Chronology chronology81 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant80);
        org.joda.time.DateTimeField dateTimeField82 = chronology81.clockhourOfDay();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology81);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDate localDate86 = localDate83.withPeriodAdded(readablePeriod84, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime88 = localDate86.toDateTimeAtMidnight(dateTimeZone87);
        long long91 = dateTimeZone87.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology92 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight93 = localDate65.toDateMidnight(dateTimeZone87);
        long long97 = dateTimeZone87.convertLocalToUTC((-20117426760000000L), false, (-32L));
        org.joda.time.Interval interval98 = localDate23.toInterval(dateTimeZone87);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology92);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-20117426731622000L) + "'", long97 == (-20117426731622000L));
        org.junit.Assert.assertNotNull(interval98);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test176");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.minusHours((-1));
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 600);
        int int17 = dateTime11.getHourOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test177");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dividedDateTimeField6.getType();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = gregorianChronology9.halfdays();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.minutes();
        int int13 = durationField10.compareTo(durationField12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField20 = new org.joda.time.field.DividedDateTimeField(dateTimeField16, durationField17, dateTimeFieldType18, (int) '4');
        boolean boolean21 = dividedDateTimeField20.isSupported();
        org.joda.time.DurationField durationField22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField24 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField20, durationField22, dateTimeFieldType23);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField12, dateTimeFieldType23);
        int int26 = dividedDateTimeField6.getMinimumValue();
        boolean boolean27 = dividedDateTimeField6.isSupported();
        int int28 = dividedDateTimeField6.getMaximumValue();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.Partial partial36 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate40.withPeriodAdded(readablePeriod41, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        int int46 = dateTime45.getDayOfYear();
        org.joda.time.DateTime.Property property47 = dateTime45.yearOfCentury();
        org.joda.time.Interval interval48 = property47.toInterval();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDate localDate55 = localDate52.withPeriodAdded(readablePeriod53, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = localDate55.toDateTimeAtMidnight(dateTimeZone56);
        int int58 = dateTime57.getDayOfYear();
        org.joda.time.DateTime.Property property59 = dateTime57.minuteOfDay();
        boolean boolean61 = property59.equals((java.lang.Object) 2);
        org.joda.time.Interval interval62 = property59.toInterval();
        boolean boolean63 = interval48.isAfter((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Period period64 = interval62.toPeriod();
        org.joda.time.Partial partial65 = partial36.minus((org.joda.time.ReadablePeriod) period64);
        java.util.Locale locale67 = null;
        java.lang.String str68 = dividedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial36, 7, locale67);
        long long71 = dividedDateTimeField6.add(374400000L, (long) '#');
        int int73 = dividedDateTimeField6.get(100L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 91 + "'", int46 == 91);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 91 + "'", int58 == 91);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "7" + "'", str68, "7");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1101110400000L + "'", long71 == 1101110400000L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test178");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) (short) 10);
        long long4 = dateTimeZone0.nextTransition((long) 60);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9972000000L + "'", long4 == 9972000000L);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test179");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone) cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test180");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        long long15 = dividedDateTimeField6.addWrapField(100L, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate19.withPeriodAdded(readablePeriod20, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate22.plusDays((int) (short) -1);
        int int27 = dividedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate34 = localDate31.withPeriodAdded(readablePeriod32, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        long long39 = dateTimeZone35.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone35);
        org.joda.time.DurationField durationField41 = iSOChronology40.halfdays();
        boolean boolean42 = localDate22.equals((java.lang.Object) iSOChronology40);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate49 = localDate46.withPeriodAdded(readablePeriod47, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtMidnight(dateTimeZone50);
        int int52 = dateTime51.getDayOfYear();
        org.joda.time.DateTime.Property property53 = dateTime51.yearOfCentury();
        org.joda.time.Interval interval54 = property53.toInterval();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.clockhourOfDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDate localDate61 = localDate58.withPeriodAdded(readablePeriod59, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = localDate61.toDateTimeAtMidnight(dateTimeZone62);
        int int64 = dateTime63.getDayOfYear();
        org.joda.time.DateTime.Property property65 = dateTime63.minuteOfDay();
        boolean boolean67 = property65.equals((java.lang.Object) 2);
        org.joda.time.Interval interval68 = property65.toInterval();
        boolean boolean69 = interval54.isAfter((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Period period70 = interval68.toPeriod();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Chronology chronology72 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant71);
        org.joda.time.DateTimeField dateTimeField73 = chronology72.clockhourOfDay();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(chronology72);
        java.lang.String str75 = localDate74.toString();
        org.joda.time.DateTime dateTime76 = localDate74.toDateTimeAtCurrentTime();
        boolean boolean77 = period70.equals((java.lang.Object) localDate74);
        int[] intArray79 = iSOChronology40.get((org.joda.time.ReadablePeriod) period70, (long) (byte) 100);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 91 + "'", int52 == 91);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 91 + "'", int64 == 91);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2024-03-31" + "'", str75, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0, 0, 0, 0, 0, 0, 100]");
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test181");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) (short) 10);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test182");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.minusHours((-1));
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.withDurationAdded(readableDuration14, 600);
        int int17 = dateTime11.getDayOfYear();
        int int18 = dateTime11.getMillisOfSecond();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 91 + "'", int17 == 91);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test183");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        org.joda.time.LocalDate localDate92 = localDate33.minusYears((int) '4');
        org.joda.time.LocalDate.Property property93 = localDate92.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate95 = property93.setCopy("0");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test184");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekOfWeekyear();
        org.joda.time.DurationField durationField33 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField36 = new org.joda.time.field.DividedDateTimeField(dateTimeField32, durationField33, dateTimeFieldType34, (int) '4');
        java.util.Locale locale37 = null;
        int int38 = dateTimeField32.getMaximumShortTextLength(locale37);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField39 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField32);
        long long41 = delegatedDateTimeField39.remainder((-1L));
        int int44 = delegatedDateTimeField39.getDifference(1711927792875L, 230399999L);
        long long46 = delegatedDateTimeField39.roundHalfEven((long) (short) 100);
        boolean boolean47 = partial25.equals((java.lang.Object) long46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial25.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        org.joda.time.DurationField durationField52 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField55 = new org.joda.time.field.DividedDateTimeField(dateTimeField51, durationField52, dateTimeFieldType53, (int) '4');
        boolean boolean56 = dividedDateTimeField55.isSupported();
        org.joda.time.DurationField durationField57 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField59 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField55, durationField57, dateTimeFieldType58);
        int int61 = dividedDateTimeField55.getMaximumValue(97L);
        long long64 = dividedDateTimeField55.addWrapField(100L, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant65);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfDay();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDate localDate71 = localDate68.withPeriodAdded(readablePeriod69, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = localDate71.toDateTimeAtMidnight(dateTimeZone72);
        org.joda.time.LocalDate localDate75 = localDate71.plusDays((int) (short) -1);
        int int76 = dividedDateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localDate71);
        int[] intArray77 = localDate71.getValues();
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray48, intArray77);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 230399999L + "'", long41 == 230399999L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2830 + "'", int44 == 2830);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-230400000L) + "'", long46 == (-230400000L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[2024, 3, 31]");
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test185");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        long long12 = remainderDateTimeField10.roundFloor((long) (short) -1);
        org.joda.time.DateTimeField dateTimeField13 = remainderDateTimeField10.getWrappedField();
        org.joda.time.DurationField durationField14 = remainderDateTimeField10.getRangeDurationField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-230400000L) + "'", long12 == (-230400000L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test186");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate4);
        int[] intArray9 = partial8.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial8.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.parse("America/Los_Angeles", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"America/Los_Angeles\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test187");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        java.lang.String str1 = buddhistChronology0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Chronology chronology3 = buddhistChronology0.withZone(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = buddhistChronology0.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate8.withPeriodAdded(readablePeriod9, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        long long16 = dateTimeZone12.adjustOffset(0L, true);
        org.joda.time.Chronology chronology17 = buddhistChronology0.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField18 = buddhistChronology0.secondOfMinute();
        org.joda.time.DurationField durationField19 = buddhistChronology0.eras();
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "BuddhistChronology[UTC]" + "'", str1, "BuddhistChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test188");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        java.util.Locale locale21 = null;
        java.lang.String str22 = delegatedDateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate18, locale21);
        long long24 = delegatedDateTimeField9.roundHalfEven((-210866774822000L));
        boolean boolean25 = delegatedDateTimeField9.isSupported();
        int int28 = delegatedDateTimeField9.getDifference((long) (byte) -1, 0L);
        java.lang.String str29 = delegatedDateTimeField9.getName();
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField38 = new org.joda.time.field.DividedDateTimeField(dateTimeField34, durationField35, dateTimeFieldType36, (int) '4');
        java.util.Locale locale39 = null;
        int int40 = dateTimeField34.getMaximumShortTextLength(locale39);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField41 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField34);
        long long43 = delegatedDateTimeField41.remainder((-1L));
        int int46 = delegatedDateTimeField41.getDifference(1711927792875L, 230399999L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfDay();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDate localDate53 = localDate50.withPeriodAdded(readablePeriod51, (int) (short) 10);
        org.joda.time.Partial partial54 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant58);
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfDay();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDate localDate64 = localDate61.withPeriodAdded(readablePeriod62, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant65);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfDay();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDate localDate71 = localDate68.withPeriodAdded(readablePeriod69, (int) (short) 10);
        org.joda.time.Partial partial72 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = partial72.getFieldTypes();
        int[] intArray74 = partial72.getValues();
        int int75 = dateTimeField57.getMinimumValue((org.joda.time.ReadablePartial) localDate61, intArray74);
        int int76 = delegatedDateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) partial54, intArray74);
        int[] intArray78 = delegatedDateTimeField9.add((org.joda.time.ReadablePartial) localDate30, 13, intArray74, 0);
        org.joda.time.LocalDate localDate80 = localDate30.plusWeeks(0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "13" + "'", str22, "13");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-210866774822000L) + "'", long24 == (-210866774822000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekOfWeekyear" + "'", str29, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 230399999L + "'", long43 == 230399999L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2830 + "'", int46 == 2830);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 53 + "'", int76 == 53);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(localDate80);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test189");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        java.lang.String str13 = delegatedDateTimeField9.getAsShortText((long) (short) -1);
        java.util.Locale locale14 = null;
        int int15 = delegatedDateTimeField9.getMaximumTextLength(locale14);
        int int17 = delegatedDateTimeField9.getLeapAmount(577886222L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test190");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.minusHours((-1));
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears((int) (byte) 10);
        int int14 = dateTime11.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.IllegalFieldValueException illegalFieldValueException17 = new org.joda.time.IllegalFieldValueException(durationFieldType15, "hi!");
        org.joda.time.DateTime dateTime19 = dateTime11.withFieldAdded(durationFieldType15, (int) (short) 0);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis((int) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.minusHours((-1));
        org.joda.time.DateTime dateTime39 = dateTime37.minusYears((int) (byte) 10);
        int int40 = dateTime37.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology41 = org.joda.time.chrono.LimitChronology.getInstance(chronology23, readableDateTime25, (org.joda.time.ReadableDateTime) dateTime37);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate48 = localDate45.withPeriodAdded(readablePeriod46, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = localDate48.toDateTimeAtMidnight(dateTimeZone49);
        int int51 = dateTime50.getCenturyOfEra();
        int int52 = dateTime50.getMinuteOfDay();
        int int53 = dateTime50.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime50.getZone();
        org.joda.time.Chronology chronology55 = limitChronology41.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = limitChronology41.getLowerLimit();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean59 = dateTimeZone57.isStandardOffset((long) (short) 10);
        int int61 = dateTimeZone57.getOffset((long) 100);
        int int63 = dateTimeZone57.getOffset(0L);
        org.joda.time.Chronology chronology64 = limitChronology41.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime65 = dateTime21.toDateTime((org.joda.time.Chronology) limitChronology41);
        int int66 = dateTime21.getMillisOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 24 + "'", int14 == 24);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 24 + "'", int40 == 24);
        org.junit.Assert.assertNotNull(limitChronology41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-28800000) + "'", int61 == (-28800000));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-28800000) + "'", int63 == (-28800000));
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3599965 + "'", int66 == 3599965);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test191");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekOfWeekyear();
        java.util.Locale locale5 = null;
        int int6 = dateTimeField4.getMaximumShortTextLength(locale5);
        long long9 = dateTimeField4.addWrapField(10L, 1);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField10 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) gregorianChronology0, dateTimeField4);
        int int13 = skipUndoDateTimeField10.getDifference((long) (byte) -1, 0L);
        java.lang.String str15 = skipUndoDateTimeField10.getAsShortText((long) (-20));
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtCurrentTime();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        int int32 = dateTime31.getCenturyOfEra();
        int int33 = dateTime31.getMinuteOfDay();
        int int34 = dateTime31.getMinuteOfDay();
        org.joda.time.DateTime dateTime36 = dateTime31.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology37.dayOfMonth();
        long long41 = dateTimeField38.getDifferenceAsLong((long) (short) 0, 0L);
        int int42 = dateTime31.get(dateTimeField38);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        java.lang.String str47 = localDate46.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = localDate46.toDateTimeAtMidnight(dateTimeZone48);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDate localDate58 = localDate55.withPeriodAdded(readablePeriod56, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        org.joda.time.Chronology chronology62 = gJChronology61.withUTC();
        boolean boolean63 = durationFieldType51.isSupported((org.joda.time.Chronology) gJChronology61);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology61);
        org.joda.time.DateTime dateTime65 = localDate46.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Chronology chronology68 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant67);
        org.joda.time.DateTimeField dateTimeField69 = chronology68.clockhourOfDay();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate73 = localDate70.withPeriodAdded(readablePeriod71, (int) (short) 10);
        org.joda.time.Partial partial74 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate70);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = partial74.getFieldTypes();
        int[] intArray76 = partial74.getValues();
        int[] intArray78 = dateTimeField38.add((org.joda.time.ReadablePartial) localDate46, (int) (byte) 10, intArray76, 0);
        java.util.Locale locale80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray81 = skipUndoDateTimeField10.set((org.joda.time.ReadablePartial) localDate19, (int) (byte) 0, intArray76, "DateTimeField[secondOfDay]", locale80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[secondOfDay]\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 604800010L + "'", long9 == 604800010L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2024-03-31" + "'", str20, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(gregorianChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 31 + "'", int42 == 31);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2024-03-31" + "'", str47, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(gJChronology61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[2024, 3, 31]");
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test192");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        long long36 = dividedDateTimeField6.addWrapField(63072000000L, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = dividedDateTimeField6.add(1711868473002L, (-6051597170L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -314683052840 * 604800000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 63072000000L + "'", long36 == 63072000000L);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test193");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        long long18 = zeroIsMaxDateTimeField15.add((long) 84596, (int) (byte) 0);
        long long21 = zeroIsMaxDateTimeField15.add(1584000000L, (int) (byte) 1);
        int int22 = zeroIsMaxDateTimeField15.getMaximumValue();
        int int24 = zeroIsMaxDateTimeField15.get((long) 2);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (short) 10);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate localDate34 = localDate28.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property35 = localDate28.yearOfEra();
        int int36 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDate28);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = zeroIsMaxDateTimeField15.addWrapField((-17163014400000000L), 21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 90 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 84596L + "'", long18 == 84596L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 33033600000L + "'", long21 == 33033600000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test194");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.minuteOfHour();
        java.lang.String str4 = dateTimeField2.getAsShortText(3050607600032L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate8.withPeriodAdded(readablePeriod9, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        int int14 = dateTime13.getDayOfYear();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate19.withPeriodAdded(readablePeriod20, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = iSOChronology26.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField30 = iSOChronology26.weeks();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) dateTime13, (org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDate.Property property32 = localDate31.era();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        org.joda.time.DurationField durationField36 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField(dateTimeField35, durationField36, dateTimeFieldType37, (int) '4');
        java.util.Locale locale40 = null;
        int int41 = dateTimeField35.getMaximumShortTextLength(locale40);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField42 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField35);
        long long44 = delegatedDateTimeField42.remainder((-1L));
        int int47 = delegatedDateTimeField42.getDifference(1711927792875L, 230399999L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Chronology chronology49 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant48);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.clockhourOfDay();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDate localDate54 = localDate51.withPeriodAdded(readablePeriod52, (int) (short) 10);
        org.joda.time.Partial partial55 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate51);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant59);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfDay();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDate localDate65 = localDate62.withPeriodAdded(readablePeriod63, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant66);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfDay();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate72 = localDate69.withPeriodAdded(readablePeriod70, (int) (short) 10);
        org.joda.time.Partial partial73 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray74 = partial73.getFieldTypes();
        int[] intArray75 = partial73.getValues();
        int int76 = dateTimeField58.getMinimumValue((org.joda.time.ReadablePartial) localDate62, intArray75);
        int int77 = delegatedDateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) partial55, intArray75);
        int int78 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate31, intArray75);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 91 + "'", int14 == 91);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 230399999L + "'", long44 == 230399999L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2830 + "'", int47 == 2830);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 53 + "'", int77 == 53);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 59 + "'", int78 == 59);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test195");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        long long20 = zeroIsMaxDateTimeField15.add((-1L), (long) (byte) 10);
        int int21 = zeroIsMaxDateTimeField15.getMinimumValue();
        long long24 = zeroIsMaxDateTimeField15.add((long) 33, 3608);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 314495999999L + "'", long20 == 314495999999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 113470153200033L + "'", long24 == 113470153200033L);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test196");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        java.lang.String str20 = limitChronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = limitChronology19.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = limitChronology19.getDateTimeMillis(84596, 2024, (-1), 72, (int) (short) 100, 4, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]" + "'", str20, "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]");
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test197");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.chrono.BuddhistChronology buddhistChronology1 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = buddhistChronology1.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField3 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        java.lang.String str17 = localDate16.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.LocalDate localDate20 = localDate10.withFields((org.joda.time.ReadablePartial) localDate16);
        java.util.Date date21 = localDate20.toDate();
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate20);
        java.util.Locale locale23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = unsupportedDateTimeField3.getAsText((org.joda.time.ReadablePartial) partial22, locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: clockhourOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(buddhistChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2024-03-31" + "'", str17, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test198");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfCentury();
        boolean boolean22 = localDate3.equals((java.lang.Object) property21);
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumTextLength(locale23);
        org.joda.time.DateTime dateTime25 = property21.roundHalfFloorCopy();
        java.lang.String str26 = property21.getName();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight(dateTimeZone34);
        int int36 = dateTime35.getDayOfYear();
        org.joda.time.DateTime.Property property37 = dateTime35.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.months();
        org.joda.time.DurationField durationField43 = chronology39.hours();
        boolean boolean44 = property37.equals((java.lang.Object) durationField43);
        org.joda.time.DateTime dateTime45 = property37.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime45.toMutableDateTimeISO();
        boolean boolean47 = property21.equals((java.lang.Object) dateTime45);
        boolean boolean48 = property21.isLeap();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 91 + "'", int20 == 91);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "yearOfCentury" + "'", str26, "yearOfCentury");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 91 + "'", int36 == 91);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test199");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        int int45 = dateTime44.getCenturyOfEra();
        int int46 = dateTime44.getMinuteOfDay();
        int int47 = dateTime44.getMinuteOfDay();
        org.joda.time.DateTime dateTime49 = dateTime44.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology50 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = gregorianChronology50.dayOfMonth();
        long long54 = dateTimeField51.getDifferenceAsLong((long) (short) 0, 0L);
        int int55 = dateTime44.get(dateTimeField51);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfDay();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        java.lang.String str60 = localDate59.toString();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = localDate59.toDateTimeAtMidnight(dateTimeZone61);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant65);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfDay();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDate localDate71 = localDate68.withPeriodAdded(readablePeriod69, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = localDate71.toDateTimeAtMidnight(dateTimeZone72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72);
        org.joda.time.Chronology chronology75 = gJChronology74.withUTC();
        boolean boolean76 = durationFieldType64.isSupported((org.joda.time.Chronology) gJChronology74);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology74);
        org.joda.time.DateTime dateTime78 = localDate59.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Chronology chronology81 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant80);
        org.joda.time.DateTimeField dateTimeField82 = chronology81.clockhourOfDay();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology81);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDate localDate86 = localDate83.withPeriodAdded(readablePeriod84, (int) (short) 10);
        org.joda.time.Partial partial87 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate83);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray88 = partial87.getFieldTypes();
        int[] intArray89 = partial87.getValues();
        int[] intArray91 = dateTimeField51.add((org.joda.time.ReadablePartial) localDate59, (int) (byte) 10, intArray89, 0);
        int int92 = localDate59.getYearOfCentury();
        boolean boolean93 = dateTimeZone31.equals((java.lang.Object) localDate59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology95 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31, (-28800000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: -28800000");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20 + "'", int45 == 20);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(gregorianChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 31 + "'", int55 == 31);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2024-03-31" + "'", str60, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(gJChronology74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 24 + "'", int92 == 24);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test200");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        int int19 = cachedDateTimeZone17.getStandardOffset(31420800000L);
        long long22 = cachedDateTimeZone17.convertLocalToUTC((long) 3, false);
        int int24 = cachedDateTimeZone17.getOffset(10L);
        int int26 = cachedDateTimeZone17.getOffsetFromLocal((-210866774822000L));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-28800000) + "'", int19 == (-28800000));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 28800003L + "'", long22 == 28800003L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-28800000) + "'", int24 == (-28800000));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-28378000) + "'", int26 == (-28378000));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test201");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        boolean boolean3 = unsupportedDurationField1.isPrecise();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test202");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        int int45 = dateTime44.getDayOfYear();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfDay();
        boolean boolean48 = property46.equals((java.lang.Object) 2);
        org.joda.time.DateTimeField dateTimeField49 = property46.getField();
        org.joda.time.field.SkipDateTimeField skipDateTimeField50 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) gJChronology9, dateTimeField49);
        org.joda.time.DurationField durationField51 = skipDateTimeField50.getRangeDurationField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 91 + "'", int45 == 91);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test203");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        org.joda.time.DurationField durationField36 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField39 = new org.joda.time.field.DividedDateTimeField(dateTimeField35, durationField36, dateTimeFieldType37, (int) '4');
        java.util.Locale locale40 = null;
        int int41 = dateTimeField35.getMaximumShortTextLength(locale40);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField42 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField35);
        long long44 = delegatedDateTimeField42.remainder((-1L));
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDate localDate51 = localDate48.withPeriodAdded(readablePeriod49, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        java.util.Locale locale54 = null;
        java.lang.String str55 = delegatedDateTimeField42.getAsText((org.joda.time.ReadablePartial) localDate51, locale54);
        java.util.Date date56 = localDate51.toDate();
        int int57 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDate51);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 230399999L + "'", long44 == 230399999L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "13" + "'", str55, "13");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test204");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.Instant instant19 = instant13.withDurationAdded(604800010L, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfDay();
        org.joda.time.DateTime dateTime31 = property29.addToCopy(10L);
        boolean boolean32 = instant19.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant19.minus(readableDuration33);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(instant34);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test205");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone7.getShortName((-20117426760000000L), locale19);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-07:52:58" + "'", str20, "-07:52:58");
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test206");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTime dateTime38 = limitChronology19.getUpperLimit();
        org.joda.time.DateTime dateTime40 = dateTime38.withYear(55);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test207");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial17.getFieldTypes();
        int[] intArray19 = partial17.getValues();
        int int20 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate6, intArray19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        java.lang.String str25 = localDate24.toString();
        int int26 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDate24.isSupported(dateTimeFieldType27);
        int int29 = localDate24.getYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2024-03-31" + "'", str25, "2024-03-31");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 24 + "'", int26 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2024 + "'", int29 == 2024);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test208");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        long long12 = dateTimeZone7.previousTransition((-61141277221968L));
        org.joda.time.chrono.BuddhistChronology buddhistChronology13 = org.joda.time.chrono.BuddhistChronology.getInstance(dateTimeZone7);
        long long15 = dateTimeZone7.nextTransition(1711927792875L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        java.lang.String str17 = dateTimeZone7.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-61141277221968L) + "'", long12 == (-61141277221968L));
        org.junit.Assert.assertNotNull(buddhistChronology13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1730624400000L + "'", long15 == 1730624400000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "America/Los_Angeles" + "'", str17, "America/Los_Angeles");
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test209");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.roundFloor((long) (-28800000));
        long long14 = delegatedDateTimeField9.addWrapField((long) (-28800000), (int) (short) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = localDate18.toDateTimeAtMidnight(dateTimeZone28);
        int[] intArray39 = new int[] { 2024, 24, 31, (byte) 100, '#', 54 };
        int int40 = delegatedDateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray39);
        java.util.Locale locale41 = null;
        int int42 = delegatedDateTimeField9.getMaximumShortTextLength(locale41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate49 = localDate46.withPeriodAdded(readablePeriod47, (int) (short) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial50.getFieldTypes();
        int[] intArray52 = partial50.getValues();
        java.util.Locale locale54 = null;
        java.lang.String str55 = delegatedDateTimeField9.getAsText((org.joda.time.ReadablePartial) partial50, 51, locale54);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = partial50.getValue((-20));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-230400000L) + "'", long11 == (-230400000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31420800000L + "'", long14 == 31420800000L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2024, 24, 31, 100, 35, 54]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2024, 3, 31]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "51" + "'", str55, "51");
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test210");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        int[] intArray9 = partial7.getValues();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        int int19 = dateTime18.getDayOfYear();
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfCentury();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtMidnight(dateTimeZone29);
        int int31 = dateTime30.getDayOfYear();
        org.joda.time.DateTime.Property property32 = dateTime30.minuteOfDay();
        boolean boolean34 = property32.equals((java.lang.Object) 2);
        org.joda.time.Interval interval35 = property32.toInterval();
        boolean boolean36 = interval21.isAfter((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Period period37 = interval35.toPeriod();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        java.lang.String str42 = localDate41.toString();
        org.joda.time.DateTime dateTime43 = localDate41.toDateTimeAtCurrentTime();
        boolean boolean44 = period37.equals((java.lang.Object) localDate41);
        org.joda.time.MutablePeriod mutablePeriod45 = period37.toMutablePeriod();
        org.joda.time.Partial partial47 = partial7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod45, (int) (byte) 1);
        int int48 = mutablePeriod45.size();
        int int50 = mutablePeriod45.getValue(0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 91 + "'", int19 == 91);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 91 + "'", int31 == 91);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2024-03-31" + "'", str42, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test211");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.chrono.BuddhistChronology buddhistChronology1 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = buddhistChronology1.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField3 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField2);
        java.util.Locale locale5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = unsupportedDateTimeField3.getAsShortText(3599965, locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: clockhourOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(buddhistChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField3);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test212");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        int int19 = cachedDateTimeZone17.getStandardOffset(31420800000L);
        long long22 = cachedDateTimeZone17.convertLocalToUTC((long) 3, false);
        int int24 = cachedDateTimeZone17.getOffset(10L);
        java.lang.String str26 = cachedDateTimeZone17.getNameKey((long) (byte) 1);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-28800000) + "'", int19 == (-28800000));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 28800003L + "'", long22 == 28800003L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-28800000) + "'", int24 == (-28800000));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PST" + "'", str26, "PST");
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test213");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        long long18 = zeroIsMaxDateTimeField15.add((long) 84596, (int) (byte) 0);
        long long21 = zeroIsMaxDateTimeField15.add(1584000000L, (int) (byte) 1);
        int int23 = zeroIsMaxDateTimeField15.getMaximumValue(31449600052L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = zeroIsMaxDateTimeField15.getAsText(1711927794353L, locale25);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = zeroIsMaxDateTimeField15.roundHalfCeiling((-32L));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 84596L + "'", long18 == 84596L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 33033600000L + "'", long21 == 33033600000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2" + "'", str26, "2");
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test214");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dividedDateTimeField6.getType();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = gregorianChronology9.halfdays();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.minutes();
        int int13 = durationField10.compareTo(durationField12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField20 = new org.joda.time.field.DividedDateTimeField(dateTimeField16, durationField17, dateTimeFieldType18, (int) '4');
        boolean boolean21 = dividedDateTimeField20.isSupported();
        org.joda.time.DurationField durationField22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField24 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField20, durationField22, dateTimeFieldType23);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField12, dateTimeFieldType23);
        int int26 = dividedDateTimeField6.getMinimumValue();
        int int29 = dividedDateTimeField6.getDifference(1711927794353L, (long) 2024);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate43.withPeriodAdded(readablePeriod44, (int) (short) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial47.getFieldTypes();
        int[] intArray49 = partial47.getValues();
        int int50 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDate36, intArray49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant51);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.clockhourOfDay();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate57 = localDate54.withPeriodAdded(readablePeriod55, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = localDate57.toDateTimeAtMidnight(dateTimeZone58);
        long long62 = dateTimeZone58.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight64 = localDate36.toDateMidnight(dateTimeZone58);
        java.util.Locale locale66 = null;
        java.lang.String str67 = dividedDateTimeField6.getAsText((org.joda.time.ReadablePartial) localDate36, 24, locale66);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 54 + "'", int29 == 54);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "24" + "'", str67, "24");
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test215");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.minusHours((-1));
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears((int) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime11.secondOfMinute();
        org.joda.time.DateTime.Property property15 = dateTime11.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test216");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfCentury();
        boolean boolean22 = localDate3.equals((java.lang.Object) property21);
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumTextLength(locale23);
        org.joda.time.DateTime dateTime25 = property21.roundHalfFloorCopy();
        java.lang.String str26 = property21.getName();
        org.joda.time.DurationField durationField27 = property21.getDurationField();
        org.joda.time.DateTime dateTime28 = property21.withMinimumValue();
        java.lang.String str29 = property21.getAsShortText();
        org.joda.time.Interval interval30 = property21.toInterval();
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 91 + "'", int20 == 91);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "yearOfCentury" + "'", str26, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "24" + "'", str29, "24");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test217");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dividedDateTimeField6.roundFloor(0L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test218");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        java.util.Locale locale21 = null;
        java.lang.String str22 = delegatedDateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate18, locale21);
        long long24 = delegatedDateTimeField9.roundHalfEven((-210866774822000L));
        boolean boolean25 = delegatedDateTimeField9.isSupported();
        int int28 = delegatedDateTimeField9.getDifference((long) (byte) -1, 0L);
        java.lang.String str29 = delegatedDateTimeField9.getName();
        java.lang.String str30 = delegatedDateTimeField9.getName();
        java.util.Locale locale32 = null;
        java.lang.String str33 = delegatedDateTimeField9.getAsText(3608, locale32);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "13" + "'", str22, "13");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-210866774822000L) + "'", long24 == (-210866774822000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekOfWeekyear" + "'", str29, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekOfWeekyear" + "'", str30, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "3608" + "'", str33, "3608");
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test219");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.DateTimeField dateTimeField20 = chronology1.weekyear();
        org.joda.time.DurationField durationField21 = chronology1.years();
        long long24 = durationField21.getDifferenceAsLong(1L, (long) 84597);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test220");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology1.getDateTimeMillis((int) (byte) -1, 21, (-707653), (-707615), 60, 84597, 3599965);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -707615 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test221");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 2);
        int int36 = dateTime35.getDayOfWeek();
        org.joda.time.DateTime dateTime37 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int int38 = dateTime35.getDayOfMonth();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 31 + "'", int38 == 31);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test222");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime13 = dateTime8.withMinuteOfHour(10);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTime.Property property15 = dateTime13.millisOfSecond();
        boolean boolean17 = dateTime13.isBefore(0L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test223");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        org.joda.time.LocalDate localDate92 = localDate33.minusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone93 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime94 = localDate92.toDateTimeAtMidnight(dateTimeZone93);
        int int95 = localDate92.getEra();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test224");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        boolean boolean31 = zeroIsMaxDateTimeField15.isLeap(33033600000L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test225");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.junit.Assert.assertNotNull(durationFieldType0);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test226");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = julianChronology0.weekOfWeekyear();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology0);
        org.joda.time.DurationField durationField3 = julianChronology0.months();
        org.joda.time.DateTimeField dateTimeField4 = julianChronology0.hourOfDay();
        long long8 = julianChronology0.add(60480000003L, (long) 91, (int) '#');
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60480003188L + "'", long8 == 60480003188L);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test227");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial17.getFieldTypes();
        int[] intArray19 = partial17.getValues();
        int int20 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate6, intArray19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        long long32 = dateTimeZone28.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight34 = localDate6.toDateMidnight(dateTimeZone28);
        int int35 = dateMidnight34.getMinuteOfDay();
        int int36 = dateMidnight34.getDayOfYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 91 + "'", int36 == 91);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test228");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((int) (byte) 1, (int) 'a', (int) (short) -1, 0, 59, 33, (-28800000), dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28800000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test229");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        org.joda.time.DurationFieldType durationFieldType4 = unsupportedDurationField1.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = unsupportedDurationField1.getDifferenceAsLong(5999999L, 1101110400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test230");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        long long12 = dateTimeZone7.previousTransition((-61141277221968L));
        org.joda.time.chrono.BuddhistChronology buddhistChronology13 = org.joda.time.chrono.BuddhistChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField14 = buddhistChronology13.centuries();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-61141277221968L) + "'", long12 == (-61141277221968L));
        org.junit.Assert.assertNotNull(buddhistChronology13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test231");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        java.lang.String str4 = unsupportedDurationField1.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "centuries" + "'", str4, "centuries");
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test232");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) (short) 10);
        java.lang.String str4 = dateTimeZone0.getShortName(0L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) '#');
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-08:00" + "'", str4, "-08:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-28799965L) + "'", long6 == (-28799965L));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test233");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        boolean boolean34 = dividedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.OffsetDateTimeField offsetDateTimeField37 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType35, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test234");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = unsupportedDurationField1.getValueAsLong(97L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test235");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate4);
        int[] intArray9 = partial8.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial8.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.parse("100", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"100\" is too short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test236");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        long long18 = zeroIsMaxDateTimeField15.add((long) 84596, (int) (byte) 0);
        long long21 = zeroIsMaxDateTimeField15.add(1584000000L, (int) (byte) 1);
        int int23 = zeroIsMaxDateTimeField15.getMaximumValue(31449600052L);
        boolean boolean25 = zeroIsMaxDateTimeField15.isLeap((-6051597170L));
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        int int33 = localDate29.getYearOfEra();
        java.util.Date date34 = localDate29.toDate();
        org.joda.time.LocalDate localDate36 = localDate29.minusYears(1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate43.withPeriodAdded(readablePeriod44, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfDay();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDate localDate53 = localDate50.withPeriodAdded(readablePeriod51, (int) (short) 10);
        org.joda.time.Partial partial54 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = partial54.getFieldTypes();
        int[] intArray56 = partial54.getValues();
        int int57 = dateTimeField39.getMinimumValue((org.joda.time.ReadablePartial) localDate43, intArray56);
        int int58 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate36, intArray56);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 84596L + "'", long18 == 84596L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 33033600000L + "'", long21 == 33033600000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2024 + "'", int33 == 2024);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test237");
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException("2024-03-31T00:54:00.000-07:00", "84597");
        java.lang.String str3 = illegalFieldValueException2.getFieldName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2024-03-31T00:54:00.000-07:00" + "'", str3, "2024-03-31T00:54:00.000-07:00");
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test238");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.minusHours((-1));
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears((int) (byte) 10);
        int int14 = dateTime11.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.years();
        org.joda.time.IllegalFieldValueException illegalFieldValueException17 = new org.joda.time.IllegalFieldValueException(durationFieldType15, "hi!");
        org.joda.time.DateTime dateTime19 = dateTime11.withFieldAdded(durationFieldType15, (int) (short) 0);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.yearOfEra();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtMidnight(dateTimeZone40);
        int int42 = dateTime41.getCenturyOfEra();
        int int43 = dateTime41.getMinuteOfDay();
        int int44 = dateTime41.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDate localDate51 = localDate48.withPeriodAdded(readablePeriod49, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime41.toDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology56 = gJChronology30.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology30.weekyear();
        org.joda.time.DateTime dateTime58 = dateTime20.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 24 + "'", int14 == 24);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test239");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTimeField dateTimeField38 = limitChronology19.yearOfEra();
        org.joda.time.DateTime dateTime39 = limitChronology19.getLowerLimit();
        org.joda.time.DurationField durationField40 = limitChronology19.weeks();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNull(dateTime39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test240");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        boolean boolean11 = remainderDateTimeField10.isSupported();
        org.joda.time.DurationField durationField12 = remainderDateTimeField10.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(durationField12);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test241");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = limitChronology19.getLowerLimit();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField41 = new org.joda.time.field.DividedDateTimeField(dateTimeField37, durationField38, dateTimeFieldType39, (int) '4');
        java.util.Locale locale42 = null;
        int int43 = dateTimeField37.getMaximumShortTextLength(locale42);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField44 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField37);
        long long46 = delegatedDateTimeField44.remainder((-1L));
        java.lang.String str48 = delegatedDateTimeField44.getAsShortText((long) (short) -1);
        int int50 = delegatedDateTimeField44.getMaximumValue(0L);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField51 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) limitChronology19, (org.joda.time.DateTimeField) delegatedDateTimeField44);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDate localDate58 = localDate55.withPeriodAdded(readablePeriod56, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = localDate58.plusDays((int) (short) -1);
        org.joda.time.LocalDate localDate64 = localDate62.withYear((int) (short) 0);
        int int65 = localDate62.size();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant66);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfDay();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate72 = localDate69.withPeriodAdded(readablePeriod70, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Chronology chronology76 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant75);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.clockhourOfDay();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(chronology76);
        java.lang.String str79 = localDate78.toString();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = localDate78.toDateTimeAtMidnight(dateTimeZone80);
        org.joda.time.LocalDate localDate82 = localDate72.withFields((org.joda.time.ReadablePartial) localDate78);
        int int83 = localDate62.compareTo((org.joda.time.ReadablePartial) localDate72);
        int int84 = skipUndoDateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDate62);
        // The following exception was thrown during execution in test generation
        try {
            long long87 = skipUndoDateTimeField51.add(31449684596L, 314495999999L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 314495999999 * 604800000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 230399999L + "'", long46 == 230399999L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2024-03-31" + "'", str79, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test242");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate12.withPeriodAdded(readablePeriod13, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16);
        org.joda.time.Chronology chronology19 = gJChronology18.withUTC();
        boolean boolean20 = durationFieldType8.isSupported((org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology18);
        org.joda.time.DateTime dateTime22 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.minusHours((-1));
        org.joda.time.DateTime dateTime40 = dateTime38.minusYears((int) (byte) 10);
        int int41 = dateTime38.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology42 = org.joda.time.chrono.LimitChronology.getInstance(chronology24, readableDateTime26, (org.joda.time.ReadableDateTime) dateTime38);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate49 = localDate46.withPeriodAdded(readablePeriod47, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtMidnight(dateTimeZone50);
        int int52 = dateTime51.getCenturyOfEra();
        int int53 = dateTime51.getMinuteOfDay();
        int int54 = dateTime51.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime51.getZone();
        org.joda.time.Chronology chronology56 = limitChronology42.withZone(dateTimeZone55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.weekOfWeekyear();
        boolean boolean60 = limitChronology42.equals((java.lang.Object) chronology58);
        org.joda.time.DateTimeField dateTimeField61 = limitChronology42.yearOfEra();
        org.joda.time.DateTime dateTime62 = dateTime21.withChronology((org.joda.time.Chronology) limitChronology42);
        org.joda.time.DateTime dateTime64 = dateTime62.withYearOfCentury((int) ' ');
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2024-03-31" + "'", str4, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gJChronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 24 + "'", int41 == 24);
        org.junit.Assert.assertNotNull(limitChronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test243");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial17.getFieldTypes();
        int[] intArray19 = partial17.getValues();
        int int20 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate6, intArray19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        long long32 = dateTimeZone28.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight34 = localDate6.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) (short) 10);
        int int39 = dateTimeZone35.getOffset((long) 100);
        int int41 = dateTimeZone35.getOffset(0L);
        org.joda.time.DateTime dateTime42 = localDate6.toDateTimeAtCurrentTime(dateTimeZone35);
        int int43 = dateTime42.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = localDate50.toDateTimeAtMidnight(dateTimeZone51);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfDay();
        org.joda.time.DateTime dateTime55 = property53.addToCopy(10L);
        org.joda.time.DateTime dateTime57 = dateTime55.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillisOfDay(1);
        boolean boolean60 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = dateTime57.isAfterNow();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-28800000) + "'", int39 == (-28800000));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-28800000) + "'", int41 == (-28800000));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test244");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        java.lang.String str5 = dateTimeField2.getAsShortText((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField10 = new org.joda.time.field.OffsetDateTimeField(dateTimeField2, dateTimeFieldType6, 20, (int) (byte) 100, (int) (byte) 10);
        long long12 = offsetDateTimeField10.roundFloor((long) (short) 10);
        int int14 = offsetDateTimeField10.get(63072000000L);
        int int15 = offsetDateTimeField10.getOffset();
        int int17 = offsetDateTimeField10.getLeapAmount(0L);
        long long19 = offsetDateTimeField10.roundHalfEven((-210866760000000L));
        long long21 = offsetDateTimeField10.roundCeiling(33033600000L);
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale24 = null;
        java.lang.String str25 = offsetDateTimeField10.getAsText(readablePartial22, 2830, locale24);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-230400000L) + "'", long12 == (-230400000L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 72 + "'", int14 == 72);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-210866774822000L) + "'", long19 == (-210866774822000L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 33033600000L + "'", long21 == 33033600000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2830" + "'", str25, "2830");
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test245");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        int[] intArray9 = partial7.getValues();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        int int19 = dateTime18.getDayOfYear();
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfCentury();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtMidnight(dateTimeZone29);
        int int31 = dateTime30.getDayOfYear();
        org.joda.time.DateTime.Property property32 = dateTime30.minuteOfDay();
        boolean boolean34 = property32.equals((java.lang.Object) 2);
        org.joda.time.Interval interval35 = property32.toInterval();
        boolean boolean36 = interval21.isAfter((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Period period37 = interval35.toPeriod();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        java.lang.String str42 = localDate41.toString();
        org.joda.time.DateTime dateTime43 = localDate41.toDateTimeAtCurrentTime();
        boolean boolean44 = period37.equals((java.lang.Object) localDate41);
        org.joda.time.MutablePeriod mutablePeriod45 = period37.toMutablePeriod();
        org.joda.time.Partial partial47 = partial7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod45, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = partial7.getValue(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 91 + "'", int19 == 91);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 91 + "'", int31 == 91);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2024-03-31" + "'", str42, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(partial47);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test246");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        long long4 = unsupportedDurationField1.getUnitMillis();
        long long5 = unsupportedDurationField1.getUnitMillis();
        java.lang.String str6 = unsupportedDurationField1.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = unsupportedDurationField1.getDifference(28800000L, 31420800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str6, "UnsupportedDurationField[centuries]");
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test247");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.LocalDate localDate21 = localDate19.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate19.minus(readablePeriod22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDate23, 31, locale25);
        java.util.Locale locale27 = null;
        int int28 = dividedDateTimeField6.getMaximumTextLength(locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dividedDateTimeField6.getType();
        org.joda.time.DurationField durationField30 = dividedDateTimeField6.iRangeDurationField;
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "31" + "'", str26, "31");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNull(durationField30);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test248");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dividedDateTimeField6.getAsShortText((int) (short) 0, locale8);
        long long12 = dividedDateTimeField6.addWrapField((long) '4', (int) (short) -1);
        int int13 = dividedDateTimeField6.getMaximumValue();
        int int14 = dividedDateTimeField6.getMinimumValue();
        long long17 = dividedDateTimeField6.addWrapField((-20117426760000000L), 100);
        long long20 = dividedDateTimeField6.addWrapField(5999999L, 72);
        int int22 = dividedDateTimeField6.get((long) 20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial30.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial30.minus(readablePeriod32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial36 = partial30.withFieldAddWrapped(durationFieldType34, 20);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.years();
        org.joda.time.Partial partial39 = partial30.withFieldAddWrapped(durationFieldType37, 0);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate43.withPeriodAdded(readablePeriod44, (int) (short) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial47.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial47.minus(readablePeriod49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial53 = partial47.withFieldAddWrapped(durationFieldType51, 20);
        org.joda.time.Partial partial55 = partial30.withFieldAdded(durationFieldType51, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int57 = partial30.get(dateTimeFieldType56);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField58 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, dateTimeFieldType56);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 31449600052L + "'", long12 == 31449600052L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-20117426760000000L) + "'", long17 == (-20117426760000000L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 5999999L + "'", long20 == 5999999L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test249");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        org.joda.time.DurationField durationField11 = remainderDateTimeField10.iDurationField;
        long long13 = remainderDateTimeField10.roundFloor((long) 84677);
        int int14 = remainderDateTimeField10.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-230400000L) + "'", long13 == (-230400000L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test250");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfCentury();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        long long23 = dateTimeZone19.adjustOffset(0L, true);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        int int26 = instant24.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant31 = instant25.withDurationAdded(604800010L, (int) (short) 10);
        int int32 = property10.compareTo((org.joda.time.ReadableInstant) instant31);
        long long33 = property10.remainder();
        org.joda.time.DurationField durationField34 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 7776000000L + "'", long33 == 7776000000L);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test251");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = iSOChronology21.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = iSOChronology21.weeks();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) dateTime8, (org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDate.Property property27 = localDate26.era();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate34 = localDate31.withPeriodAdded(readablePeriod32, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35);
        org.joda.time.Chronology chronology38 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.yearOfEra();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate43.withPeriodAdded(readablePeriod44, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        int int49 = dateTime48.getCenturyOfEra();
        int int50 = dateTime48.getMinuteOfDay();
        int int51 = dateTime48.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDate localDate58 = localDate55.withPeriodAdded(readablePeriod56, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime48.toDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology63 = gJChronology37.withZone(dateTimeZone59);
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone59, 2);
        org.joda.time.Interval interval66 = localDate26.toInterval(dateTimeZone59);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(gJChronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(gJChronology61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(copticChronology67);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test252");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial7.minus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.Partial partial18 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = partial18.getFieldTypes();
        int[] intArray20 = partial18.getValues();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        int int30 = dateTime29.getDayOfYear();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfCentury();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtMidnight(dateTimeZone40);
        int int42 = dateTime41.getDayOfYear();
        org.joda.time.DateTime.Property property43 = dateTime41.minuteOfDay();
        boolean boolean45 = property43.equals((java.lang.Object) 2);
        org.joda.time.Interval interval46 = property43.toInterval();
        boolean boolean47 = interval32.isAfter((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Period period48 = interval46.toPeriod();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        java.lang.String str53 = localDate52.toString();
        org.joda.time.DateTime dateTime54 = localDate52.toDateTimeAtCurrentTime();
        boolean boolean55 = period48.equals((java.lang.Object) localDate52);
        org.joda.time.MutablePeriod mutablePeriod56 = period48.toMutablePeriod();
        org.joda.time.Partial partial58 = partial18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod56, (int) (byte) 1);
        org.joda.time.Partial partial59 = partial7.minus((org.joda.time.ReadablePeriod) mutablePeriod56);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = partial59.getValue(13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 91 + "'", int30 == 91);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 91 + "'", int42 == 91);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2024-03-31" + "'", str53, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial59);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test253");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (-28378000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28378000 for clockhourOfDay must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test254");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTime dateTime38 = limitChronology19.getUpperLimit();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate42.withPeriodAdded(readablePeriod43, (int) (short) 10);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial46.getFieldTypes();
        int[] intArray48 = partial46.getValues();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDate localDate55 = localDate52.withPeriodAdded(readablePeriod53, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = localDate55.toDateTimeAtMidnight(dateTimeZone56);
        int int58 = dateTime57.getDayOfYear();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfCentury();
        org.joda.time.Interval interval60 = property59.toInterval();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Chronology chronology62 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant61);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.clockhourOfDay();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDate localDate67 = localDate64.withPeriodAdded(readablePeriod65, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = localDate67.toDateTimeAtMidnight(dateTimeZone68);
        int int70 = dateTime69.getDayOfYear();
        org.joda.time.DateTime.Property property71 = dateTime69.minuteOfDay();
        boolean boolean73 = property71.equals((java.lang.Object) 2);
        org.joda.time.Interval interval74 = property71.toInterval();
        boolean boolean75 = interval60.isAfter((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Period period76 = interval74.toPeriod();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Chronology chronology78 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant77);
        org.joda.time.DateTimeField dateTimeField79 = chronology78.clockhourOfDay();
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(chronology78);
        java.lang.String str81 = localDate80.toString();
        org.joda.time.DateTime dateTime82 = localDate80.toDateTimeAtCurrentTime();
        boolean boolean83 = period76.equals((java.lang.Object) localDate80);
        org.joda.time.MutablePeriod mutablePeriod84 = period76.toMutablePeriod();
        org.joda.time.Partial partial86 = partial46.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod84, (int) (byte) 1);
        int int87 = mutablePeriod84.size();
        long long90 = limitChronology19.add((org.joda.time.ReadablePeriod) mutablePeriod84, (long) 1969, 2024);
        org.joda.time.Chronology chronology91 = limitChronology19.withUTC();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 91 + "'", int58 == 91);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 91 + "'", int70 == 91);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2024-03-31" + "'", str81, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(mutablePeriod84);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 8 + "'", int87 == 8);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 121441969L + "'", long90 == 121441969L);
        org.junit.Assert.assertNotNull(chronology91);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test255");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfCentury();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getDayOfYear();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfDay();
        boolean boolean24 = property22.equals((java.lang.Object) 2);
        org.joda.time.Interval interval25 = property22.toInterval();
        boolean boolean26 = interval11.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration27 = interval25.toDuration();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 91 + "'", int21 == 91);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test256");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        int[] intArray8 = partial7.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial7.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField16 = new org.joda.time.field.DividedDateTimeField(dateTimeField12, durationField13, dateTimeFieldType14, (int) '4');
        java.util.Locale locale17 = null;
        int int18 = dateTimeField12.getMaximumShortTextLength(locale17);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField19 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField12);
        long long21 = delegatedDateTimeField19.remainder((-1L));
        int int24 = delegatedDateTimeField19.getDifference(1711927792875L, 230399999L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (short) 10);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate49 = localDate46.withPeriodAdded(readablePeriod47, (int) (short) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial50.getFieldTypes();
        int[] intArray52 = partial50.getValues();
        int int53 = dateTimeField35.getMinimumValue((org.joda.time.ReadablePartial) localDate39, intArray52);
        int int54 = delegatedDateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) partial32, intArray52);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.clockhourOfDay();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDate localDate63 = localDate60.withPeriodAdded(readablePeriod61, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = localDate63.toDateTimeAtMidnight(dateTimeZone64);
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64);
        org.joda.time.Chronology chronology67 = gJChronology66.withUTC();
        boolean boolean68 = durationFieldType56.isSupported((org.joda.time.Chronology) gJChronology66);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology66);
        org.joda.time.Chronology chronology70 = gJChronology66.withUTC();
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray52, (org.joda.time.Chronology) gJChronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property73 = partial71.property(dateTimeFieldType72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 230399999L + "'", long21 == 230399999L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2830 + "'", int24 == 2830);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53 + "'", int54 == 53);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(gJChronology66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test257");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        int int12 = dateTime10.getYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test258");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime13 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime14 = dateTime8.withTimeAtStartOfDay();
        int int15 = dateTime8.getMonthOfYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test259");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        int int35 = zeroIsMaxDateTimeField15.getDifference(1730624400000L, (long) 84596);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = zeroIsMaxDateTimeField15.roundCeiling(33L);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 55 + "'", int35 == 55);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test260");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        int[] intArray27 = partial25.getValues();
        int int28 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate14, intArray27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        long long40 = dateTimeZone36.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight42 = localDate14.toDateMidnight(dateTimeZone36);
        boolean boolean43 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateMidnight42);
        int int44 = dateTime6.getDayOfWeek();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2024-03-31" + "'", str4, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test261");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plusSeconds((int) (short) 1);
        boolean boolean13 = dateTime8.isAfter((long) 2);
        java.lang.String str14 = dateTime8.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2024-03-31T00:00:00.000-07:00" + "'", str14, "2024-03-31T00:00:00.000-07:00");
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test262");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate11.withPeriodAdded(readablePeriod12, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        int int17 = dateTime16.getDayOfYear();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfCentury();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getDayOfYear();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfDay();
        boolean boolean32 = property30.equals((java.lang.Object) 2);
        org.joda.time.Interval interval33 = property30.toInterval();
        boolean boolean34 = interval19.isAfter((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Period period35 = interval33.toPeriod();
        org.joda.time.Partial partial36 = partial7.minus((org.joda.time.ReadablePeriod) period35);
        int int37 = partial7.size();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 91 + "'", int17 == 91);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 91 + "'", int29 == 91);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test263");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField7, durationField8, dateTimeFieldType9, (int) '4');
        boolean boolean12 = dividedDateTimeField11.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dividedDateTimeField11.getType();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField15 = gregorianChronology14.halfdays();
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField17 = gregorianChronology16.minutes();
        int int18 = durationField15.compareTo(durationField17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekOfWeekyear();
        org.joda.time.DurationField durationField22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField25 = new org.joda.time.field.DividedDateTimeField(dateTimeField21, durationField22, dateTimeFieldType23, (int) '4');
        boolean boolean26 = dividedDateTimeField25.isSupported();
        org.joda.time.DurationField durationField27 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField29 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField25, durationField27, dateTimeFieldType28);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField30 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, durationField17, dateTimeFieldType28);
        boolean boolean31 = localDate3.isSupported(dateTimeFieldType28);
        org.joda.time.IllegalFieldValueException illegalFieldValueException34 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType28, (java.lang.Number) 230399999L, "GJChronology[America/Los_Angeles]");
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2024-03-31" + "'", str4, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test264");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.Instant instant4 = instant1.withMillis(5999999L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant4);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test265");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.tz.DateTimeZoneBuilder.readFrom(inputStream0, "Mon");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test266");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfCentury();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        long long23 = dateTimeZone19.adjustOffset(0L, true);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        int int26 = instant24.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant31 = instant25.withDurationAdded(604800010L, (int) (short) 10);
        int int32 = property10.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Instant instant33 = instant31.toInstant();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(gJChronology28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(instant33);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test267");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.DateMidnight dateMidnight14 = dateTime8.toDateMidnight();
        org.joda.time.DateTime dateTime16 = dateTime8.minusMonths(38);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTimeISO();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test268");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.LocalDate localDate8 = localDate6.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate6.minus(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = localDate14.toDateTimeAtMidnight(dateTimeZone24);
        boolean boolean29 = localDate6.isBefore((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate31 = localDate6.minusDays(2830);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate38 = localDate35.withPeriodAdded(readablePeriod36, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        int int41 = dateTime40.getDayOfYear();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfCentury();
        org.joda.time.Interval interval43 = property42.toInterval();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = localDate50.toDateTimeAtMidnight(dateTimeZone51);
        int int53 = dateTime52.getDayOfYear();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfDay();
        boolean boolean56 = property54.equals((java.lang.Object) 2);
        org.joda.time.Interval interval57 = property54.toInterval();
        boolean boolean58 = interval43.isAfter((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Period period59 = interval57.toPeriod();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Chronology chronology61 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant60);
        org.joda.time.DateTimeField dateTimeField62 = chronology61.clockhourOfDay();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology61);
        java.lang.String str64 = localDate63.toString();
        org.joda.time.DateTime dateTime65 = localDate63.toDateTimeAtCurrentTime();
        boolean boolean66 = period59.equals((java.lang.Object) localDate63);
        org.joda.time.LocalDate localDate68 = localDate6.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 0);
        org.joda.time.DurationFieldType durationFieldType70 = period59.getFieldType(0);
        org.joda.time.IllegalFieldValueException illegalFieldValueException74 = new org.joda.time.IllegalFieldValueException(durationFieldType70, (java.lang.Number) (-17163014400000000L), (java.lang.Number) 3050607600032L, (java.lang.Number) 1.0f);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(gJChronology26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 91 + "'", int41 == 91);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 91 + "'", int53 == 91);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2024-03-31" + "'", str64, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(durationFieldType70);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test269");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.roundFloor((long) (-28800000));
        long long14 = delegatedDateTimeField9.addWrapField((long) (-28800000), (int) (short) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = localDate18.toDateTimeAtMidnight(dateTimeZone28);
        int[] intArray39 = new int[] { 2024, 24, 31, (byte) 100, '#', 54 };
        int int40 = delegatedDateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray39);
        java.util.Locale locale41 = null;
        int int42 = delegatedDateTimeField9.getMaximumShortTextLength(locale41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate49 = localDate46.withPeriodAdded(readablePeriod47, (int) (short) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial50.getFieldTypes();
        int[] intArray52 = partial50.getValues();
        java.util.Locale locale54 = null;
        java.lang.String str55 = delegatedDateTimeField9.getAsText((org.joda.time.ReadablePartial) partial50, 51, locale54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType57 = partial50.getFieldType(54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-230400000L) + "'", long11 == (-230400000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31420800000L + "'", long14 == 31420800000L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gJChronology30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2024, 24, 31, 100, 35, 54]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2024, 3, 31]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "51" + "'", str55, "51");
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test270");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = buddhistChronology0.hours();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.clockhourOfDay();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate8 = localDate5.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial9.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial9.minus(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.Partial partial20 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial20.getFieldTypes();
        int[] intArray22 = partial20.getValues();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        int int32 = dateTime31.getDayOfYear();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfCentury();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate41 = localDate38.withPeriodAdded(readablePeriod39, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = localDate41.toDateTimeAtMidnight(dateTimeZone42);
        int int44 = dateTime43.getDayOfYear();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfDay();
        boolean boolean47 = property45.equals((java.lang.Object) 2);
        org.joda.time.Interval interval48 = property45.toInterval();
        boolean boolean49 = interval34.isAfter((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Period period50 = interval48.toPeriod();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant51);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.clockhourOfDay();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        java.lang.String str55 = localDate54.toString();
        org.joda.time.DateTime dateTime56 = localDate54.toDateTimeAtCurrentTime();
        boolean boolean57 = period50.equals((java.lang.Object) localDate54);
        org.joda.time.MutablePeriod mutablePeriod58 = period50.toMutablePeriod();
        org.joda.time.Partial partial60 = partial20.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod58, (int) (byte) 1);
        org.joda.time.Partial partial61 = partial9.minus((org.joda.time.ReadablePeriod) mutablePeriod58);
        long long64 = buddhistChronology0.add((org.joda.time.ReadablePeriod) mutablePeriod58, (long) 11, 1439);
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 91 + "'", int32 == 91);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 91 + "'", int44 == 91);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2024-03-31" + "'", str55, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 86340011L + "'", long64 == 86340011L);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test271");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = buddhistChronology0.hours();
        java.lang.String str2 = buddhistChronology0.toString();
        org.joda.time.Chronology chronology3 = buddhistChronology0.withUTC();
        org.joda.time.DurationField durationField4 = buddhistChronology0.halfdays();
        int int7 = durationField4.getDifference(1772411394353L, 86340011L);
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BuddhistChronology[UTC]" + "'", str2, "BuddhistChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 41026 + "'", int7 == 41026);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test272");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        boolean boolean92 = zeroIsMaxDateTimeField15.isLeap((long) 2014);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test273");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfCentury();
        boolean boolean22 = localDate3.equals((java.lang.Object) property21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = localDate3.toString("BuddhistChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: B");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 91 + "'", int20 == 91);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test274");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.weekyear();
        org.joda.time.Instant instant11 = gJChronology9.getGregorianCutover();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtMidnight(dateTimeZone40);
        long long44 = dateTimeZone40.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight46 = localDate18.toDateMidnight(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime47 = instant11.toMutableDateTime(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test275");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType4.getField((org.joda.time.Chronology) julianChronology7);
        org.joda.time.Chronology chronology10 = julianChronology7.withUTC();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(julianChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test276");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        int[] intArray8 = partial7.getValues();
        int[] intArray9 = partial7.getValues();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test277");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology0);
        long long7 = gregorianChronology0.add((long) '#', (long) 3, 55);
        boolean boolean9 = gregorianChronology0.equals((java.lang.Object) "1969");
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        int int17 = localDate13.getYearOfEra();
        java.util.Date date18 = localDate13.toDate();
        org.joda.time.LocalDate localDate20 = localDate13.minusYears(1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.LocalDate localDate22 = localDate13.withFields(readablePartial21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology33.getZone();
        org.joda.time.DateTime dateTime35 = localDate22.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = zonedChronology36.getDateTimeMillis((int) '#', 41026, 1969, 0, 1, (-707653), 3600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -707653 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 200L + "'", long7 == 200L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2024 + "'", int17 == 2024);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(zonedChronology36);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test278");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate4);
        int[] intArray9 = partial8.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial8.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.parse("51", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"51\" is too short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test279");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = iSOChronology21.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = iSOChronology21.weeks();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) dateTime8, (org.joda.time.Chronology) iSOChronology21);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology21.dayOfWeek();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        java.lang.String str42 = localDate41.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = localDate41.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.LocalDate localDate45 = localDate35.withFields((org.joda.time.ReadablePartial) localDate41);
        java.util.Date date46 = localDate45.toDate();
        org.joda.time.Partial partial47 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField49 = gregorianChronology48.minutes();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField51 = gregorianChronology48.hourOfHalfday();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDate localDate58 = localDate55.withPeriodAdded(readablePeriod56, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        int int61 = dateTime60.getDayOfYear();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfCentury();
        org.joda.time.Interval interval63 = property62.toInterval();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Chronology chronology65 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant64);
        org.joda.time.DateTimeField dateTimeField66 = chronology65.clockhourOfDay();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDate localDate70 = localDate67.withPeriodAdded(readablePeriod68, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = localDate70.toDateTimeAtMidnight(dateTimeZone71);
        int int73 = dateTime72.getDayOfYear();
        org.joda.time.DateTime.Property property74 = dateTime72.minuteOfDay();
        boolean boolean76 = property74.equals((java.lang.Object) 2);
        org.joda.time.Interval interval77 = property74.toInterval();
        boolean boolean78 = interval63.isAfter((org.joda.time.ReadableInterval) interval77);
        org.joda.time.Period period79 = interval77.toPeriod();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Chronology chronology81 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant80);
        org.joda.time.DateTimeField dateTimeField82 = chronology81.clockhourOfDay();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology81);
        java.lang.String str84 = localDate83.toString();
        org.joda.time.DateTime dateTime85 = localDate83.toDateTimeAtCurrentTime();
        boolean boolean86 = period79.equals((java.lang.Object) localDate83);
        org.joda.time.MutablePeriod mutablePeriod87 = period79.toMutablePeriod();
        int[] intArray90 = gregorianChronology48.get((org.joda.time.ReadablePeriod) mutablePeriod87, (long) 33, (-230400000L));
        org.joda.time.LocalDate localDate91 = localDate45.plus((org.joda.time.ReadablePeriod) mutablePeriod87);
        int[] intArray93 = iSOChronology21.get((org.joda.time.ReadablePeriod) mutablePeriod87, 1711927886222L);
        org.joda.time.DateTimeField dateTimeField94 = iSOChronology21.hourOfHalfday();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2024-03-31" + "'", str42, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 91 + "'", int61 == 91);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 91 + "'", int73 == 91);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2024-03-31" + "'", str84, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(mutablePeriod87);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0, 0, -2, -16, 0, 0, -33]");
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 0, 0, 0, 475535, 31, 26, 222]");
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test280");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = localDate6.withFields((org.joda.time.ReadablePartial) localDate12);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.Partial partial18 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField20 = gregorianChronology19.minutes();
        org.joda.time.DateTimeField dateTimeField21 = gregorianChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = gregorianChronology19.hourOfHalfday();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        int int32 = dateTime31.getDayOfYear();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfCentury();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate41 = localDate38.withPeriodAdded(readablePeriod39, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = localDate41.toDateTimeAtMidnight(dateTimeZone42);
        int int44 = dateTime43.getDayOfYear();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfDay();
        boolean boolean47 = property45.equals((java.lang.Object) 2);
        org.joda.time.Interval interval48 = property45.toInterval();
        boolean boolean49 = interval34.isAfter((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Period period50 = interval48.toPeriod();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant51);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.clockhourOfDay();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        java.lang.String str55 = localDate54.toString();
        org.joda.time.DateTime dateTime56 = localDate54.toDateTimeAtCurrentTime();
        boolean boolean57 = period50.equals((java.lang.Object) localDate54);
        org.joda.time.MutablePeriod mutablePeriod58 = period50.toMutablePeriod();
        int[] intArray61 = gregorianChronology19.get((org.joda.time.ReadablePeriod) mutablePeriod58, (long) 33, (-230400000L));
        org.joda.time.LocalDate localDate62 = localDate16.plus((org.joda.time.ReadablePeriod) mutablePeriod58);
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = localDate62.toString("0054-03-31T00:10:31.000-07:52:58", locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2024-03-31" + "'", str13, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(gregorianChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 91 + "'", int32 == 91);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 91 + "'", int44 == 91);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2024-03-31" + "'", str55, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, -2, -16, 0, 0, -33]");
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test281");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        // The following exception was thrown during execution in test generation
        try {
            long long4 = unsupportedDurationField1.add((long) 100, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test282");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology0);
        long long7 = gregorianChronology0.add((long) '#', (long) 3, 55);
        boolean boolean9 = gregorianChronology0.equals((java.lang.Object) "1969");
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        int int17 = localDate13.getYearOfEra();
        java.util.Date date18 = localDate13.toDate();
        org.joda.time.LocalDate localDate20 = localDate13.minusYears(1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.LocalDate localDate22 = localDate13.withFields(readablePartial21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology33.getZone();
        org.joda.time.DateTime dateTime35 = localDate22.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate40.withPeriodAdded(readablePeriod41, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        org.joda.time.Chronology chronology47 = gJChronology46.withUTC();
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.year();
        org.joda.time.DurationField durationField50 = gJChronology46.centuries();
        boolean boolean51 = zonedChronology36.equals((java.lang.Object) durationField50);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 200L + "'", long7 == 200L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2024 + "'", int17 == 2024);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(gJChronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test283");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTime dateTime38 = limitChronology19.getUpperLimit();
        org.joda.time.DurationField durationField39 = limitChronology19.weekyears();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test284");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate4);
        int[] intArray9 = partial8.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial8.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.parse("0", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0\" is too short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test285");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        java.util.Locale locale92 = null;
        java.lang.String str93 = zeroIsMaxDateTimeField15.getAsShortText((long) ' ', locale92);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2" + "'", str93, "2");
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test286");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.halfdays();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = gregorianChronology11.add(readablePeriod13, (long) '4', 0);
        org.joda.time.DurationField durationField17 = gregorianChronology11.millis();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology11.dayOfWeek();
        boolean boolean19 = dateTimeFieldType9.isSupported((org.joda.time.Chronology) gregorianChronology11);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.era();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.era();
        boolean boolean25 = julianChronology20.equals((java.lang.Object) (short) -1);
        boolean boolean26 = dateTimeFieldType9.isSupported((org.joda.time.Chronology) julianChronology20);
        org.joda.time.DurationField durationField27 = julianChronology20.weeks();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(julianChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test287");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        int[] intArray8 = partial7.getValues();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate12.withPeriodAdded(readablePeriod13, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property18.addToCopy(10L);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime24 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        int int26 = partial7.getValue((int) (short) 1);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test288");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        boolean boolean2 = instant0.isAfter((org.joda.time.ReadableInstant) instant1);
        org.joda.time.Instant instant4 = instant1.plus((-210866774822000L));
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test289");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate3.withField(dateTimeFieldType8, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test290");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        int int36 = localDate10.get(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2024 + "'", int36 == 2024);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test291");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfCentury();
        boolean boolean22 = localDate3.equals((java.lang.Object) property21);
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumTextLength(locale23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = dateTime33.getCenturyOfEra();
        int int35 = dateTime33.getMinuteOfDay();
        java.lang.String str37 = dateTime33.toString("1");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(chronology38);
        int int40 = property21.getDifference((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale41 = null;
        int int42 = property21.getMaximumTextLength(locale41);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 91 + "'", int20 == 91);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test292");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = partial0.toString("centuries");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test293");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 2);
        int int36 = dateTime35.getDayOfWeek();
        org.joda.time.DateTime dateTime37 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime35.getZone();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test294");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(8);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test295");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        java.lang.String str12 = dateTime8.toString("1");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plus((-28800000L));
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial34.getFieldTypes();
        int[] intArray36 = partial34.getValues();
        int int37 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate23, intArray36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfDay();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate44 = localDate41.withPeriodAdded(readablePeriod42, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = localDate44.toDateTimeAtMidnight(dateTimeZone45);
        long long49 = dateTimeZone45.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight51 = localDate23.toDateMidnight(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean54 = dateTimeZone52.isStandardOffset((long) (short) 10);
        int int56 = dateTimeZone52.getOffset((long) 100);
        int int58 = dateTimeZone52.getOffset(0L);
        org.joda.time.DateTime dateTime59 = localDate23.toDateTimeAtCurrentTime(dateTimeZone52);
        boolean boolean60 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-28800000) + "'", int56 == (-28800000));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-28800000) + "'", int58 == (-28800000));
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test296");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.chrono.BuddhistChronology buddhistChronology1 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = buddhistChronology1.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField3 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField2);
        // The following exception was thrown during execution in test generation
        try {
            long long6 = unsupportedDateTimeField3.set((long) (short) 1, "16");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: clockhourOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(buddhistChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField3);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test297");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readableDuration10);
        org.joda.time.DateTime.Property property12 = dateTime9.era();
        int int13 = property12.getMaximumValue();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        int int16 = instant14.compareTo((org.joda.time.ReadableInstant) instant15);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = property12.getDifference((org.joda.time.ReadableInstant) instant14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test298");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant(obj0);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekOfWeekyear();
        org.joda.time.DurationField durationField6 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField9 = new org.joda.time.field.DividedDateTimeField(dateTimeField5, durationField6, dateTimeFieldType7, (int) '4');
        boolean boolean10 = dividedDateTimeField9.isSupported();
        org.joda.time.DurationField durationField11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField13 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField9, durationField11, dateTimeFieldType12);
        int int15 = dividedDateTimeField9.getMaximumValue(97L);
        long long18 = dividedDateTimeField9.addWrapField(100L, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate25.plusDays((int) (short) -1);
        int int30 = dividedDateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = localDate25.toInterval(dateTimeZone31);
        org.joda.time.chrono.GregorianChronology gregorianChronology33 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField34 = gregorianChronology33.minutes();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology33.clockhourOfHalfday();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate49 = localDate46.withPeriodAdded(readablePeriod47, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtMidnight(dateTimeZone50);
        long long54 = dateTimeZone50.adjustOffset(0L, true);
        org.joda.time.DateMidnight dateMidnight55 = localDate40.toDateMidnight(dateTimeZone50);
        org.joda.time.Chronology chronology56 = gregorianChronology33.withZone(dateTimeZone50);
        org.joda.time.Interval interval57 = localDate25.toInterval(dateTimeZone50);
        org.joda.time.DateTime dateTime58 = interval57.getStart();
        boolean boolean59 = instant1.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(gregorianChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test299");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology30 = gJChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.yearOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate38 = localDate35.withPeriodAdded(readablePeriod36, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        int int41 = dateTime40.getCenturyOfEra();
        int int42 = dateTime40.getMinuteOfDay();
        int int43 = dateTime40.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = localDate50.toDateTimeAtMidnight(dateTimeZone51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime40.toDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology55 = gJChronology29.withZone(dateTimeZone51);
        long long58 = dateTimeZone51.convertLocalToUTC((long) 24, false);
        org.joda.time.Chronology chronology59 = limitChronology19.withZone(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(gJChronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 28800024L + "'", long58 == 28800024L);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test300");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = iSOChronology21.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = iSOChronology21.weeks();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) dateTime8, (org.joda.time.Chronology) iSOChronology21);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime8.getZone();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate34 = localDate31.withPeriodAdded(readablePeriod32, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        int int37 = dateTime36.getDayOfYear();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate49 = localDate46.withPeriodAdded(readablePeriod47, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfDay();
        org.joda.time.DateTime dateTime54 = dateTime51.minusHours((-1));
        org.joda.time.DateTime dateTime56 = dateTime54.minusYears((int) (byte) 10);
        int int57 = dateTime54.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology58 = org.joda.time.chrono.LimitChronology.getInstance(chronology40, readableDateTime42, (org.joda.time.ReadableDateTime) dateTime54);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant59);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfDay();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDate localDate65 = localDate62.withPeriodAdded(readablePeriod63, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = localDate65.toDateTimeAtMidnight(dateTimeZone66);
        int int68 = dateTime67.getCenturyOfEra();
        int int69 = dateTime67.getMinuteOfDay();
        int int70 = dateTime67.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = dateTime67.getZone();
        org.joda.time.Chronology chronology72 = limitChronology58.withZone(dateTimeZone71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Chronology chronology74 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant73);
        org.joda.time.DateTimeField dateTimeField75 = chronology74.weekOfWeekyear();
        boolean boolean76 = limitChronology58.equals((java.lang.Object) chronology74);
        org.joda.time.DateTimeField dateTimeField77 = limitChronology58.yearOfEra();
        boolean boolean78 = dateTime36.equals((java.lang.Object) limitChronology58);
        int int79 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 91 + "'", int37 == 91);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 24 + "'", int57 == 24);
        org.junit.Assert.assertNotNull(limitChronology58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 20 + "'", int68 == 20);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-25200000) + "'", int79 == (-25200000));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test301");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial17.getFieldTypes();
        int[] intArray19 = partial17.getValues();
        int int20 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate6, intArray19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        long long32 = dateTimeZone28.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight34 = localDate6.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) (short) 10);
        int int39 = dateTimeZone35.getOffset((long) 100);
        int int41 = dateTimeZone35.getOffset(0L);
        org.joda.time.DateTime dateTime42 = localDate6.toDateTimeAtCurrentTime(dateTimeZone35);
        int int43 = dateTime42.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = localDate50.toDateTimeAtMidnight(dateTimeZone51);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfDay();
        org.joda.time.DateTime dateTime55 = property53.addToCopy(10L);
        org.joda.time.DateTime dateTime57 = dateTime55.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillisOfDay(1);
        boolean boolean60 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property61 = dateTime42.weekyear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-28800000) + "'", int39 == (-28800000));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-28800000) + "'", int41 == (-28800000));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test302");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        java.lang.String str12 = dateTime8.toString("1");
        org.joda.time.DateTime dateTime13 = dateTime8.toDateTime();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate20 = localDate17.withPeriodAdded(readablePeriod18, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        int int23 = dateTime22.getDayOfYear();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfDay();
        boolean boolean26 = property24.equals((java.lang.Object) 2);
        org.joda.time.DateTimeField dateTimeField27 = property24.getField();
        int int29 = dateTimeField27.get(100L);
        boolean boolean30 = dateTime13.equals((java.lang.Object) int29);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 91 + "'", int23 == 91);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 960 + "'", int29 == 960);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test303");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.LocalDate.Property property34 = localDate10.dayOfYear();
        org.joda.time.DurationField durationField35 = property34.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNull(durationField35);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test304");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test305");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        java.util.Locale locale21 = null;
        java.lang.String str22 = delegatedDateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate18, locale21);
        long long24 = delegatedDateTimeField9.roundHalfEven((-210866774822000L));
        boolean boolean25 = delegatedDateTimeField9.isSupported();
        int int28 = delegatedDateTimeField9.getDifference((long) (byte) -1, 0L);
        java.lang.String str29 = delegatedDateTimeField9.getName();
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField38 = new org.joda.time.field.DividedDateTimeField(dateTimeField34, durationField35, dateTimeFieldType36, (int) '4');
        java.util.Locale locale39 = null;
        int int40 = dateTimeField34.getMaximumShortTextLength(locale39);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField41 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField34);
        long long43 = delegatedDateTimeField41.remainder((-1L));
        int int46 = delegatedDateTimeField41.getDifference(1711927792875L, 230399999L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfDay();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDate localDate53 = localDate50.withPeriodAdded(readablePeriod51, (int) (short) 10);
        org.joda.time.Partial partial54 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant58);
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfDay();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDate localDate64 = localDate61.withPeriodAdded(readablePeriod62, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant65);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfDay();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDate localDate71 = localDate68.withPeriodAdded(readablePeriod69, (int) (short) 10);
        org.joda.time.Partial partial72 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = partial72.getFieldTypes();
        int[] intArray74 = partial72.getValues();
        int int75 = dateTimeField57.getMinimumValue((org.joda.time.ReadablePartial) localDate61, intArray74);
        int int76 = delegatedDateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) partial54, intArray74);
        int[] intArray78 = delegatedDateTimeField9.add((org.joda.time.ReadablePartial) localDate30, 13, intArray74, 0);
        org.joda.time.LocalDate localDate80 = localDate30.plusYears((-707653));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "13" + "'", str22, "13");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-210866774822000L) + "'", long24 == (-210866774822000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekOfWeekyear" + "'", str29, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 230399999L + "'", long43 == 230399999L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2830 + "'", int46 == 2830);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 53 + "'", int76 == 53);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(localDate80);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test306");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = julianChronology0.weekOfWeekyear();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) julianChronology0);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test307");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dividedDateTimeField6.getAsShortText((int) (short) 0, locale8);
        long long12 = dividedDateTimeField6.addWrapField((long) '4', (int) (short) -1);
        int int13 = dividedDateTimeField6.getMaximumValue();
        int int14 = dividedDateTimeField6.getMinimumValue();
        long long17 = dividedDateTimeField6.addWrapField((-20117426760000000L), 100);
        long long20 = dividedDateTimeField6.addWrapField(5999999L, 72);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate34.withPeriodAdded(readablePeriod35, (int) (short) 10);
        org.joda.time.Partial partial38 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial38.getFieldTypes();
        int[] intArray40 = partial38.getValues();
        int int41 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDate27, intArray40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        java.lang.String str46 = localDate45.toString();
        int int47 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean49 = localDate45.isSupported(dateTimeFieldType48);
        java.lang.String str50 = dateTimeFieldType48.toString();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField51 = new org.joda.time.field.DelegatedDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType48);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 31449600052L + "'", long12 == 31449600052L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-20117426760000000L) + "'", long17 == (-20117426760000000L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 5999999L + "'", long20 == 5999999L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2024-03-31" + "'", str46, "2024-03-31");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 24 + "'", int47 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "secondOfDay" + "'", str50, "secondOfDay");
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test308");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.LocalDate localDate21 = localDate19.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate19.minus(readablePeriod22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDate23, 31, locale25);
        org.joda.time.LocalDate localDate28 = localDate23.withYear(315040);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "31" + "'", str26, "31");
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test309");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        int int12 = dividedDateTimeField6.getMaximumValue(97L);
        long long15 = dividedDateTimeField6.addWrapField(100L, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate19.withPeriodAdded(readablePeriod20, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate22.plusDays((int) (short) -1);
        int int27 = dividedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate22);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField6.getAsShortText((long) 31, locale29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology32);
        java.lang.String str35 = localDate34.toString();
        org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField37 = gregorianChronology36.dayOfMonth();
        boolean boolean38 = localDate34.equals((java.lang.Object) gregorianChronology36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate42.withPeriodAdded(readablePeriod43, (int) (short) 10);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate42);
        int[] intArray47 = partial46.getValues();
        int int48 = dividedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDate34, intArray47);
        org.joda.time.LocalDate localDate50 = localDate34.withYearOfCentury(91);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2024-03-31" + "'", str35, "2024-03-31");
        org.junit.Assert.assertNotNull(gregorianChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test310");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = buddhistChronology0.hours();
        java.lang.String str2 = buddhistChronology0.toString();
        org.joda.time.Chronology chronology3 = buddhistChronology0.withUTC();
        org.joda.time.DurationField durationField4 = buddhistChronology0.millis();
        boolean boolean5 = durationField4.isPrecise();
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BuddhistChronology[UTC]" + "'", str2, "BuddhistChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test311");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = limitChronology19.getLowerLimit();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField41 = new org.joda.time.field.DividedDateTimeField(dateTimeField37, durationField38, dateTimeFieldType39, (int) '4');
        java.util.Locale locale42 = null;
        int int43 = dateTimeField37.getMaximumShortTextLength(locale42);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField44 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField37);
        long long46 = delegatedDateTimeField44.remainder((-1L));
        java.lang.String str48 = delegatedDateTimeField44.getAsShortText((long) (short) -1);
        int int50 = delegatedDateTimeField44.getMaximumValue(0L);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField51 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) limitChronology19, (org.joda.time.DateTimeField) delegatedDateTimeField44);
        org.joda.time.DateTimeField dateTimeField52 = limitChronology19.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 230399999L + "'", long46 == 230399999L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test312");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = gregorianChronology9.halfdays();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = gregorianChronology9.add(readablePeriod11, (long) '4', 0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology25 = gJChronology24.withUTC();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology24.getZone();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight(dateTimeZone34);
        int int36 = dateTime35.getDayOfYear();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfCentury();
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate42.withPeriodAdded(readablePeriod43, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        int int48 = dateTime47.getDayOfYear();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfDay();
        boolean boolean51 = property49.equals((java.lang.Object) 2);
        org.joda.time.Interval interval52 = property49.toInterval();
        boolean boolean53 = interval38.isAfter((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Period period54 = interval52.toPeriod();
        org.joda.time.PeriodType periodType55 = period54.getPeriodType();
        int[] intArray57 = gJChronology24.get((org.joda.time.ReadablePeriod) period54, 3050607600032L);
        long long60 = gregorianChronology9.add((org.joda.time.ReadablePeriod) period54, 97L, (int) (byte) 0);
        org.joda.time.Partial partial61 = partial7.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant62);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfDay();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Chronology chronology69 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant68);
        org.joda.time.DateTimeField dateTimeField70 = chronology69.clockhourOfDay();
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDate localDate74 = localDate71.withPeriodAdded(readablePeriod72, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime76 = localDate74.toDateTimeAtMidnight(dateTimeZone75);
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75);
        org.joda.time.chrono.ISOChronology iSOChronology78 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone75);
        org.joda.time.DateTime dateTime79 = localDate65.toDateTimeAtMidnight(dateTimeZone75);
        org.joda.time.DateTime dateTime80 = localDate65.toDateTimeAtCurrentTime();
        boolean boolean81 = partial61.isMatch((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.LocalDate.Property property82 = localDate65.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 91 + "'", int36 == 91);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 91 + "'", int48 == 91);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 847391, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 97L + "'", long60 == 97L);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(gJChronology77);
        org.junit.Assert.assertNotNull(iSOChronology78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test313");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField19 = new org.joda.time.field.DividedDateTimeField(dateTimeField15, durationField16, dateTimeFieldType17, (int) '4');
        boolean boolean20 = dividedDateTimeField19.isSupported();
        org.joda.time.DurationField durationField21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField23 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField19, durationField21, dateTimeFieldType22);
        int int25 = dividedDateTimeField19.getMaximumValue(97L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.LocalDate localDate34 = localDate32.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate36 = localDate32.minus(readablePeriod35);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dividedDateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDate36, 31, locale38);
        java.util.Locale locale40 = null;
        int int41 = dividedDateTimeField19.getMaximumTextLength(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dividedDateTimeField19.getType();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getRangeDurationType();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField47 = new org.joda.time.field.OffsetDateTimeField(dateTimeField12, dateTimeFieldType42, (int) (short) -1, 33, 0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "31" + "'", str39, "31");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test314");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTime dateTime38 = limitChronology19.getUpperLimit();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = limitChronology19.getDateTimeMillis(3608, (int) ' ', 53, 18, (int) (short) 100, 15752, 780);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test315");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology0);
        long long7 = gregorianChronology0.add((long) '#', (long) 3, 55);
        boolean boolean9 = gregorianChronology0.equals((java.lang.Object) "1969");
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        int int17 = localDate13.getYearOfEra();
        java.util.Date date18 = localDate13.toDate();
        org.joda.time.LocalDate localDate20 = localDate13.minusYears(1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.LocalDate localDate22 = localDate13.withFields(readablePartial21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology33.getZone();
        org.joda.time.DateTime dateTime35 = localDate22.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone34);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 200L + "'", long7 == 200L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2024 + "'", int17 == 2024);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test316");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = localDate6.withFields((org.joda.time.ReadablePartial) localDate12);
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.Partial partial18 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate16);
        boolean boolean20 = localDate16.equals((java.lang.Object) (-210860539200000L));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2024-03-31" + "'", str13, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test317");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.LocalDate localDate8 = localDate6.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate6.minus(readablePeriod9);
        int int11 = localDate10.getYearOfCentury();
        org.joda.time.LocalDate.Property property12 = localDate10.weekyear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 24 + "'", int11 == 24);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test318");
        int int3 = org.joda.time.field.FieldUtils.getWrappedValue(31, 0, 18);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test319");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.chrono.BuddhistChronology buddhistChronology1 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = buddhistChronology1.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField3 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField2);
        boolean boolean4 = unsupportedDateTimeField3.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = unsupportedDateTimeField3.getType();
        long long8 = unsupportedDateTimeField3.add(10L, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long10 = unsupportedDateTimeField3.roundCeiling((long) (-20));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: clockhourOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(buddhistChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3120010L + "'", long8 == 3120010L);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test320");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        long long18 = zeroIsMaxDateTimeField15.add((long) 84596, (int) (byte) 0);
        long long21 = zeroIsMaxDateTimeField15.add(1584000000L, (int) (byte) 1);
        int int22 = zeroIsMaxDateTimeField15.getMaximumValue();
        int int24 = zeroIsMaxDateTimeField15.get((long) 2);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (short) 10);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate localDate34 = localDate28.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property35 = localDate28.yearOfEra();
        int int36 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDate28);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = zeroIsMaxDateTimeField15.roundHalfCeiling((long) 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 84596L + "'", long18 == 84596L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 33033600000L + "'", long21 == 33033600000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test321");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        java.util.Locale locale92 = null;
        java.lang.String str93 = zeroIsMaxDateTimeField15.getAsText((-3600000L), locale92);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2" + "'", str93, "2");
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test322");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        java.lang.String str13 = delegatedDateTimeField9.getAsShortText((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology15);
        java.lang.String str18 = localDate17.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate17.minusMonths((int) (short) -1);
        java.util.Locale locale24 = null;
        java.lang.String str25 = delegatedDateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate17, 84597, locale24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.plus(readableDuration36);
        org.joda.time.DateTime dateTime38 = localDate17.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        int int43 = localDate42.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) (short) 10);
        int int48 = dateTimeZone44.getOffset((long) 100);
        org.joda.time.DateTime dateTime49 = localDate42.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.DateTime dateTime50 = dateTime37.toDateTime(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2024-03-31" + "'", str18, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "84597" + "'", str25, "84597");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 91 + "'", int43 == 91);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-28800000) + "'", int48 == (-28800000));
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test323");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = partial17.getFieldTypes();
        int[] intArray19 = partial17.getValues();
        int int20 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate6, intArray19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        long long32 = dateTimeZone28.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight34 = localDate6.toDateMidnight(dateTimeZone28);
        long long38 = dateTimeZone28.convertLocalToUTC((-20117426760000000L), false, (-32L));
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDate localDate51 = localDate48.withPeriodAdded(readablePeriod49, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = localDate42.toDateTimeAtMidnight(dateTimeZone52);
        int int57 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-20117426731622000L) + "'", long38 == (-20117426731622000L));
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(gJChronology54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-25200000) + "'", int57 == (-25200000));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test324");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = buddhistChronology0.hours();
        java.lang.String str2 = buddhistChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = buddhistChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = buddhistChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BuddhistChronology[UTC]" + "'", str2, "BuddhistChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test325");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfCentury();
        boolean boolean22 = localDate3.equals((java.lang.Object) property21);
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumTextLength(locale23);
        org.joda.time.DateTime dateTime25 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfSecond();
        int int27 = property26.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 91 + "'", int20 == 91);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test326");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.chrono.BuddhistChronology buddhistChronology1 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = buddhistChronology1.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField3 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField2);
        boolean boolean4 = unsupportedDateTimeField3.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = unsupportedDateTimeField3.getType();
        int int8 = unsupportedDateTimeField3.getDifference(0L, (-61141277221968L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(buddhistChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1019021287 + "'", int8 == 1019021287);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test327");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        int int16 = localDate15.getDayOfYear();
        int int17 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DurationField durationField18 = dividedDateTimeField6.iRangeDurationField;
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 91 + "'", int16 == 91);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(durationField18);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test328");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        org.joda.time.DurationFieldType durationFieldType4 = unsupportedDurationField1.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = unsupportedDurationField1.getMillis(41026);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test329");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.DateTime dateTime17 = instant13.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-28378000));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test330");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = iSOChronology21.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = iSOChronology21.weeks();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) dateTime8, (org.joda.time.Chronology) iSOChronology21);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gJChronology20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test331");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        int int19 = cachedDateTimeZone17.getStandardOffset(31420800000L);
        long long22 = cachedDateTimeZone17.convertLocalToUTC((long) 3, false);
        int int24 = cachedDateTimeZone17.getOffset(10L);
        boolean boolean25 = cachedDateTimeZone17.isFixed();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-28800000) + "'", int19 == (-28800000));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 28800003L + "'", long22 == 28800003L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-28800000) + "'", int24 == (-28800000));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test332");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial8.getFieldTypes();
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField11 = gregorianChronology10.halfdays();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = gregorianChronology10.add(readablePeriod12, (long) '4', 0);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate22 = localDate19.withPeriodAdded(readablePeriod20, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology25.getZone();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate34 = localDate31.withPeriodAdded(readablePeriod32, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        int int37 = dateTime36.getDayOfYear();
        org.joda.time.DateTime.Property property38 = dateTime36.yearOfCentury();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate43.withPeriodAdded(readablePeriod44, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        int int49 = dateTime48.getDayOfYear();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfDay();
        boolean boolean52 = property50.equals((java.lang.Object) 2);
        org.joda.time.Interval interval53 = property50.toInterval();
        boolean boolean54 = interval39.isAfter((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Period period55 = interval53.toPeriod();
        org.joda.time.PeriodType periodType56 = period55.getPeriodType();
        int[] intArray58 = gJChronology25.get((org.joda.time.ReadablePeriod) period55, 3050607600032L);
        long long61 = gregorianChronology10.add((org.joda.time.ReadablePeriod) period55, 97L, (int) (byte) 0);
        org.joda.time.Partial partial62 = partial8.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = partial8.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.parse("2024-03-31T00:00:00.000-07:00", dateTimeFormatter63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2024-03-31T00:00:00.000-07:00\" is malformed at \"T00:00:00.000-07:00\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gJChronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 91 + "'", int37 == 91);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 91 + "'", int49 == 91);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 847391, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 97L + "'", long61 == 97L);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test333");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        long long4 = unsupportedDurationField1.getUnitMillis();
        long long5 = unsupportedDurationField1.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = unsupportedDurationField1.getValue((long) 33, 3456000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test334");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTime dateTime38 = limitChronology19.getUpperLimit();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate42.withPeriodAdded(readablePeriod43, (int) (short) 10);
        org.joda.time.Partial partial46 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial46.getFieldTypes();
        int[] intArray48 = partial46.getValues();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDate localDate55 = localDate52.withPeriodAdded(readablePeriod53, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = localDate55.toDateTimeAtMidnight(dateTimeZone56);
        int int58 = dateTime57.getDayOfYear();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfCentury();
        org.joda.time.Interval interval60 = property59.toInterval();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.Chronology chronology62 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant61);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.clockhourOfDay();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDate localDate67 = localDate64.withPeriodAdded(readablePeriod65, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = localDate67.toDateTimeAtMidnight(dateTimeZone68);
        int int70 = dateTime69.getDayOfYear();
        org.joda.time.DateTime.Property property71 = dateTime69.minuteOfDay();
        boolean boolean73 = property71.equals((java.lang.Object) 2);
        org.joda.time.Interval interval74 = property71.toInterval();
        boolean boolean75 = interval60.isAfter((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Period period76 = interval74.toPeriod();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.Chronology chronology78 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant77);
        org.joda.time.DateTimeField dateTimeField79 = chronology78.clockhourOfDay();
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(chronology78);
        java.lang.String str81 = localDate80.toString();
        org.joda.time.DateTime dateTime82 = localDate80.toDateTimeAtCurrentTime();
        boolean boolean83 = period76.equals((java.lang.Object) localDate80);
        org.joda.time.MutablePeriod mutablePeriod84 = period76.toMutablePeriod();
        org.joda.time.Partial partial86 = partial46.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod84, (int) (byte) 1);
        int int87 = mutablePeriod84.size();
        long long90 = limitChronology19.add((org.joda.time.ReadablePeriod) mutablePeriod84, (long) 1969, 2024);
        org.joda.time.DateTime dateTime91 = limitChronology19.getLowerLimit();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 91 + "'", int58 == 91);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 91 + "'", int70 == 91);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2024-03-31" + "'", str81, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(mutablePeriod84);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 8 + "'", int87 == 8);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 121441969L + "'", long90 == 121441969L);
        org.junit.Assert.assertNull(dateTime91);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test335");
        org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = julianChronology0.hours();
        org.joda.time.DurationField durationField2 = julianChronology0.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = julianChronology0.getDateTimeMillis(2014, (int) '#', 55, 2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(julianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test336");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        java.lang.String str5 = dateTimeField2.getAsShortText((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField10 = new org.joda.time.field.OffsetDateTimeField(dateTimeField2, dateTimeFieldType6, 20, (int) (byte) 100, (int) (byte) 10);
        long long12 = offsetDateTimeField10.roundFloor((long) (short) 10);
        int int14 = offsetDateTimeField10.get(63072000000L);
        int int15 = offsetDateTimeField10.getOffset();
        int int17 = offsetDateTimeField10.getLeapAmount(10L);
        int int18 = offsetDateTimeField10.getMinimumValue();
        java.util.Locale locale19 = null;
        int int20 = offsetDateTimeField10.getMaximumShortTextLength(locale19);
        org.joda.time.DurationField durationField21 = offsetDateTimeField10.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-230400000L) + "'", long12 == (-230400000L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 72 + "'", int14 == 72);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNull(durationField21);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test337");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTimeField dateTimeField38 = limitChronology19.yearOfEra();
        org.joda.time.DateTime dateTime39 = limitChronology19.getLowerLimit();
        org.joda.time.DateTimeField dateTimeField40 = limitChronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = limitChronology19.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test338");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        int int45 = dateTime44.getCenturyOfEra();
        int int46 = dateTime44.getMinuteOfDay();
        int int47 = dateTime44.getMinuteOfDay();
        org.joda.time.DateTime dateTime49 = dateTime44.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology50 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = gregorianChronology50.dayOfMonth();
        long long54 = dateTimeField51.getDifferenceAsLong((long) (short) 0, 0L);
        int int55 = dateTime44.get(dateTimeField51);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant56);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfDay();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology57);
        java.lang.String str60 = localDate59.toString();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = localDate59.toDateTimeAtMidnight(dateTimeZone61);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant65);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfDay();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology66);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDate localDate71 = localDate68.withPeriodAdded(readablePeriod69, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = localDate71.toDateTimeAtMidnight(dateTimeZone72);
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72);
        org.joda.time.Chronology chronology75 = gJChronology74.withUTC();
        boolean boolean76 = durationFieldType64.isSupported((org.joda.time.Chronology) gJChronology74);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology74);
        org.joda.time.DateTime dateTime78 = localDate59.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Chronology chronology81 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant80);
        org.joda.time.DateTimeField dateTimeField82 = chronology81.clockhourOfDay();
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate(chronology81);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDate localDate86 = localDate83.withPeriodAdded(readablePeriod84, (int) (short) 10);
        org.joda.time.Partial partial87 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate83);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray88 = partial87.getFieldTypes();
        int[] intArray89 = partial87.getValues();
        int[] intArray91 = dateTimeField51.add((org.joda.time.ReadablePartial) localDate59, (int) (byte) 10, intArray89, 0);
        int int92 = localDate59.getYearOfCentury();
        boolean boolean93 = dateTimeZone31.equals((java.lang.Object) localDate59);
        org.joda.time.chrono.CopticChronology copticChronology94 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            long long99 = copticChronology94.getDateTimeMillis((int) (short) -1, (-28378000), 960, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28378000 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20 + "'", int45 == 20);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(gregorianChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 31 + "'", int55 == 31);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2024-03-31" + "'", str60, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(gJChronology74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 24 + "'", int92 == 24);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(copticChronology94);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test339");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        boolean boolean3 = unsupportedDurationField1.isPrecise();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test340");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        long long4 = unsupportedDurationField1.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = unsupportedDurationField1.getDifferenceAsLong((long) 1969, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test341");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate12 = property10.setCopy("13");
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField19 = new org.joda.time.field.DividedDateTimeField(dateTimeField15, durationField16, dateTimeFieldType17, (int) '4');
        boolean boolean20 = dividedDateTimeField19.isSupported();
        org.joda.time.DurationField durationField21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField23 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField19, durationField21, dateTimeFieldType22);
        java.lang.String str24 = remainderDateTimeField23.toString();
        int int25 = remainderDateTimeField23.getMinimumValue();
        java.lang.String str26 = remainderDateTimeField23.getName();
        long long28 = remainderDateTimeField23.roundCeiling(0L);
        long long31 = remainderDateTimeField23.addWrapField((long) 3, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = remainderDateTimeField23.getType();
        boolean boolean33 = localDate12.isSupported(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[secondOfDay]" + "'", str24, "DateTimeField[secondOfDay]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "secondOfDay" + "'", str26, "secondOfDay");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 374400000L + "'", long28 == 374400000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 29030400003L + "'", long31 == 29030400003L);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test342");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        int[] intArray8 = partial7.getValues();
        java.lang.String str9 = partial7.toStringList();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2024, 3, 31]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[year=2024, monthOfYear=3, dayOfMonth=31]" + "'", str9, "[year=2024, monthOfYear=3, dayOfMonth=31]");
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test343");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.joda.time.field.FieldUtils.getWrappedValue((-25200000), (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test344");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property58 = localDate23.dayOfWeek();
        org.joda.time.LocalDate.Property property59 = localDate23.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test345");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.roundFloor((long) (-28800000));
        long long14 = delegatedDateTimeField9.addWrapField((long) (-28800000), (int) (short) -1);
        java.lang.String str15 = delegatedDateTimeField9.getName();
        boolean boolean17 = delegatedDateTimeField9.isLeap((-210866774822000L));
        java.util.Locale locale18 = null;
        int int19 = delegatedDateTimeField9.getMaximumTextLength(locale18);
        int int21 = delegatedDateTimeField9.getMaximumValue((long) (short) 0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-230400000L) + "'", long11 == (-230400000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31420800000L + "'", long14 == 31420800000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekOfWeekyear" + "'", str15, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test346");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = limitChronology19.getLowerLimit();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField41 = new org.joda.time.field.DividedDateTimeField(dateTimeField37, durationField38, dateTimeFieldType39, (int) '4');
        java.util.Locale locale42 = null;
        int int43 = dateTimeField37.getMaximumShortTextLength(locale42);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField44 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField37);
        long long46 = delegatedDateTimeField44.remainder((-1L));
        java.lang.String str48 = delegatedDateTimeField44.getAsShortText((long) (short) -1);
        int int50 = delegatedDateTimeField44.getMaximumValue(0L);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField51 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) limitChronology19, (org.joda.time.DateTimeField) delegatedDateTimeField44);
        int int52 = skipUndoDateTimeField51.getMinimumValue();
        org.joda.time.DurationField durationField53 = skipUndoDateTimeField51.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField54 = skipUndoDateTimeField51.getWrappedField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 230399999L + "'", long46 == 230399999L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test347");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = partial25.toString("halfdays");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: l");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test348");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate59 = localDate23.withCenturyOfEra(52);
        org.joda.time.LocalDate localDate61 = localDate23.minusYears(84596);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant62);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfDay();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDate localDate68 = localDate65.withPeriodAdded(readablePeriod66, (int) (short) 10);
        org.joda.time.Partial partial69 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = partial69.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial72 = partial69.minus(readablePeriod71);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial75 = partial69.withFieldAddWrapped(durationFieldType73, 20);
        org.joda.time.LocalDate localDate76 = localDate61.withFields((org.joda.time.ReadablePartial) partial75);
        org.joda.time.LocalDate.Property property77 = localDate61.weekyear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray70);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test349");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test350");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        int int11 = dateTime10.getMillisOfSecond();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 845 + "'", int11 == 845);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test351");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTime dateTime38 = limitChronology19.getUpperLimit();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = limitChronology19.getDateTimeMillis(1101110400000L, 15752, (int) (short) 1, 2, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 15752 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test352");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 2);
        int int36 = dateTime35.getDayOfWeek();
        org.joda.time.DateTime dateTime37 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime35.withMillisOfDay((-20));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -20 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test353");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        org.joda.time.LocalDate localDate92 = localDate33.minusYears((int) '4');
        org.joda.time.DateTimeZone dateTimeZone93 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime94 = localDate92.toDateTimeAtMidnight(dateTimeZone93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime96 = dateTime94.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test354");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        java.lang.String str20 = limitChronology19.toString();
        java.lang.String str21 = limitChronology19.toString();
        org.joda.time.DateTime dateTime22 = limitChronology19.getUpperLimit();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]" + "'", str20, "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]" + "'", str21, "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]");
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test355");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology0);
        long long7 = gregorianChronology0.add((long) '#', (long) 3, 55);
        boolean boolean9 = gregorianChronology0.equals((java.lang.Object) "1969");
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        int int17 = localDate13.getYearOfEra();
        java.util.Date date18 = localDate13.toDate();
        org.joda.time.LocalDate localDate20 = localDate13.minusYears(1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.LocalDate localDate22 = localDate13.withFields(readablePartial21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology33.getZone();
        org.joda.time.DateTime dateTime35 = localDate22.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.Chronology chronology39 = zonedChronology36.withZone(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = zonedChronology36.getDateTimeMillis(24, 1, (-707653), 51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -707653 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 200L + "'", long7 == 200L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2024 + "'", int17 == 2024);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test356");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField2 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType1);
        // The following exception was thrown during execution in test generation
        try {
            long long4 = unsupportedDurationField2.getValueAsLong((long) (-707653));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: days field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(unsupportedDurationField2);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test357");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        long long93 = zeroIsMaxDateTimeField15.add((-14400000L), 24);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 754776000000L + "'", long93 == 754776000000L);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test358");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        long long20 = zeroIsMaxDateTimeField15.add((-1L), (long) (byte) 10);
        int int23 = zeroIsMaxDateTimeField15.getDifference(28800000L, 234000031L);
        int int24 = zeroIsMaxDateTimeField15.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 314495999999L + "'", long20 == 314495999999L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test359");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        int[] intArray8 = partial7.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial7.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial7.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = partial7.getFieldType(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test360");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate12 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate13 = property10.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test361");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = property9.setCopy(1);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException16 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType13, (java.lang.Number) 100, "-28800000");
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = illegalFieldValueException16.getDateTimeFieldType();
        int int18 = dateTime11.get(dateTimeFieldType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfDay();
        org.joda.time.DateTime dateTime30 = property28.addToCopy(10L);
        org.joda.time.DateTime dateTime32 = dateTime30.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property33 = dateTime30.yearOfCentury();
        int int34 = dateTime30.getSecondOfDay();
        int int35 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868460000L + "'", long12 == 1711868460000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 600 + "'", int34 == 600);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test362");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfCentury();
        boolean boolean22 = localDate3.equals((java.lang.Object) property21);
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumTextLength(locale23);
        org.joda.time.DateTime dateTime25 = property21.roundHalfFloorCopy();
        java.lang.String str26 = property21.getName();
        org.joda.time.DurationField durationField27 = property21.getDurationField();
        org.joda.time.DateTime dateTime28 = property21.withMaximumValue();
        int int29 = dateTime28.getHourOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 91 + "'", int20 == 91);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "yearOfCentury" + "'", str26, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test363");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.months();
        org.joda.time.DurationField durationField16 = chronology12.hours();
        boolean boolean17 = property10.equals((java.lang.Object) durationField16);
        org.joda.time.DateTime dateTime18 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime19 = property10.getDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears((-28800000));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test364");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2");
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(0);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate8.withPeriodAdded(readablePeriod9, (int) (short) 10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial12.getFieldTypes();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField15 = gregorianChronology14.halfdays();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = gregorianChronology14.add(readablePeriod16, (long) '4', 0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.Chronology chronology30 = gJChronology29.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology29.getZone();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate38 = localDate35.withPeriodAdded(readablePeriod36, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        int int41 = dateTime40.getDayOfYear();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfCentury();
        org.joda.time.Interval interval43 = property42.toInterval();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = localDate50.toDateTimeAtMidnight(dateTimeZone51);
        int int53 = dateTime52.getDayOfYear();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfDay();
        boolean boolean56 = property54.equals((java.lang.Object) 2);
        org.joda.time.Interval interval57 = property54.toInterval();
        boolean boolean58 = interval43.isAfter((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Period period59 = interval57.toPeriod();
        org.joda.time.PeriodType periodType60 = period59.getPeriodType();
        int[] intArray62 = gJChronology29.get((org.joda.time.ReadablePeriod) period59, 3050607600032L);
        long long65 = gregorianChronology14.add((org.joda.time.ReadablePeriod) period59, 97L, (int) (byte) 0);
        org.joda.time.Partial partial66 = partial12.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Chronology chronology68 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant67);
        org.joda.time.DateTimeField dateTimeField69 = chronology68.clockhourOfDay();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Chronology chronology74 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant73);
        org.joda.time.DateTimeField dateTimeField75 = chronology74.clockhourOfDay();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(chronology74);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDate localDate79 = localDate76.withPeriodAdded(readablePeriod77, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = localDate79.toDateTimeAtMidnight(dateTimeZone80);
        org.joda.time.chrono.GJChronology gJChronology82 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone80);
        org.joda.time.chrono.ISOChronology iSOChronology83 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone80);
        org.joda.time.DateTime dateTime84 = localDate70.toDateTimeAtMidnight(dateTimeZone80);
        org.joda.time.DateTime dateTime85 = localDate70.toDateTimeAtCurrentTime();
        boolean boolean86 = partial66.isMatch((org.joda.time.ReadablePartial) localDate70);
        boolean boolean87 = localDate4.equals((java.lang.Object) localDate70);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(gJChronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 91 + "'", int41 == 91);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 91 + "'", int53 == 91);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 847391, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 97L + "'", long65 == 97L);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(gJChronology82);
        org.junit.Assert.assertNotNull(iSOChronology83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test365");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.chrono.BuddhistChronology buddhistChronology1 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = buddhistChronology1.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField3 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField2);
        boolean boolean4 = unsupportedDateTimeField3.isSupported();
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = unsupportedDateTimeField3.set((long) 10, "ISOChronology[America/Los_Angeles]", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: clockhourOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(buddhistChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test366");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekOfWeekyear();
        java.util.Locale locale5 = null;
        int int6 = dateTimeField4.getMaximumShortTextLength(locale5);
        long long9 = dateTimeField4.addWrapField(10L, 1);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField10 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) gregorianChronology0, dateTimeField4);
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gregorianChronology0.clockhourOfHalfday();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate16.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.Partial partial20 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial20.getFieldTypes();
        int[] intArray22 = partial20.getValues();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        int int32 = dateTime31.getDayOfYear();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfCentury();
        org.joda.time.Interval interval34 = property33.toInterval();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfDay();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate41 = localDate38.withPeriodAdded(readablePeriod39, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = localDate41.toDateTimeAtMidnight(dateTimeZone42);
        int int44 = dateTime43.getDayOfYear();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfDay();
        boolean boolean47 = property45.equals((java.lang.Object) 2);
        org.joda.time.Interval interval48 = property45.toInterval();
        boolean boolean49 = interval34.isAfter((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Period period50 = interval48.toPeriod();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant51);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.clockhourOfDay();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology52);
        java.lang.String str55 = localDate54.toString();
        org.joda.time.DateTime dateTime56 = localDate54.toDateTimeAtCurrentTime();
        boolean boolean57 = period50.equals((java.lang.Object) localDate54);
        org.joda.time.MutablePeriod mutablePeriod58 = period50.toMutablePeriod();
        org.joda.time.Partial partial60 = partial20.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod58, (int) (byte) 1);
        int int61 = mutablePeriod58.size();
        int[] intArray64 = gregorianChronology0.get((org.joda.time.ReadablePeriod) mutablePeriod58, 1711927931303L, 200L);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.millis();
        int int66 = mutablePeriod58.get(durationFieldType65);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 604800010L + "'", long9 == 604800010L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 91 + "'", int32 == 91);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 91 + "'", int44 == 91);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2024-03-31" + "'", str55, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-54, -2, -4, -2, -23, -32, -11, -103]");
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test367");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        java.lang.String str1 = buddhistChronology0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Chronology chronology3 = buddhistChronology0.withZone(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = buddhistChronology0.era();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeField4.getAsShortText(754776000000L, locale6);
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "BuddhistChronology[UTC]" + "'", str1, "BuddhistChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "BE" + "'", str7, "BE");
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test368");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.LocalDate.Property property34 = localDate10.year();
        java.lang.String str35 = property34.getAsShortText();
        org.joda.time.LocalDate localDate36 = property34.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = localDate36.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2024" + "'", str35, "2024");
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test369");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property58 = localDate23.dayOfWeek();
        org.joda.time.LocalDate localDate59 = property58.withMinimumValue();
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate62 = property58.setCopy("ZonedChronology[GregorianChronology[UTC], America/Los_Angeles]", locale61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ZonedChronology[GregorianChronology[UTC], America/Los_Angeles]\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test370");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = limitChronology19.withUTC();
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getChronology(chronology34);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test371");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial7.minus(readablePeriod9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial13 = partial7.withFieldAddWrapped(durationFieldType11, 20);
        org.joda.time.DateTimeField dateTimeField15 = partial13.getField(0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test372");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        int int10 = dateTime9.getDayOfYear();
        java.lang.String str11 = dateTime9.toString();
        boolean boolean12 = localDate0.equals((java.lang.Object) str11);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 91 + "'", int10 == 91);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31T00:00:00.000-07:00" + "'", str11, "2024-03-31T00:00:00.000-07:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test373");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        java.lang.String str20 = limitChronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = limitChronology19.dayOfWeek();
        org.joda.time.DateTime dateTime22 = limitChronology19.getUpperLimit();
        int int23 = dateTime22.getYearOfEra();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]" + "'", str20, "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2024 + "'", int23 == 2024);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test374");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        long long4 = unsupportedDurationField1.getUnitMillis();
        long long5 = unsupportedDurationField1.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = unsupportedDurationField1.getMillis(24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test375");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime8.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test376");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dividedDateTimeField6.getType();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = gregorianChronology9.halfdays();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.minutes();
        int int13 = durationField10.compareTo(durationField12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField20 = new org.joda.time.field.DividedDateTimeField(dateTimeField16, durationField17, dateTimeFieldType18, (int) '4');
        boolean boolean21 = dividedDateTimeField20.isSupported();
        org.joda.time.DurationField durationField22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField24 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField20, durationField22, dateTimeFieldType23);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField12, dateTimeFieldType23);
        int int27 = dividedDateTimeField6.getMaximumValue(97L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate34 = localDate31.withPeriodAdded(readablePeriod32, (int) (short) 10);
        org.joda.time.Partial partial35 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial35.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial35.minus(readablePeriod37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial41 = partial35.withFieldAddWrapped(durationFieldType39, 20);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.years();
        org.joda.time.Partial partial44 = partial35.withFieldAddWrapped(durationFieldType42, 0);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDate localDate51 = localDate48.withPeriodAdded(readablePeriod49, (int) (short) 10);
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = partial52.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial52.minus(readablePeriod54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial58 = partial52.withFieldAddWrapped(durationFieldType56, 20);
        org.joda.time.Partial partial60 = partial35.withFieldAdded(durationFieldType56, 0);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dividedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial60, (int) 'a', locale62);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "97" + "'", str63, "97");
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test377");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dividedDateTimeField6.getType();
        int int10 = dividedDateTimeField6.get(1711927792875L);
        org.joda.time.DurationField durationField11 = dividedDateTimeField6.getDurationField();
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.util.Locale locale14 = null;
        java.lang.String str15 = dividedDateTimeField6.getAsText(36080L, locale14);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test378");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfCentury();
        boolean boolean22 = localDate3.equals((java.lang.Object) property21);
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumTextLength(locale23);
        org.joda.time.DateTime dateTime25 = property21.roundHalfFloorCopy();
        java.lang.String str26 = property21.getName();
        org.joda.time.DurationField durationField27 = property21.getDurationField();
        org.joda.time.DateTime dateTime28 = property21.withMinimumValue();
        java.lang.String str29 = property21.getAsShortText();
        org.joda.time.Interval interval30 = property21.toInterval();
        int int31 = property21.getLeapAmount();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 91 + "'", int20 == 91);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "yearOfCentury" + "'", str26, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "24" + "'", str29, "24");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test379");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.weekyear();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        java.lang.String str12 = durationField11.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DurationField[weeks]" + "'", str12, "DurationField[weeks]");
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test380");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DurationField durationField34 = limitChronology19.millis();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test381");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.LocalDate.Property property34 = localDate10.dayOfYear();
        org.joda.time.LocalDate localDate35 = property34.withMinimumValue();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test382");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        java.lang.String str13 = delegatedDateTimeField9.getAsShortText((long) (short) -1);
        int int15 = delegatedDateTimeField9.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = delegatedDateTimeField9.getType();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test383");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        long long35 = zeroIsMaxDateTimeField15.add(28800010L, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            long long37 = zeroIsMaxDateTimeField15.roundHalfCeiling((-20117426731622000L));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1006416000010L + "'", long35 == 1006416000010L);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test384");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.LocalDate.Property property34 = localDate10.year();
        org.joda.time.LocalDate localDate35 = property34.withMaximumValue();
        java.util.Locale locale37 = null;
        org.joda.time.LocalDate localDate38 = property34.setCopy("13", locale37);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test385");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = iSOChronology10.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology10.monthOfYear();
        org.joda.time.DurationField durationField16 = iSOChronology10.weekyears();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test386");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        int int14 = delegatedDateTimeField9.getDifference(1711927792875L, 230399999L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate29.withPeriodAdded(readablePeriod30, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.Partial partial40 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial40.getFieldTypes();
        int[] intArray42 = partial40.getValues();
        int int43 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDate29, intArray42);
        int int44 = delegatedDateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) partial22, intArray42);
        long long46 = delegatedDateTimeField9.roundHalfEven(0L);
        int int47 = delegatedDateTimeField9.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2830 + "'", int14 == 2830);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53 + "'", int44 == 53);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-230400000L) + "'", long46 == (-230400000L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 53 + "'", int47 == 53);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test387");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = dateTimeField35.getType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField38 = new org.joda.time.field.DelegatedDateTimeField((org.joda.time.DateTimeField) zeroIsMaxDateTimeField15, dateTimeFieldType36);
        int int39 = zeroIsMaxDateTimeField15.getMinimumValue();
        java.util.Locale locale41 = null;
        java.lang.String str42 = zeroIsMaxDateTimeField15.getAsShortText(0L, locale41);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test388");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.months();
        org.joda.time.DurationField durationField16 = chronology12.hours();
        boolean boolean17 = property10.equals((java.lang.Object) durationField16);
        org.joda.time.DateTime dateTime18 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = property10.withMaximumValue();
        org.joda.time.Interval interval20 = property10.toInterval();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval20);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test389");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate37.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtMidnight(dateTimeZone41);
        int int43 = dateTime42.getCenturyOfEra();
        int int44 = dateTime42.getMinuteOfDay();
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology48 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField49 = gregorianChronology48.dayOfMonth();
        long long52 = dateTimeField49.getDifferenceAsLong((long) (short) 0, 0L);
        int int53 = dateTime42.get(dateTimeField49);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfDay();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology55);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = localDate57.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate69 = localDate66.withPeriodAdded(readablePeriod67, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = localDate69.toDateTimeAtMidnight(dateTimeZone70);
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        boolean boolean74 = durationFieldType62.isSupported((org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology72);
        org.joda.time.DateTime dateTime76 = localDate57.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant78);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfDay();
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology79);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDate localDate84 = localDate81.withPeriodAdded(readablePeriod82, (int) (short) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial85.getFieldTypes();
        int[] intArray87 = partial85.getValues();
        int[] intArray89 = dateTimeField49.add((org.joda.time.ReadablePartial) localDate57, (int) (byte) 10, intArray87, 0);
        int int90 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate33, intArray89);
        org.joda.time.LocalDate localDate92 = localDate33.minusYears((int) '4');
        org.joda.time.LocalDate.Property property93 = localDate92.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField95 = localDate92.getField(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 45");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2024-03-31" + "'", str58, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(gJChronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test390");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        int[] intArray9 = partial7.getValues();
        int int10 = partial7.size();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test391");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 100, "-28800000");
        java.lang.Throwable[] throwableArray4 = illegalFieldValueException3.getSuppressed();
        java.lang.String str5 = illegalFieldValueException3.getIllegalValueAsString();
        illegalFieldValueException3.prependMessage("");
        java.lang.Throwable[] throwableArray8 = illegalFieldValueException3.getSuppressed();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "100" + "'", str5, "100");
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test392");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.Partial partial40 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.LocalDate localDate42 = localDate36.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property43 = localDate36.yearOfEra();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = localDate50.toDateTimeAtMidnight(dateTimeZone51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Chronology chronology54 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant53);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfDay();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology54);
        java.lang.String str57 = localDate56.toString();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = localDate56.toDateTimeAtMidnight(dateTimeZone58);
        org.joda.time.LocalDate localDate60 = localDate50.withFields((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.LocalDate localDate62 = localDate50.plusMonths((int) ' ');
        int[] intArray63 = localDate50.getValues();
        int int64 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDate36, intArray63);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2024-03-31" + "'", str57, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test393");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DurationField durationField8 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField10 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField8, dateTimeFieldType9);
        long long12 = remainderDateTimeField10.roundFloor((long) (short) -1);
        org.joda.time.DateTimeField dateTimeField13 = remainderDateTimeField10.getWrappedField();
        int int15 = remainderDateTimeField10.get((long) 54);
        int int16 = remainderDateTimeField10.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-230400000L) + "'", long12 == (-230400000L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test394");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate59 = localDate23.withCenturyOfEra(52);
        org.joda.time.LocalDate.Property property60 = localDate59.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test395");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTime();
        int int8 = dateTime6.getMinuteOfHour();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2024-03-31" + "'", str4, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test396");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        int[] intArray8 = partial7.getValues();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate12.withPeriodAdded(readablePeriod13, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property18.addToCopy(10L);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime24 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        long long26 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711869000000L + "'", long26 == 1711869000000L);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test397");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        long long11 = delegatedDateTimeField9.remainder((-1L));
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        java.util.Locale locale21 = null;
        java.lang.String str22 = delegatedDateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate18, locale21);
        long long24 = delegatedDateTimeField9.roundHalfEven((-210866774822000L));
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        int int34 = dateTime33.getDayOfYear();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = iSOChronology46.withZone(dateTimeZone48);
        org.joda.time.DurationField durationField50 = iSOChronology46.weeks();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, (org.joda.time.Chronology) iSOChronology46);
        int int52 = delegatedDateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDate51);
        java.lang.Object obj53 = null;
        boolean boolean54 = localDate51.equals(obj53);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 230399999L + "'", long11 == 230399999L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "13" + "'", str22, "13");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-210866774822000L) + "'", long24 == (-210866774822000L));
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 91 + "'", int34 == 91);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(gJChronology45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test398");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        long long18 = zeroIsMaxDateTimeField15.add((long) 84596, (int) (byte) 0);
        long long21 = zeroIsMaxDateTimeField15.add(1584000000L, (int) (byte) 1);
        int int22 = zeroIsMaxDateTimeField15.getMaximumValue();
        int int24 = zeroIsMaxDateTimeField15.get((long) 2);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (int) (short) 10);
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate localDate34 = localDate28.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property35 = localDate28.yearOfEra();
        int int36 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField38 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = unsupportedDurationField38.getType();
        java.lang.String str40 = unsupportedDurationField38.toString();
        org.joda.time.DurationFieldType durationFieldType41 = unsupportedDurationField38.getType();
        org.joda.time.LocalDate localDate43 = localDate28.withFieldAdded(durationFieldType41, (int) (byte) 100);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 84596L + "'", long18 == 84596L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 33033600000L + "'", long21 == 33033600000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(unsupportedDurationField38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str40, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test399");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(52, 84596, 845, (int) 'a', 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test400");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology0);
        long long7 = gregorianChronology0.add((long) '#', (long) 3, 55);
        boolean boolean9 = gregorianChronology0.equals((java.lang.Object) "1969");
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        int int17 = localDate13.getYearOfEra();
        java.util.Date date18 = localDate13.toDate();
        org.joda.time.LocalDate localDate20 = localDate13.minusYears(1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.LocalDate localDate22 = localDate13.withFields(readablePartial21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology33.getZone();
        org.joda.time.DateTime dateTime35 = localDate22.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.Chronology chronology39 = zonedChronology36.withZone(dateTimeZone38);
        int int41 = dateTimeZone38.getStandardOffset((long) (-1));
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 200L + "'", long7 == 200L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2024 + "'", int17 == 2024);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test401");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = dateTimeField2.getType();
        java.lang.String str5 = dateTimeField2.getAsShortText((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField10 = new org.joda.time.field.OffsetDateTimeField(dateTimeField2, dateTimeFieldType6, 20, (int) (byte) 100, (int) (byte) 10);
        long long12 = offsetDateTimeField10.roundFloor((long) (short) 10);
        long long14 = offsetDateTimeField10.roundHalfCeiling(1584000000L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = offsetDateTimeField10.getAsShortText(0, locale16);
        int int18 = offsetDateTimeField10.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1" + "'", str5, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-230400000L) + "'", long12 == (-230400000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1584000000L + "'", long14 == 1584000000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test402");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dividedDateTimeField6.getType();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = gregorianChronology9.halfdays();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.minutes();
        int int13 = durationField10.compareTo(durationField12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField20 = new org.joda.time.field.DividedDateTimeField(dateTimeField16, durationField17, dateTimeFieldType18, (int) '4');
        boolean boolean21 = dividedDateTimeField20.isSupported();
        org.joda.time.DurationField durationField22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField24 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField20, durationField22, dateTimeFieldType23);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField12, dateTimeFieldType23);
        int int26 = dividedDateTimeField6.getMinimumValue();
        boolean boolean27 = dividedDateTimeField6.isSupported();
        int int28 = dividedDateTimeField6.getMaximumValue();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.Partial partial36 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate43 = localDate40.withPeriodAdded(readablePeriod41, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        int int46 = dateTime45.getDayOfYear();
        org.joda.time.DateTime.Property property47 = dateTime45.yearOfCentury();
        org.joda.time.Interval interval48 = property47.toInterval();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant49);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology50);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDate localDate55 = localDate52.withPeriodAdded(readablePeriod53, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = localDate55.toDateTimeAtMidnight(dateTimeZone56);
        int int58 = dateTime57.getDayOfYear();
        org.joda.time.DateTime.Property property59 = dateTime57.minuteOfDay();
        boolean boolean61 = property59.equals((java.lang.Object) 2);
        org.joda.time.Interval interval62 = property59.toInterval();
        boolean boolean63 = interval48.isAfter((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Period period64 = interval62.toPeriod();
        org.joda.time.Partial partial65 = partial36.minus((org.joda.time.ReadablePeriod) period64);
        java.util.Locale locale67 = null;
        java.lang.String str68 = dividedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial36, 7, locale67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial36.getFieldTypes();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 91 + "'", int46 == 91);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 91 + "'", int58 == 91);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "7" + "'", str68, "7");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test403");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        int int7 = localDate3.getYearOfEra();
        java.util.Date date8 = localDate3.toDate();
        org.joda.time.LocalDate.Property property9 = localDate3.monthOfYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test404");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTime dateTime38 = limitChronology19.getUpperLimit();
        org.joda.time.DateTimeField dateTimeField39 = limitChronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = limitChronology19.halfdayOfDay();
        long long42 = dateTimeField40.roundFloor((long) 84597);
        java.util.Locale locale43 = null;
        int int44 = dateTimeField40.getMaximumShortTextLength(locale43);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-14400000L) + "'", long42 == (-14400000L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test405");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.DateTime dateTime38 = limitChronology19.getUpperLimit();
        org.joda.time.DateTimeField dateTimeField39 = limitChronology19.weekOfWeekyear();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate43.withPeriodAdded(readablePeriod44, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.Chronology chronology49 = limitChronology19.withZone(dateTimeZone47);
        java.lang.String str50 = limitChronology19.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]" + "'", str50, "LimitChronology[ISOChronology[America/Los_Angeles], NoLimit, 2024-03-31T01:00:00.000-07:00]");
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test406");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField2 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType1);
        // The following exception was thrown during execution in test generation
        try {
            long long5 = unsupportedDurationField2.getMillis(31420800000L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: days field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(unsupportedDurationField2);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test407");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology8);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial29.getFieldTypes();
        int[] intArray31 = partial29.getValues();
        int int32 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDate18, intArray31);
        int int33 = dividedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate10, intArray31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 2);
        int int36 = dateTime35.getDayOfWeek();
        org.joda.time.DateTime dateTime37 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property38 = dateTime35.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2024-03-31" + "'", str11, "2024-03-31");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test408");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = iSOChronology10.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = iSOChronology10.weeks();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        java.lang.String str28 = localDate27.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate localDate31 = localDate21.withFields((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate38 = localDate35.withPeriodAdded(readablePeriod36, (int) (short) 10);
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate35);
        int[] intArray40 = partial39.getValues();
        iSOChronology10.validate((org.joda.time.ReadablePartial) localDate27, intArray40);
        org.joda.time.LocalDate localDate43 = localDate27.plusWeeks(20);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2024-03-31" + "'", str28, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test409");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        int int2 = instant0.compareTo((org.joda.time.ReadableInstant) instant1);
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.halfdays();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test410");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.chrono.BuddhistChronology buddhistChronology1 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField2 = buddhistChronology1.minutes();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField3 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField2);
        boolean boolean4 = unsupportedDateTimeField3.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = unsupportedDateTimeField3.getType();
        long long8 = unsupportedDateTimeField3.add((long) 72, 0);
        int int11 = unsupportedDateTimeField3.getDifference((long) (byte) 0, (long) 33);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate15);
        int[] intArray20 = partial19.getValues();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = localDate27.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfDay();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(10L);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTime.Property property35 = dateTime32.yearOfCentury();
        org.joda.time.DateTime dateTime36 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = unsupportedDateTimeField3.getMinimumValue((org.joda.time.ReadablePartial) partial19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: clockhourOfDay field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(buddhistChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 72L + "'", long8 == 72L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test411");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.weekOfWeekyear();
        long long16 = dateTimeField14.roundHalfFloor(0L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, (int) (short) 10);
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate20);
        int[] intArray25 = partial24.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial24.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField33 = new org.joda.time.field.DividedDateTimeField(dateTimeField29, durationField30, dateTimeFieldType31, (int) '4');
        java.util.Locale locale34 = null;
        int int35 = dateTimeField29.getMaximumShortTextLength(locale34);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField36 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField29);
        long long38 = delegatedDateTimeField36.remainder((-1L));
        int int41 = delegatedDateTimeField36.getDifference(1711927792875L, 230399999L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant42);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate48 = localDate45.withPeriodAdded(readablePeriod46, (int) (short) 10);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant50);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Chronology chronology54 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant53);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfDay();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate59 = localDate56.withPeriodAdded(readablePeriod57, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Chronology chronology61 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant60);
        org.joda.time.DateTimeField dateTimeField62 = chronology61.clockhourOfDay();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDate localDate66 = localDate63.withPeriodAdded(readablePeriod64, (int) (short) 10);
        org.joda.time.Partial partial67 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate63);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = partial67.getFieldTypes();
        int[] intArray69 = partial67.getValues();
        int int70 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDate56, intArray69);
        int int71 = delegatedDateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) partial49, intArray69);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Chronology chronology75 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant74);
        org.joda.time.DateTimeField dateTimeField76 = chronology75.clockhourOfDay();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology75);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDate localDate80 = localDate77.withPeriodAdded(readablePeriod78, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime82 = localDate80.toDateTimeAtMidnight(dateTimeZone81);
        org.joda.time.chrono.GJChronology gJChronology83 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81);
        org.joda.time.Chronology chronology84 = gJChronology83.withUTC();
        boolean boolean85 = durationFieldType73.isSupported((org.joda.time.Chronology) gJChronology83);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology83);
        org.joda.time.Chronology chronology87 = gJChronology83.withUTC();
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray69, (org.joda.time.Chronology) gJChronology83);
        java.util.Locale locale89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) partial88, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-230400000L) + "'", long16 == (-230400000L));
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 230399999L + "'", long38 == 230399999L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2830 + "'", int41 == 2830);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 53 + "'", int71 == 53);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(gJChronology83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(chronology87);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test412");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = iSOChronology10.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology10.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology10.getZone();
        org.joda.time.DurationField durationField17 = iSOChronology10.centuries();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test413");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        boolean boolean7 = dividedDateTimeField6.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dividedDateTimeField6.getType();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = gregorianChronology9.halfdays();
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField12 = gregorianChronology11.minutes();
        int int13 = durationField10.compareTo(durationField12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField20 = new org.joda.time.field.DividedDateTimeField(dateTimeField16, durationField17, dateTimeFieldType18, (int) '4');
        boolean boolean21 = dividedDateTimeField20.isSupported();
        org.joda.time.DurationField durationField22 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField24 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField20, durationField22, dateTimeFieldType23);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, durationField12, dateTimeFieldType23);
        int int26 = dividedDateTimeField6.getMinimumValue();
        int int29 = dividedDateTimeField6.getDifference(1711927794353L, (long) 2024);
        int int32 = dividedDateTimeField6.getDifference((long) 54, 31449600052L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate36.withPeriodAdded(readablePeriod37, (int) (short) 10);
        org.joda.time.Partial partial40 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial40.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial40.minus(readablePeriod42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial46 = partial40.withFieldAddWrapped(durationFieldType44, 20);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.years();
        org.joda.time.Partial partial49 = partial40.withFieldAddWrapped(durationFieldType47, 0);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant50);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.clockhourOfDay();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDate localDate56 = localDate53.withPeriodAdded(readablePeriod54, (int) (short) 10);
        org.joda.time.Partial partial57 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial57.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial57.minus(readablePeriod59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial63 = partial57.withFieldAddWrapped(durationFieldType61, 20);
        org.joda.time.Partial partial65 = partial40.withFieldAdded(durationFieldType61, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int67 = partial40.get(dateTimeFieldType66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = partial40.getFieldType(0);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField70 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField6, dateTimeFieldType69);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(gregorianChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 54 + "'", int29 == 54);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 31 + "'", int67 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test414");
        org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = buddhistChronology0.hours();
        java.lang.String str2 = buddhistChronology0.toString();
        org.joda.time.DurationField durationField3 = buddhistChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField4 = buddhistChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = buddhistChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(buddhistChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BuddhistChronology[UTC]" + "'", str2, "BuddhistChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test415");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean20 = dateTimeZone18.isStandardOffset((long) (short) 10);
        int int22 = dateTimeZone18.getOffset((long) 100);
        long long26 = dateTimeZone18.convertLocalToUTC((-32L), false, (long) 24);
        long long30 = dateTimeZone18.convertLocalToUTC((long) 10, true, (-20117426760000000L));
        long long32 = cachedDateTimeZone17.getMillisKeepLocal(dateTimeZone18, (long) (-28800000));
        long long34 = cachedDateTimeZone17.nextTransition(0L);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((org.joda.time.DateTimeZone) cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-28800000) + "'", int22 == (-28800000));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 28799968L + "'", long26 == 28799968L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 28800010L + "'", long30 == 28800010L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-28800000L) + "'", long32 == (-28800000L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 9972000000L + "'", long34 == 9972000000L);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test416");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        int[] intArray9 = partial7.getValues();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 2);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        long long23 = dateTimeZone19.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.era();
        org.joda.time.chrono.GregorianChronology gregorianChronology26 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField27 = gregorianChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField28 = gregorianChronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology26.clockhourOfHalfday();
        boolean boolean30 = iSOChronology24.equals((java.lang.Object) dateTimeField29);
        org.joda.time.DateTime dateTime31 = dateTime11.withChronology((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.Partial partial32 = partial7.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology24);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(gregorianChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(partial32);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test417");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime13 = dateTime8.withMinuteOfHour(10);
        org.joda.time.DateTime dateTime15 = dateTime8.withSecondOfMinute(0);
        int int16 = dateTime15.getYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2024 + "'", int16 == 2024);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test418");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.Partial partial18 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = partial18.getFieldTypes();
        int[] intArray20 = partial18.getValues();
        int int21 = dateTimeField3.getMinimumValue((org.joda.time.ReadablePartial) localDate7, intArray20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate25.withPeriodAdded(readablePeriod26, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtMidnight(dateTimeZone29);
        long long33 = dateTimeZone29.adjustOffset(0L, true);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight35 = localDate7.toDateMidnight(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) (short) 10);
        int int40 = dateTimeZone36.getOffset((long) 100);
        int int42 = dateTimeZone36.getOffset(0L);
        org.joda.time.DateTime dateTime43 = localDate7.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(6L, (org.joda.time.Chronology) julianChronology44);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-28800000) + "'", int40 == (-28800000));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-28800000) + "'", int42 == (-28800000));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(julianChronology44);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test419");
        java.lang.Number number1 = null;
        org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException("2024-03-31T00:00:00.000-07:00", number1, (java.lang.Number) 51, (java.lang.Number) 6031065619353600000L);
        java.lang.String str5 = illegalFieldValueException4.getFieldName();
        illegalFieldValueException4.prependMessage("2024-03-31T00:00:00.000-07:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2024-03-31T00:00:00.000-07:00" + "'", str5, "2024-03-31T00:00:00.000-07:00");
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test420");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        org.joda.time.DurationFieldType durationFieldType2 = unsupportedDurationField1.getType();
        java.lang.String str3 = unsupportedDurationField1.toString();
        long long4 = unsupportedDurationField1.getUnitMillis();
        long long5 = unsupportedDurationField1.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = unsupportedDurationField1.getValue(7487999999L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UnsupportedDurationField[centuries]" + "'", str3, "UnsupportedDurationField[centuries]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test421");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0);
        // The following exception was thrown during execution in test generation
        try {
            long long4 = unsupportedDurationField1.getValueAsLong((long) 13, (-28800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: centuries field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(unsupportedDurationField1);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test422");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime8.minusHours((int) '#');
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.dayOfMonth();
        long long18 = dateTimeField15.getDifferenceAsLong((long) (short) 0, 0L);
        int int19 = dateTime8.get(dateTimeField15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate35 = localDate32.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        boolean boolean40 = durationFieldType28.isSupported((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((-2699186760000000L), (org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTime dateTime42 = localDate23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial51.getFieldTypes();
        int[] intArray53 = partial51.getValues();
        int[] intArray55 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray53, 0);
        int int56 = localDate23.getYearOfCentury();
        int int57 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property58 = localDate23.dayOfWeek();
        org.joda.time.LocalDate.Property property59 = localDate23.weekyear();
        int int60 = localDate23.getMonthOfYear();
        int int61 = localDate23.getMonthOfYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2024-03-31" + "'", str24, "2024-03-31");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gJChronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2024, 3, 31]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2024, 3, 31]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test423");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        org.joda.time.ReadablePartial readablePartial7 = null;
        int[] intArray9 = null;
        int[] intArray11 = dividedDateTimeField6.add(readablePartial7, (int) (short) 0, intArray9, 0);
        int int12 = dividedDateTimeField6.getMinimumValue();
        java.lang.String str13 = dividedDateTimeField6.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField6, dateTimeFieldType14);
        int int17 = zeroIsMaxDateTimeField15.get((long) 7);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate24 = localDate21.withPeriodAdded(readablePeriod22, (int) (short) 10);
        org.joda.time.Partial partial25 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial25.minus(readablePeriod27);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        long long32 = zeroIsMaxDateTimeField15.add(7245987808550400000L, 7);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = dateTimeField35.getType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField38 = new org.joda.time.field.DelegatedDateTimeField((org.joda.time.DateTimeField) zeroIsMaxDateTimeField15, dateTimeFieldType36);
        java.util.Locale locale40 = null;
        java.lang.String str41 = delegatedDateTimeField38.getAsText(54, locale40);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNull(intArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7245988028697600000L + "'", long32 == 7245988028697600000L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "54" + "'", str41, "54");
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test424");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.plusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime13 = dateTime8.withMinuteOfHour(10);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTime.Property property15 = dateTime13.millisOfSecond();
        boolean boolean16 = dateTime13.isBeforeNow();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test425");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField6 = new org.joda.time.field.DividedDateTimeField(dateTimeField2, durationField3, dateTimeFieldType4, (int) '4');
        java.util.Locale locale7 = null;
        int int8 = dateTimeField2.getMaximumShortTextLength(locale7);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField9 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField2);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        org.joda.time.LocalDate localDate18 = localDate16.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate20 = localDate16.minus(readablePeriod19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = localDate24.toDateTimeAtMidnight(dateTimeZone34);
        boolean boolean39 = localDate16.isBefore((org.joda.time.ReadablePartial) localDate24);
        java.util.Locale locale40 = null;
        java.lang.String str41 = delegatedDateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDate24, locale40);
        org.joda.time.LocalDate localDate43 = localDate24.withYearOfCentury((int) '#');
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate50 = localDate47.withPeriodAdded(readablePeriod48, (int) (short) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate53 = localDate47.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property54 = localDate47.yearOfEra();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.clockhourOfDay();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDate localDate61 = localDate58.withPeriodAdded(readablePeriod59, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = localDate61.toDateTimeAtMidnight(dateTimeZone62);
        int int64 = dateTime63.getDayOfYear();
        org.joda.time.DateTime.Property property65 = dateTime63.yearOfCentury();
        boolean boolean66 = localDate47.equals((java.lang.Object) property65);
        int int67 = localDate47.getWeekyear();
        boolean boolean68 = localDate24.isAfter((org.joda.time.ReadablePartial) localDate47);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "13" + "'", str41, "13");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 91 + "'", int64 == 91);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2024 + "'", int67 == 2024);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test426");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now((org.joda.time.Chronology) gregorianChronology0);
        long long7 = gregorianChronology0.add((long) '#', (long) 3, 55);
        boolean boolean9 = gregorianChronology0.equals((java.lang.Object) "1969");
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate16 = localDate13.withPeriodAdded(readablePeriod14, (int) (short) 10);
        int int17 = localDate13.getYearOfEra();
        java.util.Date date18 = localDate13.toDate();
        org.joda.time.LocalDate localDate20 = localDate13.minusYears(1);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.LocalDate localDate22 = localDate13.withFields(readablePartial21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology33.getZone();
        org.joda.time.DateTime dateTime35 = localDate22.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) gregorianChronology0, dateTimeZone34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.Chronology chronology39 = zonedChronology36.withZone(dateTimeZone38);
        java.lang.String str40 = zonedChronology36.toString();
        org.joda.time.DateTimeZone dateTimeZone41 = zonedChronology36.getZone();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 200L + "'", long7 == 200L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2024 + "'", int17 == 2024);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gJChronology32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ZonedChronology[GregorianChronology[UTC], America/Los_Angeles]" + "'", str40, "ZonedChronology[GregorianChronology[UTC], America/Los_Angeles]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test427");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfCentury();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getDayOfYear();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfDay();
        boolean boolean24 = property22.equals((java.lang.Object) 2);
        org.joda.time.Interval interval25 = property22.toInterval();
        boolean boolean26 = interval11.isAfter((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight(dateTimeZone34);
        int int36 = dateTime35.getDayOfYear();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfCentury();
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.Interval interval39 = interval38.toInterval();
        long long40 = interval39.getEndMillis();
        boolean boolean41 = interval11.overlaps((org.joda.time.ReadableInterval) interval39);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 91 + "'", int9 == 91);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 91 + "'", int21 == 91);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 91 + "'", int36 == 91);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1735718400000L + "'", long40 == 1735718400000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test428");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfDay();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate4.withPeriodAdded(readablePeriod5, (int) (short) 10);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate4);
        org.joda.time.LocalDate localDate10 = localDate4.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property11 = localDate4.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDate4.getFieldType(0);
        org.joda.time.DateTime dateTime15 = dateTime0.withField(dateTimeFieldType13, 780);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test429");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        int int9 = dateTime8.getCenturyOfEra();
        int int10 = dateTime8.getMinuteOfDay();
        int int11 = dateTime8.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime8.toDateTime(dateTimeZone19);
        long long24 = dateTimeZone19.nextTransition((long) (-25200000));
        java.lang.String str26 = dateTimeZone19.getNameKey((long) 91);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = iSOChronology37.getZone();
        long long42 = dateTimeZone38.convertLocalToUTC((long) (short) 0, true, (long) 21);
        long long44 = dateTimeZone19.getMillisKeepLocal(dateTimeZone38, 6031065600000000000L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gJChronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9972000000L + "'", long24 == 9972000000L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PST" + "'", str26, "PST");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(gJChronology36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 28800000L + "'", long42 == 28800000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6031065600000000000L + "'", long44 == 6031065600000000000L);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test430");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        long long11 = dateTimeZone7.adjustOffset(0L, true);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        int int14 = instant12.compareTo((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant13);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone17 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        int int19 = cachedDateTimeZone17.getStandardOffset(31420800000L);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now((org.joda.time.DateTimeZone) cachedDateTimeZone17);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(gJChronology16);
        org.junit.Assert.assertNotNull(cachedDateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-28800000) + "'", int19 == (-28800000));
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test431");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property10 = localDate3.yearOfEra();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfCentury();
        boolean boolean22 = localDate3.equals((java.lang.Object) property21);
        java.util.Locale locale23 = null;
        int int24 = property21.getMaximumTextLength(locale23);
        org.joda.time.DateTime dateTime25 = property21.roundHalfFloorCopy();
        long long26 = property21.remainder();
        org.joda.time.DateTimeField dateTimeField27 = property21.getField();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86400000L + "'", long26 == 86400000L);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test432");
        int int3 = org.joda.time.field.FieldUtils.getWrappedValue(64, (int) (short) 1, 2014);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 64 + "'", int3 == 64);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test433");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant34);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekOfWeekyear();
        boolean boolean37 = limitChronology19.equals((java.lang.Object) chronology35);
        org.joda.time.Chronology chronology38 = limitChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = limitChronology19.weekyearOfCentury();
        org.joda.time.DurationField durationField40 = limitChronology19.years();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 19 + "'", int29 == 19);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test434");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.weekOfWeekyear();
        org.joda.time.ReadableDateTime readableDateTime3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate10 = localDate7.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.minusHours((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusYears((int) (byte) 10);
        int int18 = dateTime15.getYearOfCentury();
        org.joda.time.chrono.LimitChronology limitChronology19 = org.joda.time.chrono.LimitChronology.getInstance(chronology1, readableDateTime3, (org.joda.time.ReadableDateTime) dateTime15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        int int30 = dateTime28.getMinuteOfDay();
        int int31 = dateTime28.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = limitChronology19.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = limitChronology19.getLowerLimit();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField41 = new org.joda.time.field.DividedDateTimeField(dateTimeField37, durationField38, dateTimeFieldType39, (int) '4');
        java.util.Locale locale42 = null;
        int int43 = dateTimeField37.getMaximumShortTextLength(locale42);
        org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField44 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField37);
        long long46 = delegatedDateTimeField44.remainder((-1L));
        java.lang.String str48 = delegatedDateTimeField44.getAsShortText((long) (short) -1);
        int int50 = delegatedDateTimeField44.getMaximumValue(0L);
        org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField51 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology) limitChronology19, (org.joda.time.DateTimeField) delegatedDateTimeField44);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDate localDate58 = localDate55.withPeriodAdded(readablePeriod56, (int) (short) 10);
        org.joda.time.Partial partial59 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = partial59.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial59.minus(readablePeriod61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.months();
        org.joda.time.Partial partial65 = partial59.withFieldAddWrapped(durationFieldType63, 20);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.years();
        org.joda.time.Partial partial68 = partial59.withFieldAddWrapped(durationFieldType66, 0);
        int[] intArray70 = limitChronology19.get((org.joda.time.ReadablePartial) partial59, (long) 24);
        org.joda.time.Chronology chronology71 = partial59.getChronology();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(limitChronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 19 + "'", int29 == 19);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 230399999L + "'", long46 == 230399999L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1969, 12, 31]");
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test435");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.yearOfEra();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        int int21 = dateTime20.getCenturyOfEra();
        int int22 = dateTime20.getMinuteOfDay();
        int int23 = dateTime20.getSecondOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology35 = gJChronology9.withZone(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        int int45 = dateTime44.getDayOfYear();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfDay();
        boolean boolean48 = property46.equals((java.lang.Object) 2);
        org.joda.time.DateTimeField dateTimeField49 = property46.getField();
        org.joda.time.field.SkipDateTimeField skipDateTimeField50 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) gJChronology9, dateTimeField49);
        org.joda.time.DurationField durationField51 = gJChronology9.weekyears();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gJChronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(gJChronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test436");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.clockhourOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate3.withPeriodAdded(readablePeriod4, (int) (short) 10);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDate3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = partial7.getFieldTypes();
        org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField10 = gregorianChronology9.halfdays();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = gregorianChronology9.add(readablePeriod11, (long) '4', 0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        org.joda.time.Chronology chronology25 = gJChronology24.withUTC();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology24.getZone();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight(dateTimeZone34);
        int int36 = dateTime35.getDayOfYear();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfCentury();
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant39);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate45 = localDate42.withPeriodAdded(readablePeriod43, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = localDate45.toDateTimeAtMidnight(dateTimeZone46);
        int int48 = dateTime47.getDayOfYear();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfDay();
        boolean boolean51 = property49.equals((java.lang.Object) 2);
        org.joda.time.Interval interval52 = property49.toInterval();
        boolean boolean53 = interval38.isAfter((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Period period54 = interval52.toPeriod();
        org.joda.time.PeriodType periodType55 = period54.getPeriodType();
        int[] intArray57 = gJChronology24.get((org.joda.time.ReadablePeriod) period54, 3050607600032L);
        long long60 = gregorianChronology9.add((org.joda.time.ReadablePeriod) period54, 97L, (int) (byte) 0);
        org.joda.time.Partial partial61 = partial7.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial7.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial7.minus(readablePeriod63);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(gregorianChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(gJChronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 847391, 0, 0, 32]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 97L + "'", long60 == 97L);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(partial64);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test437");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gregorianChronology0.minutes();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate6.withPeriodAdded(readablePeriod7, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        boolean boolean14 = durationFieldType2.isSupported((org.joda.time.Chronology) gJChronology12);
        org.joda.time.IllegalFieldValueException illegalFieldValueException16 = new org.joda.time.IllegalFieldValueException(durationFieldType2, "2024-03-31T00:00:00.000-07:00");
        org.joda.time.field.ScaledDurationField scaledDurationField18 = new org.joda.time.field.ScaledDurationField(durationField1, durationFieldType2, 60);
        int int20 = scaledDurationField18.getValue((long) 18);
        long long21 = scaledDurationField18.getUnitMillis();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gJChronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3600000L + "'", long21 == 3600000L);
    }
}
