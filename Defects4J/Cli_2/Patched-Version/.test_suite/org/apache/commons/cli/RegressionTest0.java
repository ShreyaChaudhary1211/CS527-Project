package org.apache.commons.cli;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Option option1 = null;
        java.util.ListIterator listIterator2 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option1, listIterator2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "hi!", true, "arg");
        java.lang.String str33 = option32.getDescription();
        option32.addValue("arg");
        java.util.ListIterator listIterator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option32, listIterator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        java.lang.String str44 = option38.getDescription();
        option38.setDescription("");
        java.util.ListIterator listIterator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option38, listIterator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        java.lang.String str87 = option82.toString();
        option82.setArgs((int) (byte) 1);
        java.lang.String str90 = option82.getValue();
        java.lang.String str91 = option82.toString();
        java.util.ListIterator listIterator92 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option82, listIterator92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ option:    ::  ]" + "'", str87, "[ option:    ::  ]");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ option:    ::  ]" + "'", str91, "[ option:    ::  ]");
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options38 = options28.addOption("hi!", "", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '!'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) strArray63);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertNotNull(optionBuilder69);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options64 = options24.addOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false, "[ option:    ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean42 = option41.hasOptionalArg();
        java.lang.String str43 = option41.getArgName();
        boolean boolean45 = option41.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = option41.toString();
        option41.setArgs((int) (byte) 1);
        java.lang.String str49 = option41.getKey();
        option41.addValue("");
        boolean boolean52 = option41.hasArgs();
        java.lang.String str53 = option41.getValue();
        java.util.ListIterator listIterator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option41, listIterator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ option:    ::  ]" + "'", str46, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        org.apache.commons.cli.Options options74 = options68.addOption("", false, "arg");
        org.apache.commons.cli.Option option76 = options74.getOption("");
        int int77 = option76.getArgs();
        java.util.ListIterator listIterator78 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option76, listIterator78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        org.apache.commons.cli.Option option45 = options43.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.Collection collection46 = options43.getOptionGroups();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(option45);
        org.junit.Assert.assertNotNull(collection46);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.OptionGroup optionGroup34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options35 = options28.addOptionGroup(optionGroup34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options86 = options81.addOption("[ Options: [ short {} ] [ long {} ]", "hi!", false, "org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        org.apache.commons.cli.Option option70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options71 = options39.addOption(option70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean54 = option53.hasOptionalArg();
        java.lang.String str55 = option53.getArgName();
        boolean boolean57 = option53.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = option53.toString();
        option53.setArgs((int) (byte) 1);
        java.util.ListIterator listIterator61 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option53, listIterator61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "arg" + "'", str55, "arg");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ option:    ::  ]" + "'", str58, "[ option:    ::  ]");
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        java.lang.Object obj34 = commandLine32.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        boolean boolean31 = options9.hasOption("arg");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        boolean boolean12 = option6.hasArgs();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        option17.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = option28.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options41);
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine43.getArgs();
        java.lang.String[] strArray45 = commandLine43.getArgs();
        java.lang.Object obj47 = commandLine43.getOptionObject(' ');
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean56 = option52.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = option52.toString();
        commandLine43.addOption(option52);
        java.lang.String[] strArray59 = commandLine43.getArgs();
        java.lang.String[] strArray61 = posixParser34.flatten(options41, strArray59, true);
        boolean boolean62 = option28.equals((java.lang.Object) posixParser34);
        option17.setType((java.lang.Object) option28);
        boolean boolean64 = option6.equals((java.lang.Object) option17);
        java.lang.String str65 = option17.getKey();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionBuilder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        boolean boolean35 = options33.hasOption("hi!");
        boolean boolean37 = options33.hasOption("hi!");
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup44 = options33.getOptionGroup(option42);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine45.getArgs();
        java.lang.String[] strArray47 = commandLine45.getArgs();
        java.util.Iterator iterator48 = commandLine45.iterator();
        java.lang.String[] strArray50 = commandLine45.getOptionValues('\000');
        java.lang.String str53 = commandLine45.getOptionValue(' ', "hi!");
        java.lang.String[] strArray54 = commandLine45.getArgs();
        java.lang.String[] strArray56 = posixParser0.flatten(options33, strArray54, true);
        org.apache.commons.cli.Options options57 = null;
        org.apache.commons.cli.PosixParser posixParser58 = new org.apache.commons.cli.PosixParser();
        posixParser58.burstToken("", true);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        java.util.Collection collection63 = options62.getOptions();
        java.lang.String[] strArray64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser58.parse(options62, strArray64, true);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        boolean boolean69 = options67.hasOption("hi!");
        boolean boolean71 = options67.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine72.getArgs();
        java.lang.String[] strArray74 = commandLine72.getArgs();
        java.lang.String[] strArray76 = posixParser58.flatten(options67, strArray74, true);
        java.lang.String[] strArray78 = posixParser0.flatten(options57, strArray74, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(iterator48);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        posixParser43.burstToken("", true);
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        java.util.Collection collection48 = options47.getOptions();
        java.lang.String[] strArray49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser43.parse(options47, strArray49, true);
        java.lang.String str52 = options47.toString();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        posixParser53.burstToken("", true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.util.Collection collection58 = options57.getOptions();
        java.lang.String[] strArray59 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser53.parse(options57, strArray59, true);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        boolean boolean64 = options62.hasOption("hi!");
        boolean boolean66 = options62.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine67.getArgs();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser53.flatten(options62, strArray69, true);
        java.lang.String[] strArray73 = posixParser10.flatten(options47, strArray71, true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str52, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        java.util.Collection collection59 = options37.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options64 = options37.addOption("[ Options: [ short {} ] [ long {} ]", "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false, "arg");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(collection59);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        java.lang.String[] strArray79 = commandLine77.getOptionValues('#');
        java.lang.String str82 = commandLine77.getOptionValue('4', "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str82, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        java.lang.String str44 = options7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options49 = options7.addOption("[ option:    ::  ]", "", false, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str44, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        org.apache.commons.cli.Options options65 = options59.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder66 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options65);
        java.util.List list67 = options65.helpOptions();
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        posixParser68.burstToken("", true);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.util.Collection collection73 = options72.getOptions();
        java.lang.String[] strArray74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser68.parse(options72, strArray74, true);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        boolean boolean81 = options77.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine82.getArgs();
        java.lang.String[] strArray84 = commandLine82.getArgs();
        java.lang.String[] strArray86 = posixParser68.flatten(options77, strArray84, true);
        java.lang.String[] strArray88 = posixParser0.flatten(options65, strArray84, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: hi!", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(optionBuilder66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        boolean boolean45 = options7.hasOption("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasArg();
        boolean boolean45 = option43.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup46 = options37.getOptionGroup(option43);
        org.apache.commons.cli.OptionGroup optionGroup47 = options34.getOptionGroup(option43);
        boolean boolean49 = options34.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine50.getArgs();
        java.lang.String[] strArray52 = commandLine50.getArgs();
        java.lang.Object obj54 = commandLine50.getOptionObject(' ');
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = option59.toString();
        commandLine50.addOption(option59);
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.lang.String[] strArray68 = posixParser0.flatten(options34, strArray66, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options34.addOption("hi!", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '!'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option:    ::  ]" + "'", str64, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        org.apache.commons.cli.Option option45 = options43.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.OptionGroup optionGroup46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options47 = options43.addOptionGroup(optionGroup46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNull(option45);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        boolean boolean46 = options44.hasOption("hi!");
        org.apache.commons.cli.Options options50 = options44.addOption("", false, "arg");
        org.apache.commons.cli.Option option52 = options50.getOption("");
        java.lang.String[] strArray58 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine60 = posixParser43.parse(options50, strArray58, false);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        boolean boolean63 = options61.hasOption("hi!");
        boolean boolean65 = options61.hasOption("hi!");
        org.apache.commons.cli.Option option70 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean71 = option70.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup72 = options61.getOptionGroup(option70);
        org.apache.commons.cli.Option option77 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean78 = option77.hasOptionalArg();
        java.lang.String str79 = option77.getArgName();
        boolean boolean80 = option77.hasOptionalArg();
        java.lang.Object obj81 = option77.getType();
        option77.setArgs((int) (byte) -1);
        java.lang.String str84 = option77.getArgName();
        org.apache.commons.cli.Options options85 = options61.addOption(option77);
        org.apache.commons.cli.Options options86 = options50.addOption(option77);
        java.lang.String str87 = options50.toString();
        org.apache.commons.cli.CommandLine commandLine88 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray89 = commandLine88.getArgs();
        java.lang.String[] strArray90 = commandLine88.getArgs();
        java.util.Iterator iterator91 = commandLine88.iterator();
        java.lang.String[] strArray93 = commandLine88.getOptionValues('\000');
        java.lang.String str96 = commandLine88.getOptionValue(' ', "hi!");
        java.lang.String[] strArray97 = commandLine88.getArgs();
        java.util.Properties properties98 = null;
        org.apache.commons.cli.CommandLine commandLine99 = posixParser10.parse(options50, strArray97, properties98);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "arg" + "'", str79, "arg");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str87, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(iterator91);
        org.junit.Assert.assertNull(strArray93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "hi!" + "'", str96, "hi!");
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(commandLine99);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        posixParser10.burstToken("arg", true);
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean77 = option76.hasOptionalArg();
        java.lang.String str78 = option76.getArgName();
        option76.setArgs((int) (byte) 100);
        java.lang.String str81 = option76.getOpt();
        boolean boolean82 = option76.hasArgName();
        java.util.ListIterator listIterator83 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser10.processArgs(option76, listIterator83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = option4.toString();
        option4.setArgs((int) (byte) 1);
        java.lang.String str12 = option4.getKey();
        option4.addValue("");
        boolean boolean15 = option4.hasArgs();
        java.lang.String str16 = option4.getValue();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean22 = option21.hasOptionalArg();
        java.lang.String str23 = option21.getArgName();
        boolean boolean25 = option21.equals((java.lang.Object) (byte) 100);
        boolean boolean26 = option21.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        boolean boolean30 = options28.hasOption("hi!");
        org.apache.commons.cli.Options options34 = options28.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder35 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options34);
        org.apache.commons.cli.CommandLine commandLine36 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray37 = commandLine36.getArgs();
        java.lang.String[] strArray38 = commandLine36.getArgs();
        java.lang.Object obj40 = commandLine36.getOptionObject(' ');
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasOptionalArg();
        java.lang.String str47 = option45.getArgName();
        boolean boolean49 = option45.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = option45.toString();
        commandLine36.addOption(option45);
        java.lang.String[] strArray52 = commandLine36.getArgs();
        java.lang.String[] strArray54 = posixParser27.flatten(options34, strArray52, true);
        boolean boolean55 = option21.equals((java.lang.Object) posixParser27);
        option4.setType((java.lang.Object) posixParser27);
        org.apache.commons.cli.Options options57 = null;
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean63 = option62.hasOptionalArg();
        java.lang.String str64 = option62.getArgName();
        boolean boolean66 = option62.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = option62.toString();
        option62.setArgs((int) (byte) 1);
        java.lang.String str70 = option62.getKey();
        option62.addValue("");
        boolean boolean73 = option62.hasArgs();
        java.lang.String str74 = option62.getValue();
        java.lang.String str75 = option62.getLongOpt();
        java.lang.String[] strArray76 = option62.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine78 = posixParser27.parse(options57, strArray76, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ option:    ::  ]" + "'", str9, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(optionBuilder35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "arg" + "'", str47, "arg");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ option:    ::  ]" + "'", str67, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strArray76);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.util.List list10 = options4.helpOptions();
        org.apache.commons.cli.Option option11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options12 = options4.addOption(option11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertNotNull(list10);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        boolean boolean35 = options33.hasOption("hi!");
        boolean boolean37 = options33.hasOption("hi!");
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup44 = options33.getOptionGroup(option42);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine45.getArgs();
        java.lang.String[] strArray47 = commandLine45.getArgs();
        java.util.Iterator iterator48 = commandLine45.iterator();
        java.lang.String[] strArray50 = commandLine45.getOptionValues('\000');
        java.lang.String str53 = commandLine45.getOptionValue(' ', "hi!");
        java.lang.String[] strArray54 = commandLine45.getArgs();
        java.lang.String[] strArray56 = posixParser0.flatten(options33, strArray54, true);
        java.util.Collection collection57 = options33.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(iterator48);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(collection57);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.OptionGroup optionGroup28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options29 = options7.addOptionGroup(optionGroup28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.lang.String str10 = options4.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean19 = option15.equals((java.lang.Object) (byte) 100);
        org.apache.commons.cli.Options options20 = options4.addOption(option15);
        boolean boolean22 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String str23 = options20.toString();
        java.lang.String str24 = options20.toString();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str23, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str24, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        boolean boolean88 = option82.isRequired();
        java.lang.String str89 = option82.getKey();
        boolean boolean90 = option82.hasArgName();
        option82.setLongOpt("");
        boolean boolean93 = option82.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup94 = options53.getOptionGroup(option82);
        option82.setArgName("");
        org.apache.commons.cli.OptionBuilder optionBuilder97 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(optionGroup94);
        org.junit.Assert.assertNotNull(optionBuilder97);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        java.lang.String str35 = commandLine32.getOptionValue("org.apache.commons.cli.MissingArgumentException: hi!", "hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        java.util.Collection collection82 = options81.getOptions();
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasArg();
        boolean boolean89 = option87.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup90 = options81.getOptionGroup(option87);
        org.apache.commons.cli.OptionGroup optionGroup91 = options78.getOptionGroup(option87);
        java.lang.String str92 = option87.toString();
        java.util.ListIterator listIterator93 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option87, listIterator93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(collection82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertNull(optionGroup91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[ option:    ::  ]" + "'", str92, "[ option:    ::  ]");
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        org.apache.commons.cli.OptionGroup optionGroup63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options64 = options34.addOptionGroup(optionGroup63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        java.lang.String str50 = commandLine48.getOptionValue('\000');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        boolean boolean78 = commandLine76.hasOption("[ option:    ::  ]");
        org.apache.commons.cli.Option option83 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean84 = option83.hasOptionalArg();
        java.lang.String str85 = option83.getArgName();
        boolean boolean87 = option83.equals((java.lang.Object) (byte) 100);
        boolean boolean88 = option83.hasValueSeparator();
        java.util.List list89 = option83.getValuesList();
        option83.setLongOpt("");
        commandLine76.addOption(option83);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "arg" + "'", str85, "arg");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(list89);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        boolean boolean41 = options39.hasOption("hi!");
        boolean boolean43 = options39.hasOption("hi!");
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        java.util.Collection collection63 = options62.getOptions();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasArg();
        boolean boolean70 = option68.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup71 = options62.getOptionGroup(option68);
        java.lang.String str72 = options62.toString();
        org.apache.commons.cli.CommandLine commandLine73 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine73.getArgs();
        java.lang.String[] strArray75 = commandLine73.getArgs();
        java.lang.Object obj77 = commandLine73.getOptionObject(' ');
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        java.lang.String str87 = option82.toString();
        commandLine73.addOption(option82);
        java.lang.String[] strArray89 = commandLine73.getArgs();
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser44.parse(options62, strArray89, properties90, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser10.parse(options39, strArray89, properties93, true);
        java.util.Collection collection96 = options39.getOptions();
        boolean boolean98 = options39.hasOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str72, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ option:    ::  ]" + "'", str87, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(collection96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        java.util.Collection collection69 = options68.getOptions();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean75 = option74.hasArg();
        boolean boolean76 = option74.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup77 = options68.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine78 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray79 = commandLine78.getArgs();
        java.lang.String[] strArray80 = commandLine78.getArgs();
        java.lang.Object obj82 = commandLine78.getOptionObject(' ');
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        java.lang.String str89 = option87.getArgName();
        boolean boolean91 = option87.equals((java.lang.Object) (byte) 100);
        java.lang.String str92 = option87.toString();
        commandLine78.addOption(option87);
        java.lang.String[] strArray94 = commandLine78.getArgs();
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options68, strArray94, properties95, false);
        java.util.Collection collection98 = options68.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "arg" + "'", str89, "arg");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[ option:    ::  ]" + "'", str92, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(collection98);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        boolean boolean88 = option82.isRequired();
        java.lang.String str89 = option82.getKey();
        boolean boolean90 = option82.hasArgName();
        option82.setLongOpt("");
        boolean boolean93 = option82.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup94 = options53.getOptionGroup(option82);
        // The following exception was thrown during execution in test generation
        try {
            option82.addValue("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(optionGroup94);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        boolean boolean40 = options38.hasOption("hi!");
        org.apache.commons.cli.Options options44 = options38.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder45 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options44);
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine46.getArgs();
        java.lang.String[] strArray48 = commandLine46.getArgs();
        java.lang.Object obj50 = commandLine46.getOptionObject(' ');
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean56 = option55.hasOptionalArg();
        java.lang.String str57 = option55.getArgName();
        boolean boolean59 = option55.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = option55.toString();
        commandLine46.addOption(option55);
        java.lang.String[] strArray62 = commandLine46.getArgs();
        java.lang.String[] strArray64 = posixParser37.flatten(options44, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.util.List list66 = options65.helpOptions();
        java.lang.String[] strArray67 = new java.lang.String[] {};
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser37.parse(options65, strArray67, properties68, false);
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        java.lang.String[] strArray73 = commandLine71.getArgs();
        java.lang.Object obj75 = commandLine71.getOptionObject(' ');
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean81 = option80.hasOptionalArg();
        java.lang.String str82 = option80.getArgName();
        boolean boolean84 = option80.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = option80.toString();
        commandLine71.addOption(option80);
        java.lang.String[] strArray87 = commandLine71.getArgs();
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine90 = posixParser0.parse(options65, strArray87, properties88, false);
        posixParser0.burstToken("", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(optionBuilder45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ option:    ::  ]" + "'", str60, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "arg" + "'", str82, "arg");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ option:    ::  ]" + "'", str85, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine90);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        java.util.Collection collection34 = options28.getOptions();
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str41 = option39.getValue((int) (byte) 10);
        java.lang.String str42 = option39.toString();
        org.apache.commons.cli.OptionGroup optionGroup43 = options28.getOptionGroup(option39);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ option:    ::  ]" + "'", str42, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup43);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        org.apache.commons.cli.Option option79 = options68.getOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(option79);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String str70 = options69.toString();
        java.util.List list71 = options69.helpOptions();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine72.getArgs();
        java.lang.String[] strArray74 = commandLine72.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser10.parse(options69, strArray74, properties75, false);
        java.lang.String str80 = commandLine77.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str70, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        boolean boolean35 = options33.hasOption("hi!");
        boolean boolean37 = options33.hasOption("hi!");
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup44 = options33.getOptionGroup(option42);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine45.getArgs();
        java.lang.String[] strArray47 = commandLine45.getArgs();
        java.util.Iterator iterator48 = commandLine45.iterator();
        java.lang.String[] strArray50 = commandLine45.getOptionValues('\000');
        java.lang.String str53 = commandLine45.getOptionValue(' ', "hi!");
        java.lang.String[] strArray54 = commandLine45.getArgs();
        java.lang.String[] strArray56 = posixParser0.flatten(options33, strArray54, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options61 = options33.addOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "", false, "[ option: arg  :: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ] ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(iterator48);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        java.lang.String str80 = commandLine77.getOptionValue('4', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean82 = commandLine77.hasOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.Object obj84 = commandLine77.getOptionObject('\000');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str80, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        java.util.Collection collection69 = options68.getOptions();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean75 = option74.hasArg();
        boolean boolean76 = option74.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup77 = options68.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine78 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray79 = commandLine78.getArgs();
        java.lang.String[] strArray80 = commandLine78.getArgs();
        java.lang.Object obj82 = commandLine78.getOptionObject(' ');
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        java.lang.String str89 = option87.getArgName();
        boolean boolean91 = option87.equals((java.lang.Object) (byte) 100);
        java.lang.String str92 = option87.toString();
        commandLine78.addOption(option87);
        java.lang.String[] strArray94 = commandLine78.getArgs();
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options68, strArray94, properties95, false);
        java.lang.String[] strArray99 = commandLine97.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "arg" + "'", str89, "arg");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[ option:    ::  ]" + "'", str92, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNull(strArray99);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean38 = option34.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = option34.toString();
        java.lang.Object obj40 = option34.getType();
        java.lang.String str41 = option34.toString();
        java.util.ListIterator listIterator42 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option34, listIterator42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ option:    ::  ]" + "'", str39, "[ option:    ::  ]");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ option:    ::  ]" + "'", str41, "[ option:    ::  ]");
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        commandLine76.addArg("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        java.util.List list79 = commandLine76.getArgList();
        java.lang.String[] strArray80 = commandLine76.getArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNotNull(strArray80);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        option4.setValueSeparator('#');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options46 = options39.addOption("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]", false, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean54 = option53.hasArg();
        boolean boolean55 = option53.isRequired();
        boolean boolean56 = option53.hasOptionalArg();
        java.lang.String str57 = option53.toString();
        java.lang.String str58 = option53.getOpt();
        java.lang.String[] strArray59 = option53.getValues();
        org.apache.commons.cli.Options options60 = options18.addOption(option53);
        java.lang.String str61 = option53.getKey();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Option option19 = options7.getOption("");
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasOptionalArg();
        java.lang.String str26 = option24.getArgName();
        boolean boolean27 = option24.hasOptionalArg();
        java.lang.Object obj28 = option24.getType();
        option24.setArgs((int) (byte) -1);
        java.lang.String str31 = option24.getArgName();
        boolean boolean32 = option24.hasOptionalArg();
        java.lang.String str34 = option24.getValue((int) (short) 0);
        java.lang.String str35 = option24.getOpt();
        org.apache.commons.cli.OptionGroup optionGroup36 = options7.getOptionGroup(option24);
        boolean boolean38 = options7.hasOption("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        java.util.List list78 = options53.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(list78);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        boolean boolean82 = options78.hasOption("hi!");
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup89 = options78.getOptionGroup(option87);
        java.lang.Object obj90 = option87.getType();
        commandLine77.addOption(option87);
        int int92 = option87.getArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Option option33 = null;
        java.util.ListIterator listIterator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option33, listIterator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options48 = options7.addOption("[ option:    ::  :: [ option:    ::  ] ]", "[ option:    ::  ]", true, "arg");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        java.lang.String str70 = commandLine67.getOptionValue("[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        boolean boolean72 = commandLine67.hasOption('4');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        org.apache.commons.cli.Option[] optionArray61 = commandLine60.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(optionArray61);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        boolean boolean88 = option82.isRequired();
        java.lang.String str89 = option82.getKey();
        boolean boolean90 = option82.hasArgName();
        option82.setLongOpt("");
        boolean boolean93 = option82.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup94 = options53.getOptionGroup(option82);
        boolean boolean95 = option82.hasOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(optionGroup94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        org.apache.commons.cli.Options options15 = options9.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder16 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options15);
        org.apache.commons.cli.CommandLine commandLine17 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray18 = commandLine17.getArgs();
        java.lang.String[] strArray19 = commandLine17.getArgs();
        java.lang.Object obj21 = commandLine17.getOptionObject(' ');
        org.apache.commons.cli.Option option26 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean27 = option26.hasOptionalArg();
        java.lang.String str28 = option26.getArgName();
        boolean boolean30 = option26.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = option26.toString();
        commandLine17.addOption(option26);
        java.lang.String[] strArray33 = commandLine17.getArgs();
        java.lang.String[] strArray35 = posixParser8.flatten(options15, strArray33, true);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.util.List list37 = options36.helpOptions();
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser8.parse(options36, strArray38, properties39, false);
        boolean boolean42 = option4.equals((java.lang.Object) false);
        java.lang.Object obj43 = option4.getType();
        // The following exception was thrown during execution in test generation
        try {
            option4.addValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(optionBuilder16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "arg" + "'", str28, "arg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ option:    ::  ]" + "'", str31, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Option option4 = null;
        java.util.ListIterator listIterator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option4, listIterator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        boolean boolean88 = option82.isRequired();
        java.lang.String str89 = option82.getKey();
        boolean boolean90 = option82.hasArgName();
        option82.setLongOpt("");
        boolean boolean93 = option82.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup94 = options53.getOptionGroup(option82);
        option82.setArgName("");
        java.lang.String str98 = option82.getValue("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(optionGroup94);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str98, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean73 = option72.hasOptionalArg();
        java.lang.String str74 = option72.getArgName();
        boolean boolean75 = option72.hasOptionalArg();
        java.lang.Object obj76 = option72.getType();
        option72.setArgs((int) (byte) -1);
        commandLine67.addOption(option72);
        boolean boolean81 = commandLine67.hasOption("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "arg" + "'", str74, "arg");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        org.apache.commons.cli.OptionGroup optionGroup82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options83 = options53.addOptionGroup(optionGroup82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        java.lang.String str82 = options53.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]" + "'", str82, "[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]");
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Option option79 = options52.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(option79);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        java.util.Iterator iterator61 = commandLine60.iterator();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine62.getArgs();
        commandLine62.addArg("");
        java.lang.String[] strArray67 = commandLine62.getOptionValues("hi!");
        java.lang.String[] strArray69 = commandLine62.getOptionValues("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str76 = option74.getValue((int) (byte) 10);
        org.apache.commons.cli.CommandLine commandLine77 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine77.getArgs();
        commandLine77.addArg("");
        java.util.List list81 = commandLine77.getArgList();
        commandLine77.addArg("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray84 = commandLine77.getOptions();
        boolean boolean85 = option74.equals((java.lang.Object) optionArray84);
        java.lang.String str86 = option74.getOpt();
        commandLine62.addOption(option74);
        commandLine60.addOption(option74);
        // The following exception was thrown during execution in test generation
        try {
            option74.addValue("[ option:    ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(iterator61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(list81);
        org.junit.Assert.assertNotNull(optionArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        boolean boolean72 = options70.hasOption("hi!");
        org.apache.commons.cli.Options options76 = options70.addOption("", false, "arg");
        java.util.Collection collection77 = options76.getOptions();
        org.apache.commons.cli.Option option81 = new org.apache.commons.cli.Option("arg", false, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.apache.commons.cli.OptionGroup optionGroup82 = options76.getOptionGroup(option81);
        java.util.ListIterator listIterator83 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser10.processArgs(option81, listIterator83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(collection77);
        org.junit.Assert.assertNull(optionGroup82);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        java.lang.String str64 = option25.getArgName();
        boolean boolean65 = option25.hasArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options75 = options39.addOption("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]", true, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean6 = option5.hasOptionalArg();
        java.lang.String str7 = option5.getArgName();
        boolean boolean9 = option5.equals((java.lang.Object) (byte) 100);
        boolean boolean10 = option5.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        boolean boolean14 = options12.hasOption("hi!");
        org.apache.commons.cli.Options options18 = options12.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder19 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options18);
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray21 = commandLine20.getArgs();
        java.lang.String[] strArray22 = commandLine20.getArgs();
        java.lang.Object obj24 = commandLine20.getOptionObject(' ');
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean30 = option29.hasOptionalArg();
        java.lang.String str31 = option29.getArgName();
        boolean boolean33 = option29.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = option29.toString();
        commandLine20.addOption(option29);
        java.lang.String[] strArray36 = commandLine20.getArgs();
        java.lang.String[] strArray38 = posixParser11.flatten(options18, strArray36, true);
        boolean boolean39 = option5.equals((java.lang.Object) posixParser11);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = null;
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser11.parse(options40, strArray41, properties42);
        boolean boolean45 = options40.hasOption("");
        java.lang.String str46 = options40.toString();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        boolean boolean50 = options48.hasOption("hi!");
        org.apache.commons.cli.Options options54 = options48.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder55 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options54);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        java.lang.String[] strArray58 = commandLine56.getArgs();
        java.lang.Object obj60 = commandLine56.getOptionObject(' ');
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean66 = option65.hasOptionalArg();
        java.lang.String str67 = option65.getArgName();
        boolean boolean69 = option65.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = option65.toString();
        commandLine56.addOption(option65);
        java.lang.String[] strArray72 = commandLine56.getArgs();
        java.lang.String[] strArray74 = posixParser47.flatten(options54, strArray72, true);
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        java.util.List list76 = options75.helpOptions();
        java.lang.String[] strArray77 = new java.lang.String[] {};
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser47.parse(options75, strArray77, properties78, false);
        java.lang.String[] strArray82 = posixParser0.flatten(options40, strArray77, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options86 = options40.addOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", false, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(optionBuilder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ option:    ::  ]" + "'", str34, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str46, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNotNull(optionBuilder55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "arg" + "'", str67, "arg");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ option:    ::  ]" + "'", str70, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.OptionBuilder optionBuilder28 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) posixParser0);
        org.apache.commons.cli.OptionBuilder optionBuilder29 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) optionBuilder28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(optionBuilder28);
        org.junit.Assert.assertNotNull(optionBuilder29);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        char char9 = option4.getValueSeparator();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        boolean boolean21 = options19.hasOption("hi!");
        org.apache.commons.cli.Options options25 = options19.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options25);
        org.apache.commons.cli.CommandLine commandLine27 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray28 = commandLine27.getArgs();
        java.lang.String[] strArray29 = commandLine27.getArgs();
        java.lang.Object obj31 = commandLine27.getOptionObject(' ');
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean37 = option36.hasOptionalArg();
        java.lang.String str38 = option36.getArgName();
        boolean boolean40 = option36.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = option36.toString();
        commandLine27.addOption(option36);
        java.lang.String[] strArray43 = commandLine27.getArgs();
        java.lang.String[] strArray45 = posixParser18.flatten(options25, strArray43, true);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.util.List list47 = options46.helpOptions();
        java.lang.String[] strArray48 = new java.lang.String[] {};
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser18.parse(options46, strArray48, properties49, false);
        boolean boolean52 = option14.equals((java.lang.Object) false);
        option14.setOptionalArg(false);
        boolean boolean55 = option4.equals((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            option4.addValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '\000' + "'", char9 == '\000');
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(optionBuilder26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "arg" + "'", str38, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ option:    ::  ]" + "'", str41, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        java.lang.Object obj52 = null;
        boolean boolean53 = option38.equals(obj52);
        option38.setArgs((int) (short) 0);
        java.lang.Class<?> wildcardClass56 = option38.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Option option8 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean9 = option8.hasOptionalArg();
        java.lang.String str10 = option8.getArgName();
        boolean boolean12 = option8.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = option8.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser14 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        boolean boolean17 = options15.hasOption("hi!");
        org.apache.commons.cli.Options options21 = options15.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder22 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options21);
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine23.getArgs();
        java.lang.String[] strArray25 = commandLine23.getArgs();
        java.lang.Object obj27 = commandLine23.getOptionObject(' ');
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean33 = option32.hasOptionalArg();
        java.lang.String str34 = option32.getArgName();
        boolean boolean36 = option32.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = option32.toString();
        commandLine23.addOption(option32);
        java.lang.String[] strArray39 = commandLine23.getArgs();
        java.lang.String[] strArray41 = posixParser14.flatten(options21, strArray39, true);
        boolean boolean42 = option8.equals((java.lang.Object) posixParser14);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = null;
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = posixParser14.parse(options43, strArray44, properties45);
        boolean boolean48 = options43.hasOption("");
        java.lang.String[] strArray49 = null;
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser0.parse(options43, strArray49, properties50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(optionBuilder22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "arg" + "'", str34, "arg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[ option:    ::  ]" + "'", str37, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(commandLine51);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        java.util.Collection collection81 = options80.getOptions();
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasArg();
        boolean boolean88 = option86.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup89 = options80.getOptionGroup(option86);
        org.apache.commons.cli.OptionGroup optionGroup90 = options77.getOptionGroup(option86);
        boolean boolean91 = option86.hasLongOpt();
        java.lang.String str93 = option86.getValue((-2));
        option86.setDescription("");
        org.apache.commons.cli.Options options96 = options43.addOption(option86);
        option86.setArgs((int) (byte) 1);
        boolean boolean99 = option86.hasArgName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(options96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        java.lang.String str82 = commandLine68.getOptionValue("[ Options: [ short {} ] [ long {} ]", "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str82, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Option[] optionArray78 = commandLine77.getOptions();
        java.util.List list79 = commandLine77.getArgList();
        java.lang.Object obj81 = commandLine77.getOptionObject("arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(optionArray78);
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        commandLine69.addArg("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        java.lang.String str44 = options7.toString();
        org.apache.commons.cli.OptionGroup optionGroup45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options46 = options7.addOptionGroup(optionGroup45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str44, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        org.apache.commons.cli.Options options65 = options59.addOption("", false, "arg");
        java.lang.String str66 = options59.toString();
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean72 = option71.hasArg();
        boolean boolean73 = option71.isRequired();
        boolean boolean74 = option71.hasOptionalArg();
        java.lang.String str75 = option71.toString();
        org.apache.commons.cli.OptionGroup optionGroup76 = options59.getOptionGroup(option71);
        org.apache.commons.cli.Options options80 = options59.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.util.Collection collection81 = options59.getOptions();
        org.apache.commons.cli.Options options85 = options59.addOption("arg", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray87 = commandLine86.getArgs();
        java.lang.String[] strArray88 = commandLine86.getArgs();
        java.util.Iterator iterator89 = commandLine86.iterator();
        java.util.Iterator iterator90 = commandLine86.iterator();
        org.apache.commons.cli.OptionBuilder optionBuilder91 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine86);
        java.lang.String str93 = commandLine86.getOptionValue("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray94 = commandLine86.getArgs();
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options59, strArray94, properties95);
        commandLine96.addArg("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str66, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ option:    ::  ]" + "'", str75, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNotNull(iterator90);
        org.junit.Assert.assertNotNull(optionBuilder91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        boolean boolean13 = options9.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray15 = commandLine14.getArgs();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        java.lang.String[] strArray18 = posixParser0.flatten(options9, strArray16, true);
        org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str25 = option23.getValue((int) (byte) 10);
        java.util.ListIterator listIterator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option23, listIterator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.util.Iterator iterator18 = commandLine17.iterator();
        java.lang.String str21 = commandLine17.getOptionValue('\000', "[ Options: [ short {} ] [ long {} ]");
        boolean boolean23 = commandLine17.hasOption('4');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str21, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        java.lang.Object obj78 = commandLine76.getOptionObject('a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNull(obj78);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        commandLine77.addArg("arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.ListIterator listIterator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option11, listIterator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        java.lang.String str80 = commandLine77.getOptionValue('4', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean82 = commandLine77.hasOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray83 = commandLine77.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str80, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(optionArray83);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        java.lang.String str79 = commandLine76.getOptionValue("[ option:    ::  ]", "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str82 = commandLine76.getOptionValue('a', "hi!");
        boolean boolean84 = commandLine76.hasOption("[ option: arg  :: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ] ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str79, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        org.apache.commons.cli.PosixParser posixParser59 = new org.apache.commons.cli.PosixParser();
        posixParser59.burstToken("", true);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        java.util.Collection collection64 = options63.getOptions();
        java.lang.String[] strArray65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser59.parse(options63, strArray65, true);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        java.lang.String str69 = options68.toString();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean75 = option74.hasOptionalArg();
        java.lang.String str76 = option74.getArgName();
        boolean boolean77 = option74.hasOptionalArg();
        java.lang.Object obj78 = option74.getType();
        org.apache.commons.cli.OptionGroup optionGroup79 = options68.getOptionGroup(option74);
        boolean boolean81 = options68.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray86 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties87 = null;
        org.apache.commons.cli.CommandLine commandLine88 = posixParser59.parse(options68, strArray86, properties87);
        java.lang.String[] strArray89 = null;
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options68, strArray89, properties90, false);
        posixParser0.burstToken("", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str69, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "arg" + "'", str76, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(optionGroup79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(commandLine92);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        java.util.Collection collection30 = options9.getOptions();
        org.apache.commons.cli.Option option32 = options9.getOption("org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(collection30);
        org.junit.Assert.assertNull(option32);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        boolean boolean41 = options39.hasOption("hi!");
        boolean boolean43 = options39.hasOption("hi!");
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean49 = option48.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup50 = options39.getOptionGroup(option48);
        java.util.List list51 = options39.helpOptions();
        java.lang.String[] strArray52 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser10.parse(options39, strArray52, false);
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.Object obj64 = option59.getType();
        java.lang.String str65 = option59.getValue();
        option59.setOptionalArg(false);
        option59.setValueSeparator(' ');
        java.util.ListIterator listIterator70 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser10.processArgs(option59, listIterator70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(list51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        option25.setValueSeparator('#');
        int int66 = option25.getArgs();
        org.apache.commons.cli.OptionBuilder optionBuilder67 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option25);
        java.lang.String str68 = option25.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(optionBuilder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ option:    ::  ]" + "'", str68, "[ option:    ::  ]");
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        org.apache.commons.cli.Option option83 = new org.apache.commons.cli.Option("", false, "hi!");
        commandLine68.addOption(option83);
        java.lang.Object obj85 = null;
        option83.setType(obj85);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        posixParser0.burstToken("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Option option19 = options7.getOption("");
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        boolean boolean22 = options20.hasOption("hi!");
        boolean boolean24 = options20.hasOption("hi!");
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean30 = option29.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup31 = options20.getOptionGroup(option29);
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean37 = option36.hasOptionalArg();
        java.lang.String str38 = option36.getArgName();
        boolean boolean39 = option36.hasOptionalArg();
        java.lang.Object obj40 = option36.getType();
        option36.setArgs((int) (byte) -1);
        java.lang.String str43 = option36.getArgName();
        org.apache.commons.cli.Options options44 = options20.addOption(option36);
        java.lang.String[] strArray45 = option36.getValues();
        java.lang.String str46 = option36.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup47 = options7.getOptionGroup(option36);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "arg" + "'", str38, "arg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNull(strArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNull(optionGroup47);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        java.lang.String[] strArray79 = commandLine77.getOptionValues('#');
        java.lang.String str82 = commandLine77.getOptionValue("org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]" + "'", str82, "org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        java.util.List list80 = commandLine68.getArgList();
        java.lang.Object obj82 = commandLine68.getOptionObject("");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertNotNull(list80);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        java.lang.String str72 = options39.toString();
        java.util.Collection collection73 = options39.getOptions();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str72, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection73);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        boolean boolean63 = options61.hasOption("hi!");
        boolean boolean65 = options61.hasOption("hi!");
        org.apache.commons.cli.Option option70 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean71 = option70.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup72 = options61.getOptionGroup(option70);
        java.util.ListIterator listIterator73 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option70, listIterator73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(optionGroup72);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasOptionalArg();
        java.lang.String str88 = option86.getArgName();
        boolean boolean90 = option86.equals((java.lang.Object) (byte) 100);
        option86.setLongOpt("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Options options93 = options81.addOption(option86);
        option86.setOptionalArg(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(options93);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        commandLine77.addOption(option82);
        java.lang.String str91 = commandLine77.getOptionValue('#', "[ option:    ::  ]");
        java.lang.String str93 = commandLine77.getOptionValue('\000');
        java.util.List list94 = commandLine77.getArgList();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ option:    ::  ]" + "'", str91, "[ option:    ::  ]");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(list94);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        boolean boolean35 = options28.hasOption("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: ", false);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: hi!", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.lang.String str11 = commandLine8.getOptionValue('\000', "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "hi!", true, "arg");
        java.lang.String str17 = option16.getDescription();
        option16.addValue("arg");
        int int20 = option16.getArgs();
        java.lang.String str21 = option16.getOpt();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        boolean boolean24 = options22.hasOption("hi!");
        org.apache.commons.cli.Options options28 = options22.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder29 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options28);
        option16.setType((java.lang.Object) options28);
        commandLine8.addOption(option16);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str11, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(optionBuilder29);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option34 = null;
        commandLine33.addOption(option34);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        boolean boolean12 = options10.hasOption("hi!");
        org.apache.commons.cli.Options options16 = options10.addOption("", false, "arg");
        org.apache.commons.cli.Option option18 = options16.getOption("");
        java.lang.String[] strArray24 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine26 = posixParser9.parse(options16, strArray24, false);
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        boolean boolean31 = options27.hasOption("hi!");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean37 = option36.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup38 = options27.getOptionGroup(option36);
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean46 = option43.hasOptionalArg();
        java.lang.Object obj47 = option43.getType();
        option43.setArgs((int) (byte) -1);
        java.lang.String str50 = option43.getArgName();
        org.apache.commons.cli.Options options51 = options27.addOption(option43);
        org.apache.commons.cli.Options options52 = options16.addOption(option43);
        org.apache.commons.cli.Option option54 = options52.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        boolean boolean58 = options56.hasOption("hi!");
        org.apache.commons.cli.Options options62 = options56.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder63 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options62);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.Object obj68 = commandLine64.getOptionObject(' ');
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = option73.toString();
        commandLine64.addOption(option73);
        java.lang.String[] strArray80 = commandLine64.getArgs();
        java.lang.String[] strArray82 = posixParser55.flatten(options62, strArray80, true);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray85 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine87 = posixParser55.parse(options83, strArray85, true);
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser0.parse(options52, strArray85, properties88);
        org.apache.commons.cli.Option option91 = options52.getOption("");
        option91.setLongOpt("hi!");
        boolean boolean94 = option91.hasArg();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "arg" + "'", str50, "arg");
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNull(option54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(optionBuilder63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:    ::  ]" + "'", str78, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(option91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        option38.setRequired(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasOption("hi!");
        org.apache.commons.cli.Options options6 = options0.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder7 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options6);
        java.util.List list8 = options6.helpOptions();
        java.util.Collection collection9 = options6.getOptionGroups();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        option14.setArgName("");
        boolean boolean18 = option14.hasOptionalArg();
        int int19 = option14.getArgs();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasOptionalArg();
        java.lang.String str26 = option24.getArgName();
        boolean boolean27 = option24.hasOptionalArg();
        java.lang.Object obj28 = option24.getType();
        option24.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean36 = option35.hasOptionalArg();
        java.lang.String str37 = option35.getArgName();
        boolean boolean39 = option35.equals((java.lang.Object) (byte) 100);
        boolean boolean40 = option35.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        org.apache.commons.cli.Options options48 = options42.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder49 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options48);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine50.getArgs();
        java.lang.String[] strArray52 = commandLine50.getArgs();
        java.lang.Object obj54 = commandLine50.getOptionObject(' ');
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = option59.toString();
        commandLine50.addOption(option59);
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.lang.String[] strArray68 = posixParser41.flatten(options48, strArray66, true);
        boolean boolean69 = option35.equals((java.lang.Object) posixParser41);
        option24.setType((java.lang.Object) option35);
        option14.setType((java.lang.Object) option35);
        org.apache.commons.cli.OptionGroup optionGroup72 = options6.getOptionGroup(option35);
        org.apache.commons.cli.Option option77 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean78 = option77.hasArg();
        boolean boolean79 = option77.isRequired();
        boolean boolean80 = option77.hasValueSeparator();
        java.lang.String str81 = option77.getOpt();
        java.lang.String str82 = option77.getValue();
        java.lang.String str83 = option77.toString();
        boolean boolean84 = option35.equals((java.lang.Object) str83);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = option35.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(optionBuilder7);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "arg" + "'", str37, "arg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionBuilder49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option:    ::  ]" + "'", str64, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[ option:    ::  ]" + "'", str83, "[ option:    ::  ]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean38 = option37.hasOptionalArg();
        java.lang.String str39 = option37.getArgName();
        boolean boolean40 = option37.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        org.apache.commons.cli.Options options48 = options42.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder49 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options48);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine50.getArgs();
        java.lang.String[] strArray52 = commandLine50.getArgs();
        java.lang.Object obj54 = commandLine50.getOptionObject(' ');
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = option59.toString();
        commandLine50.addOption(option59);
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.lang.String[] strArray68 = posixParser41.flatten(options48, strArray66, true);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.util.List list70 = options69.helpOptions();
        java.lang.String[] strArray71 = new java.lang.String[] {};
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser41.parse(options69, strArray71, properties72, false);
        boolean boolean75 = option37.equals((java.lang.Object) false);
        org.apache.commons.cli.Options options76 = options28.addOption(option37);
        java.lang.String str77 = option37.getArgName();
        char char78 = option37.getValueSeparator();
        org.apache.commons.cli.Option option83 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean84 = option83.hasOptionalArg();
        java.lang.String str85 = option83.getArgName();
        boolean boolean87 = option83.equals((java.lang.Object) (byte) 100);
        boolean boolean88 = option83.hasValueSeparator();
        boolean boolean89 = option83.isRequired();
        java.lang.String str90 = option83.getKey();
        option83.setValueSeparator('a');
        option37.setType((java.lang.Object) 'a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionBuilder49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option:    ::  ]" + "'", str64, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "arg" + "'", str77, "arg");
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "arg" + "'", str85, "arg");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        boolean boolean4 = options2.hasOption("hi!");
        org.apache.commons.cli.Options options8 = options2.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder9 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options8);
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine10.getArgs();
        java.lang.String[] strArray12 = commandLine10.getArgs();
        java.lang.Object obj14 = commandLine10.getOptionObject(' ');
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean20 = option19.hasOptionalArg();
        java.lang.String str21 = option19.getArgName();
        boolean boolean23 = option19.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = option19.toString();
        commandLine10.addOption(option19);
        java.lang.String[] strArray26 = commandLine10.getArgs();
        java.lang.String[] strArray28 = posixParser1.flatten(options8, strArray26, true);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.util.List list30 = options29.helpOptions();
        java.lang.String[] strArray31 = new java.lang.String[] {};
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser1.parse(options29, strArray31, properties32, false);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.getLongOpt();
        java.lang.String str45 = option39.getKey();
        java.lang.Object obj46 = option39.getType();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = options53.getOption("");
        option39.setType((java.lang.Object) options53);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        posixParser57.burstToken("", true);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.util.Collection collection62 = options61.getOptions();
        java.lang.String[] strArray63 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser57.parse(options61, strArray63, true);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        boolean boolean68 = options66.hasOption("hi!");
        boolean boolean70 = options66.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        java.lang.String[] strArray73 = commandLine71.getArgs();
        java.lang.String[] strArray75 = posixParser57.flatten(options66, strArray73, true);
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser1.parse(options53, strArray73, properties76, true);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options53, strArray79, true);
        java.lang.String str83 = commandLine81.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        commandLine81.addArg("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(optionBuilder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:    ::  ]" + "'", str24, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        java.lang.String str44 = commandLine42.getOptionValue('\000');
        boolean boolean46 = commandLine42.hasOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.String str48 = commandLine42.getOptionValue("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        posixParser10.burstToken("arg", true);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        boolean boolean74 = options72.hasOption("hi!");
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        java.util.Collection collection76 = options75.getOptions();
        org.apache.commons.cli.Option option81 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean82 = option81.hasArg();
        boolean boolean83 = option81.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup84 = options75.getOptionGroup(option81);
        org.apache.commons.cli.OptionGroup optionGroup85 = options72.getOptionGroup(option81);
        boolean boolean87 = options72.hasOption("arg");
        java.util.List list88 = options72.getRequiredOptions();
        org.apache.commons.cli.Option option90 = options72.getOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.CommandLine commandLine91 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray92 = commandLine91.getArgs();
        java.lang.String[] strArray93 = commandLine91.getArgs();
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser10.parse(options72, strArray93, properties94);
        java.util.Iterator iterator96 = commandLine95.iterator();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(collection76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(optionGroup84);
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertNull(option90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(iterator96);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        java.lang.String str70 = commandLine67.getOptionValue("[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.String[] strArray71 = commandLine67.getArgs();
        java.lang.String str74 = commandLine67.getOptionValue('a', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str74, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        boolean boolean12 = option6.hasArgs();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        option17.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = option28.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options41);
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine43.getArgs();
        java.lang.String[] strArray45 = commandLine43.getArgs();
        java.lang.Object obj47 = commandLine43.getOptionObject(' ');
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean56 = option52.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = option52.toString();
        commandLine43.addOption(option52);
        java.lang.String[] strArray59 = commandLine43.getArgs();
        java.lang.String[] strArray61 = posixParser34.flatten(options41, strArray59, true);
        boolean boolean62 = option28.equals((java.lang.Object) posixParser34);
        option17.setType((java.lang.Object) option28);
        boolean boolean64 = option6.equals((java.lang.Object) option17);
        boolean boolean65 = option17.isRequired();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionBuilder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.Object obj8 = option4.getType();
        option4.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean19 = option15.equals((java.lang.Object) (byte) 100);
        boolean boolean20 = option15.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        boolean boolean24 = options22.hasOption("hi!");
        org.apache.commons.cli.Options options28 = options22.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder29 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options28);
        org.apache.commons.cli.CommandLine commandLine30 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine30.getArgs();
        java.lang.String[] strArray32 = commandLine30.getArgs();
        java.lang.Object obj34 = commandLine30.getOptionObject(' ');
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.toString();
        commandLine30.addOption(option39);
        java.lang.String[] strArray46 = commandLine30.getArgs();
        java.lang.String[] strArray48 = posixParser21.flatten(options28, strArray46, true);
        boolean boolean49 = option15.equals((java.lang.Object) posixParser21);
        option4.setType((java.lang.Object) option15);
        java.lang.String str51 = option4.getValue();
        java.lang.String str52 = option4.getDescription();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(optionBuilder29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ option:    ::  ]" + "'", str44, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        java.lang.String str63 = options34.toString();
        java.util.Collection collection64 = options34.getOptions();
        java.util.List list65 = options34.getRequiredOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str63, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(list65);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        boolean boolean88 = option82.isRequired();
        java.lang.String str89 = option82.getKey();
        boolean boolean90 = option82.hasArgName();
        option82.setLongOpt("");
        boolean boolean93 = option82.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup94 = options53.getOptionGroup(option82);
        option82.setValueSeparator('a');
        java.lang.String str97 = option82.getOpt();
        char char98 = option82.getValueSeparator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(optionGroup94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertTrue("'" + char98 + "' != '" + 'a' + "'", char98 == 'a');
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        boolean boolean41 = options39.hasOption("hi!");
        boolean boolean43 = options39.hasOption("hi!");
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean49 = option48.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup50 = options39.getOptionGroup(option48);
        java.util.List list51 = options39.helpOptions();
        java.lang.String[] strArray52 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser10.parse(options39, strArray52, false);
        posixParser10.burstToken("[ option: arg   :: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ] :: -1 ]", false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(list51);
        org.junit.Assert.assertNotNull(commandLine54);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        boolean boolean35 = commandLine33.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list36 = commandLine33.getArgList();
        boolean boolean38 = commandLine33.hasOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        boolean boolean62 = option4.hasArgs();
        java.lang.String str63 = option4.toString();
        option4.setRequired(true);
        option4.setArgName("[ option: arg   :: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ] :: -1 ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[ option:    ::  :: [ option:    ::  ] ]" + "'", str63, "[ option:    ::  :: [ option:    ::  ] ]");
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean6 = option5.hasOptionalArg();
        java.lang.String str7 = option5.getArgName();
        boolean boolean9 = option5.equals((java.lang.Object) (byte) 100);
        boolean boolean10 = option5.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        boolean boolean14 = options12.hasOption("hi!");
        org.apache.commons.cli.Options options18 = options12.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder19 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options18);
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray21 = commandLine20.getArgs();
        java.lang.String[] strArray22 = commandLine20.getArgs();
        java.lang.Object obj24 = commandLine20.getOptionObject(' ');
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean30 = option29.hasOptionalArg();
        java.lang.String str31 = option29.getArgName();
        boolean boolean33 = option29.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = option29.toString();
        commandLine20.addOption(option29);
        java.lang.String[] strArray36 = commandLine20.getArgs();
        java.lang.String[] strArray38 = posixParser11.flatten(options18, strArray36, true);
        boolean boolean39 = option5.equals((java.lang.Object) posixParser11);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = null;
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser11.parse(options40, strArray41, properties42);
        boolean boolean45 = options40.hasOption("");
        java.lang.String str46 = options40.toString();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        boolean boolean50 = options48.hasOption("hi!");
        org.apache.commons.cli.Options options54 = options48.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder55 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options54);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        java.lang.String[] strArray58 = commandLine56.getArgs();
        java.lang.Object obj60 = commandLine56.getOptionObject(' ');
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean66 = option65.hasOptionalArg();
        java.lang.String str67 = option65.getArgName();
        boolean boolean69 = option65.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = option65.toString();
        commandLine56.addOption(option65);
        java.lang.String[] strArray72 = commandLine56.getArgs();
        java.lang.String[] strArray74 = posixParser47.flatten(options54, strArray72, true);
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        java.util.List list76 = options75.helpOptions();
        java.lang.String[] strArray77 = new java.lang.String[] {};
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser47.parse(options75, strArray77, properties78, false);
        java.lang.String[] strArray82 = posixParser0.flatten(options40, strArray77, false);
        boolean boolean84 = options40.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list85 = options40.getRequiredOptions();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(optionBuilder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ option:    ::  ]" + "'", str34, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str46, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNotNull(optionBuilder55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "arg" + "'", str67, "arg");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ option:    ::  ]" + "'", str70, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(list85);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        java.util.Iterator iterator61 = commandLine60.iterator();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine62.getArgs();
        commandLine62.addArg("");
        java.lang.String[] strArray67 = commandLine62.getOptionValues("hi!");
        java.lang.String[] strArray69 = commandLine62.getOptionValues("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str76 = option74.getValue((int) (byte) 10);
        org.apache.commons.cli.CommandLine commandLine77 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine77.getArgs();
        commandLine77.addArg("");
        java.util.List list81 = commandLine77.getArgList();
        commandLine77.addArg("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray84 = commandLine77.getOptions();
        boolean boolean85 = option74.equals((java.lang.Object) optionArray84);
        java.lang.String str86 = option74.getOpt();
        commandLine62.addOption(option74);
        commandLine60.addOption(option74);
        boolean boolean89 = option74.hasOptionalArg();
        java.lang.String str90 = option74.getArgName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(iterator61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(list81);
        org.junit.Assert.assertNotNull(optionArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "arg" + "'", str90, "arg");
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        java.util.Collection collection65 = options49.getOptions();
        java.util.Collection collection66 = options49.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options68 = options49.addOptionGroup(optionGroup67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(collection66);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        org.apache.commons.cli.Options options65 = options59.addOption("", false, "arg");
        java.lang.String str66 = options59.toString();
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean72 = option71.hasArg();
        boolean boolean73 = option71.isRequired();
        boolean boolean74 = option71.hasOptionalArg();
        java.lang.String str75 = option71.toString();
        org.apache.commons.cli.OptionGroup optionGroup76 = options59.getOptionGroup(option71);
        org.apache.commons.cli.Options options80 = options59.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.util.Collection collection81 = options59.getOptions();
        org.apache.commons.cli.Options options85 = options59.addOption("arg", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray87 = commandLine86.getArgs();
        java.lang.String[] strArray88 = commandLine86.getArgs();
        java.util.Iterator iterator89 = commandLine86.iterator();
        java.util.Iterator iterator90 = commandLine86.iterator();
        org.apache.commons.cli.OptionBuilder optionBuilder91 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine86);
        java.lang.String str93 = commandLine86.getOptionValue("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray94 = commandLine86.getArgs();
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options59, strArray94, properties95);
        java.lang.String[] strArray98 = commandLine96.getOptionValues("arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str66, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ option:    ::  ]" + "'", str75, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNotNull(iterator90);
        org.junit.Assert.assertNotNull(optionBuilder91);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(commandLine96);
        org.junit.Assert.assertNull(strArray98);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = null;
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        boolean boolean8 = options6.hasOption("hi!");
        org.apache.commons.cli.Options options12 = options6.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder13 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options12);
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray15 = commandLine14.getArgs();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        java.lang.Object obj18 = commandLine14.getOptionObject(' ');
        org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean24 = option23.hasOptionalArg();
        java.lang.String str25 = option23.getArgName();
        boolean boolean27 = option23.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = option23.toString();
        commandLine14.addOption(option23);
        java.lang.String[] strArray30 = commandLine14.getArgs();
        java.lang.String[] strArray32 = posixParser5.flatten(options12, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.util.List list34 = options33.helpOptions();
        java.lang.String[] strArray35 = new java.lang.String[] {};
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser5.parse(options33, strArray35, properties36, false);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        boolean boolean41 = options39.hasOption("hi!");
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        java.util.Collection collection43 = options42.getOptions();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean49 = option48.hasArg();
        boolean boolean50 = option48.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option48);
        org.apache.commons.cli.OptionGroup optionGroup52 = options39.getOptionGroup(option48);
        boolean boolean54 = options39.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser5.flatten(options39, strArray71, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine75 = posixParser0.parse(options4, strArray71, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(optionBuilder13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ option:    ::  ]" + "'", str28, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(collection43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        posixParser10.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!", true);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.CommandLine commandLine53 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine53.getArgs();
        commandLine53.addArg("");
        java.lang.String str59 = commandLine53.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray61 = commandLine53.getOptionValues("");
        java.lang.String str64 = commandLine53.getOptionValue("org.apache.commons.cli.MissingArgumentException: hi!", "");
        java.lang.Object obj66 = commandLine53.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        java.util.List list67 = commandLine53.getArgList();
        java.lang.Object obj69 = commandLine53.getOptionObject("");
        java.lang.String[] strArray70 = commandLine53.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser10.parse(options46, strArray70, properties71, false);
        org.apache.commons.cli.OptionGroup optionGroup74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options75 = options46.addOptionGroup(optionGroup74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str59, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.Object obj8 = option4.getType();
        option4.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean19 = option15.equals((java.lang.Object) (byte) 100);
        boolean boolean20 = option15.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        boolean boolean24 = options22.hasOption("hi!");
        org.apache.commons.cli.Options options28 = options22.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder29 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options28);
        org.apache.commons.cli.CommandLine commandLine30 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine30.getArgs();
        java.lang.String[] strArray32 = commandLine30.getArgs();
        java.lang.Object obj34 = commandLine30.getOptionObject(' ');
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.toString();
        commandLine30.addOption(option39);
        java.lang.String[] strArray46 = commandLine30.getArgs();
        java.lang.String[] strArray48 = posixParser21.flatten(options28, strArray46, true);
        boolean boolean49 = option15.equals((java.lang.Object) posixParser21);
        option4.setType((java.lang.Object) option15);
        char char51 = option15.getValueSeparator();
        boolean boolean52 = option15.hasLongOpt();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(optionBuilder29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ option:    ::  ]" + "'", str44, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + char51 + "' != '" + '\000' + "'", char51 == '\000');
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        boolean boolean70 = commandLine68.hasOption('#');
        java.lang.String[] strArray72 = commandLine68.getOptionValues('#');
        java.lang.Class<?> wildcardClass73 = commandLine68.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        boolean boolean6 = options4.hasOption("hi!");
        org.apache.commons.cli.Options options10 = options4.addOption("", false, "arg");
        java.util.Collection collection11 = options10.getOptions();
        java.util.List list12 = options10.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser13 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        boolean boolean16 = options14.hasOption("hi!");
        org.apache.commons.cli.Options options20 = options14.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder21 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options20);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray23 = commandLine22.getArgs();
        java.lang.String[] strArray24 = commandLine22.getArgs();
        java.lang.Object obj26 = commandLine22.getOptionObject(' ');
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean32 = option31.hasOptionalArg();
        java.lang.String str33 = option31.getArgName();
        boolean boolean35 = option31.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = option31.toString();
        commandLine22.addOption(option31);
        java.lang.String[] strArray38 = commandLine22.getArgs();
        java.lang.String[] strArray40 = posixParser13.flatten(options20, strArray38, true);
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        java.util.List list42 = options41.helpOptions();
        java.lang.String[] strArray43 = new java.lang.String[] {};
        java.util.Properties properties44 = null;
        org.apache.commons.cli.CommandLine commandLine46 = posixParser13.parse(options41, strArray43, properties44, false);
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser0.parse(options10, strArray43, properties47, true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(collection11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(optionBuilder21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[ option:    ::  ]" + "'", str36, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(list42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(commandLine49);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        posixParser28.burstToken("", true);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.util.Collection collection33 = options32.getOptions();
        java.lang.String[] strArray34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options32, strArray34, true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        boolean boolean41 = options37.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine42 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine42.getArgs();
        java.lang.String[] strArray44 = commandLine42.getArgs();
        java.lang.String[] strArray46 = posixParser28.flatten(options37, strArray44, true);
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options37, strArray47);
        org.apache.commons.cli.Options options49 = null;
        java.lang.String[] strArray50 = null;
        java.util.Properties properties51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine52 = posixParser0.parse(options49, strArray50, properties51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(collection33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        java.lang.String[] strArray43 = commandLine42.getArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        posixParser10.burstToken("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.util.List list10 = options4.helpOptions();
        java.lang.String str11 = options4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options16 = options4.addOption("[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]", "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]", true, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Option option10 = options4.getOption("");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNull(option10);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasArg();
        boolean boolean6 = option4.isRequired();
        boolean boolean7 = option4.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        posixParser8.burstToken("", true);
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.util.Collection collection13 = options12.getOptions();
        java.lang.String[] strArray14 = null;
        org.apache.commons.cli.CommandLine commandLine16 = posixParser8.parse(options12, strArray14, true);
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String str18 = options17.toString();
        org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean24 = option23.hasOptionalArg();
        java.lang.String str25 = option23.getArgName();
        boolean boolean26 = option23.hasOptionalArg();
        java.lang.Object obj27 = option23.getType();
        org.apache.commons.cli.OptionGroup optionGroup28 = options17.getOptionGroup(option23);
        boolean boolean30 = options17.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray35 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser8.parse(options17, strArray35, properties36);
        posixParser8.burstToken("[ option:    ::  :: [ option:    ::  ] ]", false);
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        java.util.List list42 = options41.helpOptions();
        java.util.List list43 = options41.helpOptions();
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder52 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options51);
        org.apache.commons.cli.CommandLine commandLine53 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine53.getArgs();
        java.lang.String[] strArray55 = commandLine53.getArgs();
        java.lang.Object obj57 = commandLine53.getOptionObject(' ');
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean63 = option62.hasOptionalArg();
        java.lang.String str64 = option62.getArgName();
        boolean boolean66 = option62.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = option62.toString();
        commandLine53.addOption(option62);
        java.lang.String[] strArray69 = commandLine53.getArgs();
        java.lang.String[] strArray71 = posixParser44.flatten(options51, strArray69, true);
        org.apache.commons.cli.CommandLine commandLine72 = posixParser8.parse(options41, strArray71);
        option4.setType((java.lang.Object) strArray71);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertNotNull(commandLine16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str18, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(list42);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(optionBuilder52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ option:    ::  ]" + "'", str67, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine72);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        java.util.List list72 = options39.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list72);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        posixParser10.burstToken("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        boolean boolean13 = options9.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray15 = commandLine14.getArgs();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        java.lang.String[] strArray18 = posixParser0.flatten(options9, strArray16, true);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false);
        org.apache.commons.cli.Options options22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray24 = commandLine23.getArgs();
        commandLine23.addArg("");
        java.lang.String[] strArray28 = commandLine23.getOptionValues("hi!");
        boolean boolean30 = commandLine23.hasOption("arg");
        java.lang.String[] strArray32 = commandLine23.getOptionValues(' ');
        java.lang.String[] strArray33 = commandLine23.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine34 = posixParser0.parse(options22, strArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        java.util.List list33 = options28.helpOptions();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.util.List list56 = options55.getRequiredOptions();
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean62 = option61.hasOptionalArg();
        option61.setArgName("");
        boolean boolean65 = option61.hasOptionalArg();
        int int66 = option61.getArgs();
        boolean boolean67 = option61.hasLongOpt();
        org.apache.commons.cli.OptionGroup optionGroup68 = options55.getOptionGroup(option61);
        option61.setRequired(true);
        org.apache.commons.cli.Options options71 = options28.addOption(option61);
        java.lang.String str72 = option61.getArgName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        java.lang.Object obj52 = null;
        boolean boolean53 = option38.equals(obj52);
        option38.setArgs((int) (short) 0);
        option38.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        option38.setArgs(1);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = option38.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        boolean boolean62 = option4.hasArgs();
        java.lang.String str63 = option4.toString();
        option4.setOptionalArg(true);
        java.lang.String str66 = option4.getOpt();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[ option:    ::  :: [ option:    ::  ] ]" + "'", str63, "[ option:    ::  :: [ option:    ::  ] ]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.lang.String str10 = options4.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean19 = option15.equals((java.lang.Object) (byte) 100);
        org.apache.commons.cli.Options options20 = options4.addOption(option15);
        org.apache.commons.cli.OptionBuilder optionBuilder21 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option15);
        option15.setOptionalArg(false);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(optionBuilder21);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean12 = option11.hasOptionalArg();
        java.lang.String str13 = option11.getArgName();
        boolean boolean15 = option11.equals((java.lang.Object) (byte) 100);
        boolean boolean16 = option11.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser17 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.CommandLine commandLine26 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray27 = commandLine26.getArgs();
        java.lang.String[] strArray28 = commandLine26.getArgs();
        java.lang.Object obj30 = commandLine26.getOptionObject(' ');
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean36 = option35.hasOptionalArg();
        java.lang.String str37 = option35.getArgName();
        boolean boolean39 = option35.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = option35.toString();
        commandLine26.addOption(option35);
        java.lang.String[] strArray42 = commandLine26.getArgs();
        java.lang.String[] strArray44 = posixParser17.flatten(options24, strArray42, true);
        boolean boolean45 = option11.equals((java.lang.Object) posixParser17);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = null;
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser17.parse(options46, strArray47, properties48);
        boolean boolean51 = options46.hasOption("");
        java.lang.String str52 = options46.toString();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        boolean boolean56 = options54.hasOption("hi!");
        org.apache.commons.cli.Options options60 = options54.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder61 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options60);
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine62.getArgs();
        java.lang.String[] strArray64 = commandLine62.getArgs();
        java.lang.Object obj66 = commandLine62.getOptionObject(' ');
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean72 = option71.hasOptionalArg();
        java.lang.String str73 = option71.getArgName();
        boolean boolean75 = option71.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = option71.toString();
        commandLine62.addOption(option71);
        java.lang.String[] strArray78 = commandLine62.getArgs();
        java.lang.String[] strArray80 = posixParser53.flatten(options60, strArray78, true);
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        java.util.List list82 = options81.helpOptions();
        java.lang.String[] strArray83 = new java.lang.String[] {};
        java.util.Properties properties84 = null;
        org.apache.commons.cli.CommandLine commandLine86 = posixParser53.parse(options81, strArray83, properties84, false);
        java.lang.String[] strArray88 = posixParser6.flatten(options46, strArray83, false);
        posixParser6.burstToken("org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]", false);
        option4.setType((java.lang.Object) posixParser6);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "arg" + "'", str37, "arg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ option:    ::  ]" + "'", str40, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str52, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(optionBuilder61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[ option:    ::  ]" + "'", str76, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        java.lang.String[] strArray31 = commandLine29.getOptionValues('4');
        java.util.Iterator iterator32 = commandLine29.iterator();
        java.lang.String str34 = commandLine29.getOptionValue('a');
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        java.util.Collection collection65 = options49.getOptions();
        java.util.List list66 = options49.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(list66);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean6 = option5.hasOptionalArg();
        java.lang.String str7 = option5.getArgName();
        boolean boolean9 = option5.equals((java.lang.Object) (byte) 100);
        boolean boolean10 = option5.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        boolean boolean14 = options12.hasOption("hi!");
        org.apache.commons.cli.Options options18 = options12.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder19 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options18);
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray21 = commandLine20.getArgs();
        java.lang.String[] strArray22 = commandLine20.getArgs();
        java.lang.Object obj24 = commandLine20.getOptionObject(' ');
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean30 = option29.hasOptionalArg();
        java.lang.String str31 = option29.getArgName();
        boolean boolean33 = option29.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = option29.toString();
        commandLine20.addOption(option29);
        java.lang.String[] strArray36 = commandLine20.getArgs();
        java.lang.String[] strArray38 = posixParser11.flatten(options18, strArray36, true);
        boolean boolean39 = option5.equals((java.lang.Object) posixParser11);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = null;
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser11.parse(options40, strArray41, properties42);
        boolean boolean45 = options40.hasOption("");
        org.apache.commons.cli.CommandLine commandLine46 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray47 = commandLine46.getArgs();
        commandLine46.addArg("");
        java.lang.String str52 = commandLine46.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray54 = commandLine46.getOptionValues("");
        java.lang.String str57 = commandLine46.getOptionValue("org.apache.commons.cli.MissingArgumentException: hi!", "");
        java.lang.String[] strArray58 = commandLine46.getArgs();
        java.lang.String[] strArray60 = posixParser0.flatten(options40, strArray58, true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(optionBuilder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ option:    ::  ]" + "'", str34, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str52, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.lang.String str62 = options61.toString();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean68 = option67.hasOptionalArg();
        java.lang.String str69 = option67.getArgName();
        boolean boolean70 = option67.hasOptionalArg();
        java.lang.Object obj71 = option67.getType();
        org.apache.commons.cli.OptionGroup optionGroup72 = options61.getOptionGroup(option67);
        boolean boolean74 = options61.hasOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean76 = options61.hasOption("[ option:    :: hi! ]");
        org.apache.commons.cli.Option option81 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean82 = option81.hasOptionalArg();
        java.lang.String str83 = option81.getArgName();
        boolean boolean85 = option81.equals((java.lang.Object) (byte) 100);
        java.lang.String str86 = option81.toString();
        option81.setArgs((int) (byte) 1);
        java.lang.String str89 = option81.getKey();
        option81.addValue("");
        boolean boolean92 = option81.hasArgs();
        java.lang.String str93 = option81.getValue();
        java.lang.String str94 = option81.getLongOpt();
        java.lang.String[] strArray95 = option81.getValues();
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options61, strArray95);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: arg", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str62, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "arg" + "'", str69, "arg");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "arg" + "'", str83, "arg");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[ option:    ::  ]" + "'", str86, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        boolean boolean82 = options78.hasOption("hi!");
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup89 = options78.getOptionGroup(option87);
        java.lang.Object obj90 = option87.getType();
        commandLine77.addOption(option87);
        java.lang.String str94 = commandLine77.getOptionValue('\000', "[ Options: [ short {} ] [ long {} ]");
        java.lang.String str96 = commandLine77.getOptionValue('\000');
        java.lang.String str99 = commandLine77.getOptionValue("[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str94, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str99, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        boolean boolean62 = option4.hasArgs();
        int int63 = option4.getArgs();
        int int64 = option4.getArgs();
        java.lang.String str65 = option4.getOpt();
        java.lang.String str67 = option4.getValue((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        boolean boolean82 = options78.hasOption("hi!");
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup89 = options78.getOptionGroup(option87);
        java.lang.Object obj90 = option87.getType();
        commandLine77.addOption(option87);
        option87.setRequired(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        boolean boolean12 = options10.hasOption("hi!");
        org.apache.commons.cli.Options options16 = options10.addOption("", false, "arg");
        org.apache.commons.cli.Option option18 = options16.getOption("");
        java.lang.String[] strArray24 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine26 = posixParser9.parse(options16, strArray24, false);
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        boolean boolean31 = options27.hasOption("hi!");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean37 = option36.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup38 = options27.getOptionGroup(option36);
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean46 = option43.hasOptionalArg();
        java.lang.Object obj47 = option43.getType();
        option43.setArgs((int) (byte) -1);
        java.lang.String str50 = option43.getArgName();
        org.apache.commons.cli.Options options51 = options27.addOption(option43);
        org.apache.commons.cli.Options options52 = options16.addOption(option43);
        org.apache.commons.cli.Option option54 = options52.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        boolean boolean58 = options56.hasOption("hi!");
        org.apache.commons.cli.Options options62 = options56.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder63 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options62);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.Object obj68 = commandLine64.getOptionObject(' ');
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = option73.toString();
        commandLine64.addOption(option73);
        java.lang.String[] strArray80 = commandLine64.getArgs();
        java.lang.String[] strArray82 = posixParser55.flatten(options62, strArray80, true);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray85 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine87 = posixParser55.parse(options83, strArray85, true);
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser0.parse(options52, strArray85, properties88);
        org.apache.commons.cli.Option option91 = options52.getOption("");
        java.lang.String str92 = option91.getDescription();
        boolean boolean93 = option91.hasOptionalArg();
        boolean boolean94 = option91.hasValueSeparator();
        java.util.List list95 = option91.getValuesList();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "arg" + "'", str50, "arg");
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNull(option54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(optionBuilder63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:    ::  ]" + "'", str78, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(option91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(list95);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options21 = options7.addOption("[ Options: [ short {} ] [ long {} ]", false, "arg");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options82 = options53.addOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        java.lang.String str60 = commandLine58.getOptionValue('a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        boolean boolean12 = option6.hasArgs();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        option17.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = option28.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options41);
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine43.getArgs();
        java.lang.String[] strArray45 = commandLine43.getArgs();
        java.lang.Object obj47 = commandLine43.getOptionObject(' ');
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean56 = option52.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = option52.toString();
        commandLine43.addOption(option52);
        java.lang.String[] strArray59 = commandLine43.getArgs();
        java.lang.String[] strArray61 = posixParser34.flatten(options41, strArray59, true);
        boolean boolean62 = option28.equals((java.lang.Object) posixParser34);
        option17.setType((java.lang.Object) option28);
        boolean boolean64 = option6.equals((java.lang.Object) option17);
        boolean boolean65 = option6.hasOptionalArg();
        boolean boolean66 = option6.hasArgs();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionBuilder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasOption("hi!");
        org.apache.commons.cli.Options options6 = options0.addOption("", false, "arg");
        org.apache.commons.cli.Option option8 = options6.getOption("");
        int int9 = option8.getArgs();
        boolean boolean10 = option8.hasArgName();
        char char11 = option8.getValueSeparator();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        boolean boolean15 = options13.hasOption("hi!");
        org.apache.commons.cli.Options options19 = options13.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder20 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options19);
        org.apache.commons.cli.CommandLine commandLine21 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine21.getArgs();
        java.lang.String[] strArray23 = commandLine21.getArgs();
        java.lang.Object obj25 = commandLine21.getOptionObject(' ');
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean31 = option30.hasOptionalArg();
        java.lang.String str32 = option30.getArgName();
        boolean boolean34 = option30.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = option30.toString();
        commandLine21.addOption(option30);
        java.lang.String[] strArray37 = commandLine21.getArgs();
        java.lang.String[] strArray39 = posixParser12.flatten(options19, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.util.List list41 = options40.helpOptions();
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine45 = posixParser12.parse(options40, strArray42, properties43, false);
        boolean boolean46 = option8.equals((java.lang.Object) commandLine45);
        java.lang.String str47 = option8.getOpt();
        java.lang.Object obj48 = option8.getType();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.util.Iterator iterator58 = commandLine57.iterator();
        java.lang.Object obj60 = commandLine57.getOptionObject('4');
        boolean boolean61 = option8.equals(obj60);
        boolean boolean62 = option8.hasArgName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(optionBuilder20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[ option:    ::  ]" + "'", str35, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(iterator58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean70 = option69.hasOptionalArg();
        option69.setArgName("");
        boolean boolean73 = option69.hasOptionalArg();
        char char74 = option69.getValueSeparator();
        boolean boolean75 = option69.isRequired();
        org.apache.commons.cli.Options options76 = options49.addOption(option69);
        java.lang.String str77 = options76.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + char74 + "' != '" + '\000' + "'", char74 == '\000');
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str77, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        boolean boolean88 = option82.isRequired();
        java.lang.String str89 = option82.getKey();
        boolean boolean90 = option82.hasArgName();
        option82.setLongOpt("");
        boolean boolean93 = option82.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup94 = options53.getOptionGroup(option82);
        option82.setArgName("");
        java.lang.String str97 = option82.getKey();
        java.lang.String[] strArray98 = option82.getValues();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(optionGroup94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNull(strArray98);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        java.lang.String str63 = options34.toString();
        org.apache.commons.cli.Option option65 = options34.getOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list66 = options34.getRequiredOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str63, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(option65);
        org.junit.Assert.assertNotNull(list66);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        option4.setLongOpt("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        option15.setArgName("");
        boolean boolean19 = option15.hasOptionalArg();
        int int20 = option15.getArgs();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean28 = option25.hasOptionalArg();
        java.lang.Object obj29 = option25.getType();
        option25.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean37 = option36.hasOptionalArg();
        java.lang.String str38 = option36.getArgName();
        boolean boolean40 = option36.equals((java.lang.Object) (byte) 100);
        boolean boolean41 = option36.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        boolean boolean45 = options43.hasOption("hi!");
        org.apache.commons.cli.Options options49 = options43.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder50 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options49);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine51.getArgs();
        java.lang.String[] strArray53 = commandLine51.getArgs();
        java.lang.Object obj55 = commandLine51.getOptionObject(' ');
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean61 = option60.hasOptionalArg();
        java.lang.String str62 = option60.getArgName();
        boolean boolean64 = option60.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = option60.toString();
        commandLine51.addOption(option60);
        java.lang.String[] strArray67 = commandLine51.getArgs();
        java.lang.String[] strArray69 = posixParser42.flatten(options49, strArray67, true);
        boolean boolean70 = option36.equals((java.lang.Object) posixParser42);
        option25.setType((java.lang.Object) option36);
        option15.setType((java.lang.Object) option36);
        option36.setArgs(0);
        option4.setType((java.lang.Object) option36);
        boolean boolean76 = option36.hasValueSeparator();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "arg" + "'", str38, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(optionBuilder50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "arg" + "'", str62, "arg");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ option:    ::  ]" + "'", str65, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        org.apache.commons.cli.Options options78 = null;
        java.lang.String[] strArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options78, strArray79, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String str70 = options69.toString();
        java.util.List list71 = options69.helpOptions();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine72.getArgs();
        java.lang.String[] strArray74 = commandLine72.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser10.parse(options69, strArray74, properties75, false);
        java.lang.String[] strArray79 = commandLine77.getOptionValues("[ option:    :: hi! ]");
        java.lang.String str82 = commandLine77.getOptionValue('#', "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        boolean boolean84 = commandLine77.hasOption("");
        java.lang.Object obj86 = commandLine77.getOptionObject('a');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str70, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str82, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Option option19 = options7.getOption("");
        java.lang.String str20 = options7.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        java.lang.String str64 = option25.getKey();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        java.util.Iterator iterator61 = commandLine60.iterator();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine62.getArgs();
        commandLine62.addArg("");
        java.lang.String[] strArray67 = commandLine62.getOptionValues("hi!");
        java.lang.String[] strArray69 = commandLine62.getOptionValues("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str76 = option74.getValue((int) (byte) 10);
        org.apache.commons.cli.CommandLine commandLine77 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine77.getArgs();
        commandLine77.addArg("");
        java.util.List list81 = commandLine77.getArgList();
        commandLine77.addArg("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray84 = commandLine77.getOptions();
        boolean boolean85 = option74.equals((java.lang.Object) optionArray84);
        java.lang.String str86 = option74.getOpt();
        commandLine62.addOption(option74);
        commandLine60.addOption(option74);
        java.lang.String[] strArray90 = commandLine60.getOptionValues("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(iterator61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(list81);
        org.junit.Assert.assertNotNull(optionArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNull(strArray90);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        boolean boolean41 = options39.hasOption("hi!");
        boolean boolean43 = options39.hasOption("hi!");
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean49 = option48.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup50 = options39.getOptionGroup(option48);
        java.util.List list51 = options39.helpOptions();
        java.lang.String[] strArray52 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser10.parse(options39, strArray52, false);
        posixParser10.burstToken("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", true);
        org.apache.commons.cli.Options options58 = null;
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        commandLine59.addArg("");
        java.lang.String str65 = commandLine59.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str68 = commandLine59.getOptionValue('a', "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj70 = commandLine59.getOptionObject("org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean72 = commandLine59.hasOption(' ');
        java.lang.String[] strArray73 = commandLine59.getArgs();
        java.lang.String[] strArray75 = posixParser10.flatten(options58, strArray73, true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(list51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str65, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str68, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.lang.String str20 = commandLine17.getOptionValue("", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.Object obj22 = commandLine17.getOptionObject("");
        java.lang.Object obj24 = commandLine17.getOptionObject("hi!");
        java.lang.Object obj26 = commandLine17.getOptionObject('a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        java.util.Collection collection81 = options80.getOptions();
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasArg();
        boolean boolean88 = option86.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup89 = options80.getOptionGroup(option86);
        org.apache.commons.cli.OptionGroup optionGroup90 = options77.getOptionGroup(option86);
        boolean boolean91 = option86.hasLongOpt();
        java.lang.String str93 = option86.getValue((-2));
        option86.setDescription("");
        org.apache.commons.cli.Options options96 = options43.addOption(option86);
        org.apache.commons.cli.Option option98 = options96.getOption("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(options96);
        org.junit.Assert.assertNull(option98);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        org.apache.commons.cli.Options options71 = options65.addOption("", false, "arg");
        java.util.Collection collection72 = options71.getOptions();
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        posixParser73.burstToken("", true);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        java.util.Collection collection78 = options77.getOptions();
        java.lang.String[] strArray79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser73.parse(options77, strArray79, true);
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        boolean boolean84 = options82.hasOption("hi!");
        boolean boolean86 = options82.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine87 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine87.getArgs();
        java.lang.String[] strArray89 = commandLine87.getArgs();
        java.lang.String[] strArray91 = posixParser73.flatten(options82, strArray89, true);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options71, strArray89, properties92);
        boolean boolean95 = commandLine93.hasOption(' ');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean54 = option53.hasArg();
        boolean boolean55 = option53.isRequired();
        boolean boolean56 = option53.hasOptionalArg();
        java.lang.String str57 = option53.toString();
        java.lang.String str58 = option53.getOpt();
        java.lang.String[] strArray59 = option53.getValues();
        org.apache.commons.cli.Options options60 = options18.addOption(option53);
        boolean boolean62 = options60.hasOption("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        java.util.Collection collection81 = options80.getOptions();
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasArg();
        boolean boolean88 = option86.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup89 = options80.getOptionGroup(option86);
        org.apache.commons.cli.OptionGroup optionGroup90 = options77.getOptionGroup(option86);
        boolean boolean91 = option86.hasLongOpt();
        java.lang.String str93 = option86.getValue((-2));
        option86.setDescription("");
        org.apache.commons.cli.Options options96 = options43.addOption(option86);
        java.lang.String str97 = option86.getArgName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(options96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "arg" + "'", str97, "arg");
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        boolean boolean13 = options9.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray15 = commandLine14.getArgs();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        java.lang.String[] strArray18 = posixParser0.flatten(options9, strArray16, true);
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        boolean boolean22 = options20.hasOption("hi!");
        org.apache.commons.cli.Options options26 = options20.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder27 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options26);
        org.apache.commons.cli.CommandLine commandLine28 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray29 = commandLine28.getArgs();
        java.lang.String[] strArray30 = commandLine28.getArgs();
        java.lang.Object obj32 = commandLine28.getOptionObject(' ');
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean38 = option37.hasOptionalArg();
        java.lang.String str39 = option37.getArgName();
        boolean boolean41 = option37.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = option37.toString();
        commandLine28.addOption(option37);
        java.lang.String[] strArray44 = commandLine28.getArgs();
        java.lang.String[] strArray46 = posixParser19.flatten(options26, strArray44, true);
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        posixParser47.burstToken("", true);
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        java.util.Collection collection52 = options51.getOptions();
        java.lang.String[] strArray53 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser47.parse(options51, strArray53, true);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        boolean boolean58 = options56.hasOption("hi!");
        boolean boolean60 = options56.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine61 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine61.getArgs();
        java.lang.String[] strArray63 = commandLine61.getArgs();
        java.lang.String[] strArray65 = posixParser47.flatten(options56, strArray63, true);
        java.lang.String[] strArray66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser19.parse(options56, strArray66);
        boolean boolean69 = options56.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.Object obj74 = commandLine70.getOptionObject(' ');
        org.apache.commons.cli.Option option79 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean80 = option79.hasOptionalArg();
        java.lang.String str81 = option79.getArgName();
        boolean boolean83 = option79.equals((java.lang.Object) (byte) 100);
        java.lang.String str84 = option79.toString();
        commandLine70.addOption(option79);
        java.lang.String[] strArray86 = commandLine70.getArgs();
        java.lang.String[] strArray88 = posixParser0.flatten(options56, strArray86, false);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(optionBuilder27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ option:    ::  ]" + "'", str42, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(collection52);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "arg" + "'", str81, "arg");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[ option:    ::  ]" + "'", str84, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        posixParser0.burstToken("[ option:    ::  :: [ option:    ::  ] ]", false);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        posixParser33.burstToken("", true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        java.lang.String[] strArray39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options37, strArray39, true);
        java.util.Collection collection42 = options37.getOptionGroups();
        java.lang.String str43 = options37.toString();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.util.Collection collection45 = options44.getOptions();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean51 = option50.hasArg();
        boolean boolean52 = option50.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option50);
        org.apache.commons.cli.Options options54 = options37.addOption(option50);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        boolean boolean58 = options56.hasOption("hi!");
        org.apache.commons.cli.Options options62 = options56.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder63 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options62);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.Object obj68 = commandLine64.getOptionObject(' ');
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = option73.toString();
        commandLine64.addOption(option73);
        java.lang.String[] strArray80 = commandLine64.getArgs();
        java.lang.String[] strArray82 = posixParser55.flatten(options62, strArray80, true);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options54, strArray80, properties83);
        java.lang.String[] strArray86 = commandLine84.getOptionValues('a');
        java.lang.Object obj88 = commandLine84.getOptionObject('a');
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str43, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(optionBuilder63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:    ::  ]" + "'", str78, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        org.apache.commons.cli.Options options71 = options65.addOption("", false, "arg");
        java.util.Collection collection72 = options71.getOptions();
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        posixParser73.burstToken("", true);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        java.util.Collection collection78 = options77.getOptions();
        java.lang.String[] strArray79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser73.parse(options77, strArray79, true);
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        boolean boolean84 = options82.hasOption("hi!");
        boolean boolean86 = options82.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine87 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine87.getArgs();
        java.lang.String[] strArray89 = commandLine87.getArgs();
        java.lang.String[] strArray91 = posixParser73.flatten(options82, strArray89, true);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options71, strArray89, properties92);
        org.apache.commons.cli.OptionGroup optionGroup94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options95 = options71.addOptionGroup(optionGroup94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        boolean boolean80 = option73.hasArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean75 = option74.hasOptionalArg();
        java.lang.String str76 = option74.getArgName();
        boolean boolean77 = option74.hasArgs();
        org.apache.commons.cli.OptionGroup optionGroup78 = options39.getOptionGroup(option74);
        org.apache.commons.cli.Option option80 = options39.getOption("[ option:   :: hi! ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "arg" + "'", str76, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertNull(option80);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean38 = option37.hasOptionalArg();
        java.lang.String str39 = option37.getArgName();
        boolean boolean40 = option37.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        org.apache.commons.cli.Options options48 = options42.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder49 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options48);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine50.getArgs();
        java.lang.String[] strArray52 = commandLine50.getArgs();
        java.lang.Object obj54 = commandLine50.getOptionObject(' ');
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = option59.toString();
        commandLine50.addOption(option59);
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.lang.String[] strArray68 = posixParser41.flatten(options48, strArray66, true);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.util.List list70 = options69.helpOptions();
        java.lang.String[] strArray71 = new java.lang.String[] {};
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser41.parse(options69, strArray71, properties72, false);
        boolean boolean75 = option37.equals((java.lang.Object) false);
        org.apache.commons.cli.Options options76 = options28.addOption(option37);
        org.apache.commons.cli.Option option78 = options76.getOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.OptionGroup optionGroup79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options80 = options76.addOptionGroup(optionGroup79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionBuilder49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option:    ::  ]" + "'", str64, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNull(option78);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        commandLine77.addOption(option82);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = option82.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        org.apache.commons.cli.Option option83 = new org.apache.commons.cli.Option("", false, "hi!");
        commandLine68.addOption(option83);
        org.apache.commons.cli.CommandLine commandLine85 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray86 = commandLine85.getArgs();
        java.lang.String[] strArray87 = commandLine85.getArgs();
        java.util.Iterator iterator88 = commandLine85.iterator();
        boolean boolean89 = option83.equals((java.lang.Object) iterator88);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(iterator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        posixParser10.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!", true);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.CommandLine commandLine53 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine53.getArgs();
        commandLine53.addArg("");
        java.lang.String str59 = commandLine53.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray61 = commandLine53.getOptionValues("");
        java.lang.String str64 = commandLine53.getOptionValue("org.apache.commons.cli.MissingArgumentException: hi!", "");
        java.lang.Object obj66 = commandLine53.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        java.util.List list67 = commandLine53.getArgList();
        java.lang.Object obj69 = commandLine53.getOptionObject("");
        java.lang.String[] strArray70 = commandLine53.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser10.parse(options46, strArray70, properties71, false);
        posixParser10.burstToken("org.apache.commons.cli.MissingArgumentException: hi!", false);
        org.apache.commons.cli.Options options77 = null;
        org.apache.commons.cli.CommandLine commandLine78 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray79 = commandLine78.getArgs();
        org.apache.commons.cli.OptionBuilder optionBuilder80 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) strArray79);
        java.lang.String[] strArray82 = posixParser10.flatten(options77, strArray79, false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str59, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(optionBuilder80);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean54 = option53.hasArg();
        boolean boolean55 = option53.isRequired();
        boolean boolean56 = option53.hasOptionalArg();
        java.lang.String str57 = option53.toString();
        java.lang.String str58 = option53.getOpt();
        java.lang.String[] strArray59 = option53.getValues();
        org.apache.commons.cli.Options options60 = options18.addOption(option53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options64 = options18.addOption("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]", true, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertNotNull(options60);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options31 = new org.apache.commons.cli.Options();
        boolean boolean33 = options31.hasOption("hi!");
        org.apache.commons.cli.Options options37 = options31.addOption("", false, "arg");
        org.apache.commons.cli.Option option39 = options37.getOption("");
        java.lang.String[] strArray45 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine47 = posixParser30.parse(options37, strArray45, false);
        org.apache.commons.cli.Option option49 = options37.getOption("");
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean55 = option54.hasOptionalArg();
        java.lang.String str56 = option54.getArgName();
        boolean boolean57 = option54.hasOptionalArg();
        java.lang.Object obj58 = option54.getType();
        option54.setArgs((int) (byte) -1);
        java.lang.String str61 = option54.getArgName();
        boolean boolean62 = option54.hasOptionalArg();
        java.lang.String str64 = option54.getValue((int) (short) 0);
        java.lang.String str65 = option54.getOpt();
        org.apache.commons.cli.OptionGroup optionGroup66 = options37.getOptionGroup(option54);
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine67.getArgs();
        org.apache.commons.cli.OptionBuilder optionBuilder69 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) strArray68);
        java.lang.String[] strArray71 = posixParser0.flatten(options37, strArray68, true);
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean77 = option76.hasOptionalArg();
        java.lang.String str78 = option76.getArgName();
        boolean boolean80 = option76.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = option76.toString();
        java.lang.String[] strArray82 = option76.getValues();
        java.util.ListIterator listIterator83 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option76, listIterator83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(optionBuilder69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ option:    ::  ]" + "'", str81, "[ option:    ::  ]");
        org.junit.Assert.assertNull(strArray82);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        java.util.List list33 = options28.helpOptions();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.util.List list56 = options55.getRequiredOptions();
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean62 = option61.hasOptionalArg();
        option61.setArgName("");
        boolean boolean65 = option61.hasOptionalArg();
        int int66 = option61.getArgs();
        boolean boolean67 = option61.hasLongOpt();
        org.apache.commons.cli.OptionGroup optionGroup68 = options55.getOptionGroup(option61);
        option61.setRequired(true);
        org.apache.commons.cli.Options options71 = options28.addOption(option61);
        java.util.List list72 = options71.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(list72);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Option option19 = options7.getOption("");
        org.apache.commons.cli.Option option21 = options7.getOption("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertNotNull(option21);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        boolean boolean13 = options9.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray15 = commandLine14.getArgs();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        java.lang.String[] strArray18 = posixParser0.flatten(options9, strArray16, true);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        boolean boolean25 = options23.hasOption("hi!");
        org.apache.commons.cli.Options options29 = options23.addOption("", false, "arg");
        org.apache.commons.cli.Option option31 = options29.getOption("");
        java.lang.String[] strArray37 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine39 = posixParser22.parse(options29, strArray37, false);
        org.apache.commons.cli.Option option41 = options29.getOption("");
        option41.setArgName("[ option:    ::  ]");
        boolean boolean44 = option41.hasArg();
        java.util.ListIterator listIterator45 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option41, listIterator45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(option31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        boolean boolean41 = options37.hasOption("hi!");
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup48 = options37.getOptionGroup(option46);
        boolean boolean50 = options37.hasOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list51 = options37.helpOptions();
        org.apache.commons.cli.Option option53 = options37.getOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        boolean boolean57 = options55.hasOption("hi!");
        org.apache.commons.cli.Options options61 = options55.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder62 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options61);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine63.getArgs();
        java.lang.String[] strArray65 = commandLine63.getArgs();
        java.lang.Object obj67 = commandLine63.getOptionObject(' ');
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean73 = option72.hasOptionalArg();
        java.lang.String str74 = option72.getArgName();
        boolean boolean76 = option72.equals((java.lang.Object) (byte) 100);
        java.lang.String str77 = option72.toString();
        commandLine63.addOption(option72);
        java.lang.String[] strArray79 = commandLine63.getArgs();
        java.lang.String[] strArray81 = posixParser54.flatten(options61, strArray79, true);
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray84 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine86 = posixParser54.parse(options82, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options37, strArray84, true);
        org.apache.commons.cli.Options options89 = null;
        java.lang.String[] strArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options89, strArray90, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(list51);
        org.junit.Assert.assertNull(option53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(optionBuilder62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "arg" + "'", str74, "arg");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ option:    ::  ]" + "'", str77, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(commandLine88);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        org.apache.commons.cli.Options options71 = options65.addOption("", false, "arg");
        java.util.Collection collection72 = options71.getOptions();
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        posixParser73.burstToken("", true);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        java.util.Collection collection78 = options77.getOptions();
        java.lang.String[] strArray79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser73.parse(options77, strArray79, true);
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        boolean boolean84 = options82.hasOption("hi!");
        boolean boolean86 = options82.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine87 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine87.getArgs();
        java.lang.String[] strArray89 = commandLine87.getArgs();
        java.lang.String[] strArray91 = posixParser73.flatten(options82, strArray89, true);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options71, strArray89, properties92);
        java.lang.String[] strArray95 = commandLine93.getOptionValues("[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray96 = commandLine93.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNull(strArray95);
        org.junit.Assert.assertNotNull(optionArray96);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        java.lang.String str50 = options49.toString();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean56 = option55.hasOptionalArg();
        java.lang.String str57 = option55.getArgName();
        boolean boolean58 = option55.hasOptionalArg();
        java.lang.Object obj59 = option55.getType();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option55);
        org.apache.commons.cli.Options options64 = options49.addOption("", false, "");
        java.lang.String[] strArray65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options49, strArray65, false);
        java.lang.Class<?> wildcardClass68 = options49.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str50, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        java.lang.String str80 = option73.getKey();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.Object obj8 = option4.getType();
        option4.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean19 = option15.equals((java.lang.Object) (byte) 100);
        boolean boolean20 = option15.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        boolean boolean24 = options22.hasOption("hi!");
        org.apache.commons.cli.Options options28 = options22.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder29 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options28);
        org.apache.commons.cli.CommandLine commandLine30 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine30.getArgs();
        java.lang.String[] strArray32 = commandLine30.getArgs();
        java.lang.Object obj34 = commandLine30.getOptionObject(' ');
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.toString();
        commandLine30.addOption(option39);
        java.lang.String[] strArray46 = commandLine30.getArgs();
        java.lang.String[] strArray48 = posixParser21.flatten(options28, strArray46, true);
        boolean boolean49 = option15.equals((java.lang.Object) posixParser21);
        option4.setType((java.lang.Object) option15);
        boolean boolean51 = option15.hasArg();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(optionBuilder29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ option:    ::  ]" + "'", str44, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        java.util.List list65 = options49.getRequiredOptions();
        java.util.Collection collection66 = options49.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNotNull(collection66);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        posixParser10.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!", true);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.CommandLine commandLine53 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine53.getArgs();
        commandLine53.addArg("");
        java.lang.String str59 = commandLine53.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray61 = commandLine53.getOptionValues("");
        java.lang.String str64 = commandLine53.getOptionValue("org.apache.commons.cli.MissingArgumentException: hi!", "");
        java.lang.Object obj66 = commandLine53.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        java.util.List list67 = commandLine53.getArgList();
        java.lang.Object obj69 = commandLine53.getOptionObject("");
        java.lang.String[] strArray70 = commandLine53.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser10.parse(options46, strArray70, properties71, false);
        org.apache.commons.cli.PosixParser posixParser74 = new org.apache.commons.cli.PosixParser();
        posixParser74.burstToken("", true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        java.util.Collection collection79 = options78.getOptions();
        java.lang.String[] strArray80 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser74.parse(options78, strArray80, true);
        java.util.Collection collection83 = options78.getOptionGroups();
        java.lang.String str84 = options78.toString();
        org.apache.commons.cli.Option option89 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean90 = option89.hasOptionalArg();
        java.lang.String str91 = option89.getArgName();
        boolean boolean93 = option89.equals((java.lang.Object) (byte) 100);
        org.apache.commons.cli.Options options94 = options78.addOption(option89);
        org.apache.commons.cli.Option option96 = options78.getOption("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]");
        java.lang.String[] strArray97 = null;
        java.util.Properties properties98 = null;
        org.apache.commons.cli.CommandLine commandLine99 = posixParser10.parse(options78, strArray97, properties98);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str59, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertNotNull(collection79);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(collection83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str84, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "arg" + "'", str91, "arg");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(options94);
        org.junit.Assert.assertNull(option96);
        org.junit.Assert.assertNotNull(commandLine99);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        java.util.Collection collection81 = options80.getOptions();
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasArg();
        boolean boolean88 = option86.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup89 = options80.getOptionGroup(option86);
        org.apache.commons.cli.OptionGroup optionGroup90 = options77.getOptionGroup(option86);
        boolean boolean91 = option86.hasLongOpt();
        java.lang.String str93 = option86.getValue((-2));
        option86.setDescription("");
        org.apache.commons.cli.Options options96 = options43.addOption(option86);
        java.util.List list97 = options43.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(options96);
        org.junit.Assert.assertNotNull(list97);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options85 = options53.addOption("[ option:   :: hi! ]", true, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]", false);
        posixParser0.burstToken("[ option: arg   :: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ] :: -1 ]", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        org.apache.commons.cli.Options options65 = options59.addOption("", false, "arg");
        java.lang.String str66 = options59.toString();
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean72 = option71.hasArg();
        boolean boolean73 = option71.isRequired();
        boolean boolean74 = option71.hasOptionalArg();
        java.lang.String str75 = option71.toString();
        org.apache.commons.cli.OptionGroup optionGroup76 = options59.getOptionGroup(option71);
        org.apache.commons.cli.Options options80 = options59.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine81 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray82 = commandLine81.getArgs();
        commandLine81.addArg("");
        java.lang.String str87 = commandLine81.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean89 = commandLine81.hasOption('4');
        java.lang.String[] strArray90 = commandLine81.getArgs();
        java.util.Iterator iterator91 = commandLine81.iterator();
        java.lang.String[] strArray92 = commandLine81.getArgs();
        java.lang.String[] strArray94 = posixParser0.flatten(options80, strArray92, false);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str66, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ option:    ::  ]" + "'", str75, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str87, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(iterator91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        org.apache.commons.cli.Option option83 = new org.apache.commons.cli.Option("", false, "hi!");
        commandLine68.addOption(option83);
        org.apache.commons.cli.OptionBuilder optionBuilder85 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option83);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertNotNull(optionBuilder85);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasOption("hi!");
        org.apache.commons.cli.Options options6 = options0.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder7 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options6);
        java.util.List list8 = options6.helpOptions();
        java.util.Collection collection9 = options6.getOptionGroups();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        option14.setArgName("");
        boolean boolean18 = option14.hasOptionalArg();
        int int19 = option14.getArgs();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasOptionalArg();
        java.lang.String str26 = option24.getArgName();
        boolean boolean27 = option24.hasOptionalArg();
        java.lang.Object obj28 = option24.getType();
        option24.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean36 = option35.hasOptionalArg();
        java.lang.String str37 = option35.getArgName();
        boolean boolean39 = option35.equals((java.lang.Object) (byte) 100);
        boolean boolean40 = option35.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        org.apache.commons.cli.Options options48 = options42.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder49 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options48);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine50.getArgs();
        java.lang.String[] strArray52 = commandLine50.getArgs();
        java.lang.Object obj54 = commandLine50.getOptionObject(' ');
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = option59.toString();
        commandLine50.addOption(option59);
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.lang.String[] strArray68 = posixParser41.flatten(options48, strArray66, true);
        boolean boolean69 = option35.equals((java.lang.Object) posixParser41);
        option24.setType((java.lang.Object) option35);
        option14.setType((java.lang.Object) option35);
        org.apache.commons.cli.OptionGroup optionGroup72 = options6.getOptionGroup(option35);
        org.apache.commons.cli.Option option77 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean78 = option77.hasArg();
        boolean boolean79 = option77.isRequired();
        boolean boolean80 = option77.hasValueSeparator();
        java.lang.String str81 = option77.getOpt();
        java.lang.String str82 = option77.getValue();
        java.lang.String str83 = option77.toString();
        boolean boolean84 = option35.equals((java.lang.Object) str83);
        java.lang.Class<?> wildcardClass85 = option35.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(optionBuilder7);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "arg" + "'", str37, "arg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionBuilder49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option:    ::  ]" + "'", str64, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[ option:    ::  ]" + "'", str83, "[ option:    ::  ]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        java.util.List list44 = options7.getRequiredOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(list44);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean70 = option69.hasOptionalArg();
        option69.setArgName("");
        boolean boolean73 = option69.hasOptionalArg();
        char char74 = option69.getValueSeparator();
        boolean boolean75 = option69.isRequired();
        org.apache.commons.cli.Options options76 = options49.addOption(option69);
        org.apache.commons.cli.Options options80 = options49.addOption("", false, "[ option:    ::  :: [ option:    ::  ] ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + char74 + "' != '" + '\000' + "'", char74 == '\000');
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNotNull(options80);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        java.util.Iterator iterator30 = commandLine29.iterator();
        java.lang.String[] strArray32 = commandLine29.getOptionValues("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        commandLine29.addArg("[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray35 = commandLine29.getOptions();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNull(strArray32);
        org.junit.Assert.assertNotNull(optionArray35);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        org.apache.commons.cli.Options options15 = options0.addOption("", false, "");
        org.apache.commons.cli.Option option20 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean21 = option20.hasOptionalArg();
        option20.setArgName("");
        boolean boolean24 = option20.hasOptionalArg();
        int int25 = option20.getArgs();
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean31 = option30.hasOptionalArg();
        java.lang.String str32 = option30.getArgName();
        boolean boolean33 = option30.hasOptionalArg();
        java.lang.Object obj34 = option30.getType();
        option30.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean42 = option41.hasOptionalArg();
        java.lang.String str43 = option41.getArgName();
        boolean boolean45 = option41.equals((java.lang.Object) (byte) 100);
        boolean boolean46 = option41.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        boolean boolean50 = options48.hasOption("hi!");
        org.apache.commons.cli.Options options54 = options48.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder55 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options54);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        java.lang.String[] strArray58 = commandLine56.getArgs();
        java.lang.Object obj60 = commandLine56.getOptionObject(' ');
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean66 = option65.hasOptionalArg();
        java.lang.String str67 = option65.getArgName();
        boolean boolean69 = option65.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = option65.toString();
        commandLine56.addOption(option65);
        java.lang.String[] strArray72 = commandLine56.getArgs();
        java.lang.String[] strArray74 = posixParser47.flatten(options54, strArray72, true);
        boolean boolean75 = option41.equals((java.lang.Object) posixParser47);
        option30.setType((java.lang.Object) option41);
        option20.setType((java.lang.Object) option41);
        option41.setArgs(0);
        org.apache.commons.cli.Options options80 = options15.addOption(option41);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNotNull(optionBuilder55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "arg" + "'", str67, "arg");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ option:    ::  ]" + "'", str70, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options80);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        boolean boolean44 = options39.hasOption("");
        java.lang.String str45 = options39.toString();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean51 = option50.hasOptionalArg();
        java.lang.String str52 = option50.getArgName();
        boolean boolean53 = option50.hasArgs();
        java.lang.String str54 = option50.getValue();
        java.lang.String[] strArray55 = option50.getValues();
        org.apache.commons.cli.Options options56 = options39.addOption(option50);
        java.lang.String str57 = options39.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str45, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(strArray55);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str57, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        org.apache.commons.cli.Options options71 = options65.addOption("", false, "arg");
        java.util.Collection collection72 = options71.getOptions();
        org.apache.commons.cli.PosixParser posixParser73 = new org.apache.commons.cli.PosixParser();
        posixParser73.burstToken("", true);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        java.util.Collection collection78 = options77.getOptions();
        java.lang.String[] strArray79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser73.parse(options77, strArray79, true);
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        boolean boolean84 = options82.hasOption("hi!");
        boolean boolean86 = options82.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine87 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray88 = commandLine87.getArgs();
        java.lang.String[] strArray89 = commandLine87.getArgs();
        java.lang.String[] strArray91 = posixParser73.flatten(options82, strArray89, true);
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options71, strArray89, properties92);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean38 = option37.hasOptionalArg();
        java.lang.String str39 = option37.getArgName();
        boolean boolean40 = option37.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        org.apache.commons.cli.Options options48 = options42.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder49 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options48);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine50.getArgs();
        java.lang.String[] strArray52 = commandLine50.getArgs();
        java.lang.Object obj54 = commandLine50.getOptionObject(' ');
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = option59.toString();
        commandLine50.addOption(option59);
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.lang.String[] strArray68 = posixParser41.flatten(options48, strArray66, true);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.util.List list70 = options69.helpOptions();
        java.lang.String[] strArray71 = new java.lang.String[] {};
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser41.parse(options69, strArray71, properties72, false);
        boolean boolean75 = option37.equals((java.lang.Object) false);
        org.apache.commons.cli.Options options76 = options28.addOption(option37);
        org.apache.commons.cli.Option option78 = options28.getOption("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        java.util.Collection collection79 = options28.getOptionGroups();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionBuilder49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option:    ::  ]" + "'", str64, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertNull(option78);
        org.junit.Assert.assertNotNull(collection79);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean6 = option5.hasOptionalArg();
        java.lang.String str7 = option5.getArgName();
        boolean boolean9 = option5.equals((java.lang.Object) (byte) 100);
        boolean boolean10 = option5.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        boolean boolean14 = options12.hasOption("hi!");
        org.apache.commons.cli.Options options18 = options12.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder19 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options18);
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray21 = commandLine20.getArgs();
        java.lang.String[] strArray22 = commandLine20.getArgs();
        java.lang.Object obj24 = commandLine20.getOptionObject(' ');
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean30 = option29.hasOptionalArg();
        java.lang.String str31 = option29.getArgName();
        boolean boolean33 = option29.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = option29.toString();
        commandLine20.addOption(option29);
        java.lang.String[] strArray36 = commandLine20.getArgs();
        java.lang.String[] strArray38 = posixParser11.flatten(options18, strArray36, true);
        boolean boolean39 = option5.equals((java.lang.Object) posixParser11);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = null;
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser11.parse(options40, strArray41, properties42);
        boolean boolean45 = options40.hasOption("");
        java.lang.String str46 = options40.toString();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        boolean boolean50 = options48.hasOption("hi!");
        org.apache.commons.cli.Options options54 = options48.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder55 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options54);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        java.lang.String[] strArray58 = commandLine56.getArgs();
        java.lang.Object obj60 = commandLine56.getOptionObject(' ');
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean66 = option65.hasOptionalArg();
        java.lang.String str67 = option65.getArgName();
        boolean boolean69 = option65.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = option65.toString();
        commandLine56.addOption(option65);
        java.lang.String[] strArray72 = commandLine56.getArgs();
        java.lang.String[] strArray74 = posixParser47.flatten(options54, strArray72, true);
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        java.util.List list76 = options75.helpOptions();
        java.lang.String[] strArray77 = new java.lang.String[] {};
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser47.parse(options75, strArray77, properties78, false);
        java.lang.String[] strArray82 = posixParser0.flatten(options40, strArray77, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options86 = options40.addOption("[ option:    :: [ option:    :: hi! ] ]", true, "[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(optionBuilder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ option:    ::  ]" + "'", str34, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str46, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNotNull(optionBuilder55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "arg" + "'", str67, "arg");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ option:    ::  ]" + "'", str70, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        java.util.List list72 = options39.getRequiredOptions();
        java.util.Collection collection73 = options39.getOptions();
        org.apache.commons.cli.Option option75 = options39.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNull(option75);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        boolean boolean4 = options2.hasOption("hi!");
        org.apache.commons.cli.Options options8 = options2.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder9 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options8);
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine10.getArgs();
        java.lang.String[] strArray12 = commandLine10.getArgs();
        java.lang.Object obj14 = commandLine10.getOptionObject(' ');
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean20 = option19.hasOptionalArg();
        java.lang.String str21 = option19.getArgName();
        boolean boolean23 = option19.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = option19.toString();
        commandLine10.addOption(option19);
        java.lang.String[] strArray26 = commandLine10.getArgs();
        java.lang.String[] strArray28 = posixParser1.flatten(options8, strArray26, true);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.util.List list30 = options29.helpOptions();
        java.lang.String[] strArray31 = new java.lang.String[] {};
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser1.parse(options29, strArray31, properties32, false);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.getLongOpt();
        java.lang.String str45 = option39.getKey();
        java.lang.Object obj46 = option39.getType();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = options53.getOption("");
        option39.setType((java.lang.Object) options53);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        posixParser57.burstToken("", true);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.util.Collection collection62 = options61.getOptions();
        java.lang.String[] strArray63 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser57.parse(options61, strArray63, true);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        boolean boolean68 = options66.hasOption("hi!");
        boolean boolean70 = options66.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        java.lang.String[] strArray73 = commandLine71.getArgs();
        java.lang.String[] strArray75 = posixParser57.flatten(options66, strArray73, true);
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser1.parse(options53, strArray73, properties76, true);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options53, strArray79, true);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", true);
        org.apache.commons.cli.Option option89 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean90 = option89.hasArg();
        boolean boolean91 = option89.isRequired();
        boolean boolean92 = option89.hasValueSeparator();
        java.lang.String str93 = option89.getOpt();
        boolean boolean94 = option89.hasArgName();
        java.util.ListIterator listIterator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option89, listIterator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(optionBuilder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:    ::  ]" + "'", str24, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.lang.String str20 = commandLine17.getOptionValue("", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.Object obj22 = commandLine17.getOptionObject("");
        org.apache.commons.cli.Option[] optionArray23 = commandLine17.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(optionArray23);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        boolean boolean13 = options9.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray15 = commandLine14.getArgs();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        java.lang.String[] strArray18 = posixParser0.flatten(options9, strArray16, true);
        org.apache.commons.cli.Options options23 = options9.addOption("", "[ option:    ::  ]", true, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.apache.commons.cli.OptionGroup optionGroup24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options25 = options23.addOptionGroup(optionGroup24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(options23);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        boolean boolean78 = commandLine76.hasOption("[ option:    ::  ]");
        java.lang.String str80 = commandLine76.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.Object obj82 = commandLine76.getOptionObject("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String str70 = options69.toString();
        java.util.List list71 = options69.helpOptions();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine72.getArgs();
        java.lang.String[] strArray74 = commandLine72.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser10.parse(options69, strArray74, properties75, false);
        java.lang.Object obj79 = commandLine77.getOptionObject('#');
        java.lang.String[] strArray80 = commandLine77.getArgs();
        java.lang.Class<?> wildcardClass81 = commandLine77.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str70, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        java.lang.String str70 = commandLine67.getOptionValue("[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.String[] strArray71 = commandLine67.getArgs();
        boolean boolean73 = commandLine67.hasOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.lang.Object obj19 = commandLine17.getOptionObject('4');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Iterator iterator9 = commandLine8.iterator();
        java.lang.String str11 = commandLine8.getOptionValue('a');
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        boolean boolean50 = options18.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.OptionGroup optionGroup53 = options18.getOptionGroup(option52);
        option52.setLongOpt("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertNull(optionGroup53);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        boolean boolean78 = commandLine76.hasOption("[ option:    ::  ]");
        java.lang.String str80 = commandLine76.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str83 = commandLine76.getOptionValue('#', "[ option:   :: hi! ]");
        java.lang.String[] strArray85 = commandLine76.getOptionValues(' ');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[ option:   :: hi! ]" + "'", str83, "[ option:   :: hi! ]");
        org.junit.Assert.assertNull(strArray85);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        boolean boolean44 = options39.hasOption("");
        java.lang.String str45 = options39.toString();
        java.util.List list46 = options39.getRequiredOptions();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str45, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list46);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        java.lang.Object obj79 = commandLine77.getOptionObject('\000');
        java.lang.String str81 = commandLine77.getOptionValue("[ option:    :: [ option:    :: hi! ] ]");
        java.lang.String str84 = commandLine77.getOptionValue('a', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str84, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        posixParser0.burstToken("[ option:    ::  :: [ option:    ::  ] ]", false);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        posixParser33.burstToken("", true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        java.lang.String[] strArray39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options37, strArray39, true);
        java.util.Collection collection42 = options37.getOptionGroups();
        java.lang.String str43 = options37.toString();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.util.Collection collection45 = options44.getOptions();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean51 = option50.hasArg();
        boolean boolean52 = option50.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option50);
        org.apache.commons.cli.Options options54 = options37.addOption(option50);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        boolean boolean58 = options56.hasOption("hi!");
        org.apache.commons.cli.Options options62 = options56.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder63 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options62);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.Object obj68 = commandLine64.getOptionObject(' ');
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = option73.toString();
        commandLine64.addOption(option73);
        java.lang.String[] strArray80 = commandLine64.getArgs();
        java.lang.String[] strArray82 = posixParser55.flatten(options62, strArray80, true);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options54, strArray80, properties83);
        java.lang.Object obj86 = commandLine84.getOptionObject("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str43, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(optionBuilder63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:    ::  ]" + "'", str78, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasOptionalArg();
        java.lang.String str88 = option86.getArgName();
        boolean boolean90 = option86.equals((java.lang.Object) (byte) 100);
        option86.setLongOpt("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Options options93 = options81.addOption(option86);
        java.util.Collection collection94 = options93.getOptions();
        java.util.List list95 = options93.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNotNull(collection94);
        org.junit.Assert.assertNotNull(list95);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        org.apache.commons.cli.Options options15 = options9.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder16 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options15);
        org.apache.commons.cli.CommandLine commandLine17 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray18 = commandLine17.getArgs();
        java.lang.String[] strArray19 = commandLine17.getArgs();
        java.lang.Object obj21 = commandLine17.getOptionObject(' ');
        org.apache.commons.cli.Option option26 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean27 = option26.hasOptionalArg();
        java.lang.String str28 = option26.getArgName();
        boolean boolean30 = option26.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = option26.toString();
        commandLine17.addOption(option26);
        java.lang.String[] strArray33 = commandLine17.getArgs();
        java.lang.String[] strArray35 = posixParser8.flatten(options15, strArray33, true);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.util.List list37 = options36.helpOptions();
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser8.parse(options36, strArray38, properties39, false);
        boolean boolean42 = option4.equals((java.lang.Object) false);
        option4.setOptionalArg(false);
        option4.setDescription("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(optionBuilder16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "arg" + "'", str28, "arg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ option:    ::  ]" + "'", str31, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        java.lang.String str63 = options34.toString();
        java.util.Collection collection64 = options34.getOptions();
        org.apache.commons.cli.Options options69 = options34.addOption("", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!", false, "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options34.addOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false, "arg");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str63, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection64);
        org.junit.Assert.assertNotNull(options69);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.lang.String str62 = options61.toString();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean68 = option67.hasOptionalArg();
        java.lang.String str69 = option67.getArgName();
        boolean boolean70 = option67.hasOptionalArg();
        java.lang.Object obj71 = option67.getType();
        org.apache.commons.cli.OptionGroup optionGroup72 = options61.getOptionGroup(option67);
        boolean boolean73 = option67.hasArgs();
        org.apache.commons.cli.OptionGroup optionGroup74 = options24.getOptionGroup(option67);
        boolean boolean76 = options24.hasOption("hi!");
        java.util.List list77 = options24.getRequiredOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str62, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "arg" + "'", str69, "arg");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(list77);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        java.lang.String str80 = commandLine77.getOptionValue('4', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        commandLine77.addArg("org.apache.commons.cli.ParseException: ");
        commandLine77.addArg("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str80, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasOptionalArg();
        java.lang.Object obj8 = option4.getType();
        option4.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean19 = option15.equals((java.lang.Object) (byte) 100);
        boolean boolean20 = option15.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser21 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        boolean boolean24 = options22.hasOption("hi!");
        org.apache.commons.cli.Options options28 = options22.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder29 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options28);
        org.apache.commons.cli.CommandLine commandLine30 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray31 = commandLine30.getArgs();
        java.lang.String[] strArray32 = commandLine30.getArgs();
        java.lang.Object obj34 = commandLine30.getOptionObject(' ');
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.toString();
        commandLine30.addOption(option39);
        java.lang.String[] strArray46 = commandLine30.getArgs();
        java.lang.String[] strArray48 = posixParser21.flatten(options28, strArray46, true);
        boolean boolean49 = option15.equals((java.lang.Object) posixParser21);
        option4.setType((java.lang.Object) option15);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine51.getArgs();
        java.lang.String[] strArray53 = commandLine51.getArgs();
        java.util.Iterator iterator54 = commandLine51.iterator();
        java.lang.String[] strArray56 = commandLine51.getOptionValues('\000');
        commandLine51.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option63 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean64 = option63.hasOptionalArg();
        java.lang.String str65 = option63.getArgName();
        boolean boolean67 = option63.equals((java.lang.Object) (byte) 100);
        boolean boolean68 = option63.hasValueSeparator();
        boolean boolean69 = option63.isRequired();
        java.lang.String str70 = option63.getKey();
        boolean boolean71 = option63.isRequired();
        commandLine51.addOption(option63);
        java.lang.String str73 = option63.getLongOpt();
        option15.setType((java.lang.Object) str73);
        boolean boolean75 = option15.hasValueSeparator();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(optionBuilder29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ option:    ::  ]" + "'", str44, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(iterator54);
        org.junit.Assert.assertNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        boolean boolean41 = options39.hasOption("hi!");
        boolean boolean43 = options39.hasOption("hi!");
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean49 = option48.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup50 = options39.getOptionGroup(option48);
        java.util.List list51 = options39.helpOptions();
        java.lang.String[] strArray52 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser10.parse(options39, strArray52, false);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        boolean boolean57 = options55.hasOption("hi!");
        boolean boolean59 = options55.hasOption("hi!");
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup66 = options55.getOptionGroup(option64);
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean72 = option71.hasOptionalArg();
        java.lang.String str73 = option71.getArgName();
        boolean boolean74 = option71.hasOptionalArg();
        java.lang.Object obj75 = option71.getType();
        option71.setArgs((int) (byte) -1);
        java.lang.String str78 = option71.getArgName();
        org.apache.commons.cli.Options options79 = options55.addOption(option71);
        org.apache.commons.cli.CommandLine commandLine80 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray81 = commandLine80.getArgs();
        java.lang.String[] strArray82 = commandLine80.getArgs();
        java.lang.Object obj84 = commandLine80.getOptionObject(' ');
        org.apache.commons.cli.Option option89 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean90 = option89.hasOptionalArg();
        java.lang.String str91 = option89.getArgName();
        boolean boolean93 = option89.equals((java.lang.Object) (byte) 100);
        java.lang.String str94 = option89.toString();
        commandLine80.addOption(option89);
        java.lang.String[] strArray96 = commandLine80.getArgs();
        org.apache.commons.cli.CommandLine commandLine98 = posixParser10.parse(options55, strArray96, true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertNotNull(list51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "arg" + "'", str91, "arg");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ option:    ::  ]" + "'", str94, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(commandLine98);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        posixParser0.burstToken("[ option:    ::  :: [ option:    ::  ] ]", false);
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        posixParser33.burstToken("", true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        java.lang.String[] strArray39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options37, strArray39, true);
        java.util.Collection collection42 = options37.getOptionGroups();
        java.lang.String str43 = options37.toString();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.util.Collection collection45 = options44.getOptions();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean51 = option50.hasArg();
        boolean boolean52 = option50.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option50);
        org.apache.commons.cli.Options options54 = options37.addOption(option50);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        boolean boolean58 = options56.hasOption("hi!");
        org.apache.commons.cli.Options options62 = options56.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder63 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options62);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.Object obj68 = commandLine64.getOptionObject(' ');
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = option73.toString();
        commandLine64.addOption(option73);
        java.lang.String[] strArray80 = commandLine64.getArgs();
        java.lang.String[] strArray82 = posixParser55.flatten(options62, strArray80, true);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options54, strArray80, properties83);
        java.lang.String[] strArray86 = commandLine84.getOptionValues('a');
        boolean boolean88 = commandLine84.hasOption("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]");
        java.util.Iterator iterator89 = commandLine84.iterator();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str43, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(optionBuilder63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:    ::  ]" + "'", str78, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(iterator89);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        option25.setValueSeparator('#');
        int int66 = option25.getArgs();
        org.apache.commons.cli.OptionBuilder optionBuilder67 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option25);
        boolean boolean68 = option25.hasArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(optionBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        char char44 = option34.getValueSeparator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertTrue("'" + char44 + "' != '" + '\000' + "'", char44 == '\000');
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        java.lang.String str51 = commandLine48.getOptionValue('\000', "");
        java.lang.String[] strArray53 = commandLine48.getOptionValues("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(strArray53);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        java.lang.String str61 = commandLine58.getOptionValue('\000', "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        org.apache.commons.cli.Options options65 = options59.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder66 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options65);
        java.util.List list67 = options65.helpOptions();
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        posixParser68.burstToken("", true);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.util.Collection collection73 = options72.getOptions();
        java.lang.String[] strArray74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser68.parse(options72, strArray74, true);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        boolean boolean81 = options77.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine82.getArgs();
        java.lang.String[] strArray84 = commandLine82.getArgs();
        java.lang.String[] strArray86 = posixParser68.flatten(options77, strArray84, true);
        java.lang.String[] strArray88 = posixParser0.flatten(options65, strArray84, true);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(optionBuilder66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        java.lang.String[] strArray44 = commandLine42.getOptionValues('4');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNull(strArray44);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        java.util.Collection collection34 = options28.getOptions();
        java.util.Collection collection35 = options28.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options39 = options28.addOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", true, "org.apache.commons.cli.ParseException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertNotNull(collection35);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        java.util.List list70 = options65.helpOptions();
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        commandLine71.addArg("");
        java.lang.String str77 = commandLine71.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str80 = commandLine71.getOptionValue('a', "[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj82 = commandLine71.getOptionObject("org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean84 = commandLine71.hasOption(' ');
        java.lang.String[] strArray85 = commandLine71.getArgs();
        java.util.Properties properties86 = null;
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options65, strArray85, properties86, true);
        java.util.List list89 = options65.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str77, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str80, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(list89);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        java.lang.String str44 = commandLine42.getOptionValue('\000');
        org.apache.commons.cli.Option[] optionArray45 = commandLine42.getOptions();
        boolean boolean47 = commandLine42.hasOption("");
        boolean boolean49 = commandLine42.hasOption("[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]");
        java.lang.String[] strArray50 = commandLine42.getArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(optionArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray50);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        java.lang.String str79 = commandLine77.getOptionValue(' ');
        java.lang.String[] strArray80 = commandLine77.getArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray80);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        java.lang.String str80 = commandLine77.getOptionValue('4', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean82 = commandLine77.hasOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.Object obj84 = commandLine77.getOptionObject("[ option:    ::  ]");
        java.lang.String str86 = commandLine77.getOptionValue("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str80, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        java.lang.String str79 = commandLine76.getOptionValue("[ option:    ::  ]", "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str81 = commandLine76.getOptionValue("");
        java.lang.String[] strArray82 = commandLine76.getArgs();
        java.lang.String[] strArray83 = commandLine76.getArgs();
        java.lang.String[] strArray84 = commandLine76.getArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str79, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        java.lang.Object obj52 = null;
        boolean boolean53 = option38.equals(obj52);
        option38.setArgs((int) (short) 0);
        option38.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        option38.setArgs(1);
        java.lang.String str60 = option38.getKey();
        java.lang.String str62 = option38.getValue("org.apache.commons.cli.MissingOptionException: arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingOptionException: arg" + "'", str62, "org.apache.commons.cli.MissingOptionException: arg");
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        boolean boolean88 = option82.isRequired();
        java.lang.String str89 = option82.getKey();
        boolean boolean90 = option82.hasArgName();
        option82.setLongOpt("");
        boolean boolean93 = option82.hasArg();
        org.apache.commons.cli.OptionGroup optionGroup94 = options53.getOptionGroup(option82);
        boolean boolean95 = option82.hasLongOpt();
        boolean boolean96 = option82.hasArgName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(optionGroup94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Option option19 = options7.getOption("");
        option19.setArgName("[ option:    ::  ]");
        boolean boolean22 = option19.hasArg();
        option19.setRequired(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create('4');
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        boolean boolean5 = options3.hasOption("hi!");
        org.apache.commons.cli.Options options9 = options3.addOption("", false, "arg");
        org.apache.commons.cli.Option option11 = options9.getOption("");
        java.lang.String[] strArray17 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine19 = posixParser2.parse(options9, strArray17, false);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        java.util.Collection collection21 = options20.getOptions();
        org.apache.commons.cli.Option option26 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean27 = option26.hasArg();
        boolean boolean28 = option26.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option26);
        java.lang.String str30 = options20.toString();
        org.apache.commons.cli.CommandLine commandLine31 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray32 = commandLine31.getArgs();
        java.lang.String[] strArray33 = commandLine31.getArgs();
        java.lang.Object obj35 = commandLine31.getOptionObject(' ');
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasOptionalArg();
        java.lang.String str42 = option40.getArgName();
        boolean boolean44 = option40.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = option40.toString();
        commandLine31.addOption(option40);
        java.lang.String[] strArray47 = commandLine31.getArgs();
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser2.parse(options20, strArray47, properties48, true);
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        posixParser51.burstToken("", true);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        java.util.Collection collection56 = options55.getOptions();
        java.lang.String[] strArray57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser51.parse(options55, strArray57, true);
        java.lang.String str60 = options55.toString();
        org.apache.commons.cli.CommandLine commandLine61 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray62 = commandLine61.getArgs();
        java.lang.String[] strArray63 = commandLine61.getArgs();
        java.lang.Object obj65 = commandLine61.getOptionObject(' ');
        org.apache.commons.cli.Option option70 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean71 = option70.hasOptionalArg();
        java.lang.String str72 = option70.getArgName();
        boolean boolean74 = option70.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = option70.toString();
        commandLine61.addOption(option70);
        java.lang.String[] strArray77 = commandLine61.getArgs();
        org.apache.commons.cli.CommandLine commandLine79 = posixParser2.parse(options55, strArray77, true);
        java.lang.String str82 = commandLine79.getOptionValue('4', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        commandLine79.addArg("org.apache.commons.cli.ParseException: ");
        java.util.List list85 = commandLine79.getArgList();
        boolean boolean86 = option1.equals((java.lang.Object) list85);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(option11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(commandLine19);
        org.junit.Assert.assertNotNull(collection21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str30, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ option:    ::  ]" + "'", str45, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(collection56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str60, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "arg" + "'", str72, "arg");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ option:    ::  ]" + "'", str75, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str82, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNotNull(list85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        boolean boolean12 = option6.hasArgs();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        option17.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = option28.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options41);
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine43.getArgs();
        java.lang.String[] strArray45 = commandLine43.getArgs();
        java.lang.Object obj47 = commandLine43.getOptionObject(' ');
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean56 = option52.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = option52.toString();
        commandLine43.addOption(option52);
        java.lang.String[] strArray59 = commandLine43.getArgs();
        java.lang.String[] strArray61 = posixParser34.flatten(options41, strArray59, true);
        boolean boolean62 = option28.equals((java.lang.Object) posixParser34);
        option17.setType((java.lang.Object) option28);
        boolean boolean64 = option6.equals((java.lang.Object) option17);
        java.lang.String str65 = option6.getValue();
        java.lang.String str66 = option6.getLongOpt();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionBuilder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean73 = option72.hasOptionalArg();
        java.lang.String str74 = option72.getArgName();
        boolean boolean75 = option72.hasOptionalArg();
        java.lang.Object obj76 = option72.getType();
        option72.setArgs((int) (byte) -1);
        commandLine67.addOption(option72);
        java.lang.String str80 = option72.getValue();
        java.lang.String str81 = option72.getLongOpt();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "arg" + "'", str74, "arg");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        boolean boolean82 = options78.hasOption("hi!");
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup89 = options78.getOptionGroup(option87);
        java.lang.Object obj90 = option87.getType();
        commandLine77.addOption(option87);
        java.lang.String str92 = option87.getDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        org.apache.commons.cli.Option[] optionArray63 = commandLine62.getOptions();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        boolean boolean66 = options64.hasOption("hi!");
        org.apache.commons.cli.Options options70 = options64.addOption("", false, "arg");
        java.lang.String str71 = options64.toString();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean77 = option76.hasOptionalArg();
        java.lang.String str78 = option76.getArgName();
        boolean boolean80 = option76.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = option76.toString();
        option76.setArgs((int) (byte) 1);
        java.lang.String str84 = option76.getKey();
        org.apache.commons.cli.OptionGroup optionGroup85 = options64.getOptionGroup(option76);
        java.lang.String str86 = option76.getKey();
        option76.setOptionalArg(true);
        option76.setValueSeparator('#');
        commandLine62.addOption(option76);
        org.apache.commons.cli.Option[] optionArray92 = commandLine62.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(optionArray63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ option:    ::  ]" + "'", str81, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(optionArray92);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        java.util.List list77 = options43.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list77);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        java.lang.Object obj35 = commandLine33.getOptionObject("arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        boolean boolean50 = options18.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options52 = options18.addOption(option51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        option4.setLongOpt("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        option15.setArgName("");
        boolean boolean19 = option15.hasOptionalArg();
        int int20 = option15.getArgs();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean28 = option25.hasOptionalArg();
        java.lang.Object obj29 = option25.getType();
        option25.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean37 = option36.hasOptionalArg();
        java.lang.String str38 = option36.getArgName();
        boolean boolean40 = option36.equals((java.lang.Object) (byte) 100);
        boolean boolean41 = option36.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        boolean boolean45 = options43.hasOption("hi!");
        org.apache.commons.cli.Options options49 = options43.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder50 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options49);
        org.apache.commons.cli.CommandLine commandLine51 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray52 = commandLine51.getArgs();
        java.lang.String[] strArray53 = commandLine51.getArgs();
        java.lang.Object obj55 = commandLine51.getOptionObject(' ');
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean61 = option60.hasOptionalArg();
        java.lang.String str62 = option60.getArgName();
        boolean boolean64 = option60.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = option60.toString();
        commandLine51.addOption(option60);
        java.lang.String[] strArray67 = commandLine51.getArgs();
        java.lang.String[] strArray69 = posixParser42.flatten(options49, strArray67, true);
        boolean boolean70 = option36.equals((java.lang.Object) posixParser42);
        option25.setType((java.lang.Object) option36);
        option15.setType((java.lang.Object) option36);
        option36.setArgs(0);
        option4.setType((java.lang.Object) option36);
        option4.setArgs((int) '4');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "arg" + "'", str38, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertNotNull(optionBuilder50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "arg" + "'", str62, "arg");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ option:    ::  ]" + "'", str65, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        java.util.Iterator iterator80 = commandLine68.iterator();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertNotNull(iterator80);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.lang.String str9 = options4.toString();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        boolean boolean12 = options10.hasOption("hi!");
        org.apache.commons.cli.Options options16 = options10.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder17 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options16);
        java.util.List list18 = options16.helpOptions();
        java.util.Collection collection19 = options16.getOptionGroups();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasOptionalArg();
        option24.setArgName("");
        boolean boolean28 = option24.hasOptionalArg();
        int int29 = option24.getArgs();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasOptionalArg();
        java.lang.String str47 = option45.getArgName();
        boolean boolean49 = option45.equals((java.lang.Object) (byte) 100);
        boolean boolean50 = option45.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        boolean boolean54 = options52.hasOption("hi!");
        org.apache.commons.cli.Options options58 = options52.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder59 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options58);
        org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray61 = commandLine60.getArgs();
        java.lang.String[] strArray62 = commandLine60.getArgs();
        java.lang.Object obj64 = commandLine60.getOptionObject(' ');
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean70 = option69.hasOptionalArg();
        java.lang.String str71 = option69.getArgName();
        boolean boolean73 = option69.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = option69.toString();
        commandLine60.addOption(option69);
        java.lang.String[] strArray76 = commandLine60.getArgs();
        java.lang.String[] strArray78 = posixParser51.flatten(options58, strArray76, true);
        boolean boolean79 = option45.equals((java.lang.Object) posixParser51);
        option34.setType((java.lang.Object) option45);
        option24.setType((java.lang.Object) option45);
        org.apache.commons.cli.OptionGroup optionGroup82 = options16.getOptionGroup(option45);
        org.apache.commons.cli.Options options83 = options4.addOption(option45);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(optionBuilder17);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "arg" + "'", str47, "arg");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(optionBuilder59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "arg" + "'", str71, "arg");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ option:    ::  ]" + "'", str74, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(optionGroup82);
        org.junit.Assert.assertNotNull(options83);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        boolean boolean41 = options39.hasOption("hi!");
        boolean boolean43 = options39.hasOption("hi!");
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        java.util.Collection collection63 = options62.getOptions();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasArg();
        boolean boolean70 = option68.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup71 = options62.getOptionGroup(option68);
        java.lang.String str72 = options62.toString();
        org.apache.commons.cli.CommandLine commandLine73 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray74 = commandLine73.getArgs();
        java.lang.String[] strArray75 = commandLine73.getArgs();
        java.lang.Object obj77 = commandLine73.getOptionObject(' ');
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        java.lang.String str87 = option82.toString();
        commandLine73.addOption(option82);
        java.lang.String[] strArray89 = commandLine73.getArgs();
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser44.parse(options62, strArray89, properties90, true);
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser10.parse(options39, strArray89, properties93, true);
        java.lang.String[] strArray97 = commandLine95.getOptionValues("[ option:    :: hi! ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(collection63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str72, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ option:    ::  ]" + "'", str87, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNull(strArray97);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        java.util.List list43 = options39.getRequiredOptions();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(list43);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        boolean boolean12 = option6.hasArgs();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        option17.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = option28.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options41);
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine43.getArgs();
        java.lang.String[] strArray45 = commandLine43.getArgs();
        java.lang.Object obj47 = commandLine43.getOptionObject(' ');
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean56 = option52.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = option52.toString();
        commandLine43.addOption(option52);
        java.lang.String[] strArray59 = commandLine43.getArgs();
        java.lang.String[] strArray61 = posixParser34.flatten(options41, strArray59, true);
        boolean boolean62 = option28.equals((java.lang.Object) posixParser34);
        option17.setType((java.lang.Object) option28);
        boolean boolean64 = option6.equals((java.lang.Object) option17);
        boolean boolean65 = option6.hasOptionalArg();
        java.lang.String str67 = option6.getValue(0);
        java.lang.String str69 = option6.getValue("org.apache.commons.cli.MissingArgumentException: [ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionBuilder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.cli.MissingArgumentException: [ option:    ::  ]" + "'", str69, "org.apache.commons.cli.MissingArgumentException: [ option:    ::  ]");
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        boolean boolean35 = options33.hasOption("hi!");
        boolean boolean37 = options33.hasOption("hi!");
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup44 = options33.getOptionGroup(option42);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine45.getArgs();
        java.lang.String[] strArray47 = commandLine45.getArgs();
        java.util.Iterator iterator48 = commandLine45.iterator();
        java.lang.String[] strArray50 = commandLine45.getOptionValues('\000');
        java.lang.String str53 = commandLine45.getOptionValue(' ', "hi!");
        java.lang.String[] strArray54 = commandLine45.getArgs();
        java.lang.String[] strArray56 = posixParser0.flatten(options33, strArray54, true);
        org.apache.commons.cli.OptionGroup optionGroup57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options58 = options33.addOptionGroup(optionGroup57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(iterator48);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        java.lang.String str80 = commandLine77.getOptionValue('4', "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        commandLine77.addArg("org.apache.commons.cli.ParseException: ");
        java.lang.String[] strArray84 = commandLine77.getOptionValues("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str80, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray84);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        java.lang.Object obj52 = null;
        boolean boolean53 = option38.equals(obj52);
        option38.setArgs((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = option38.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        boolean boolean13 = options9.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray15 = commandLine14.getArgs();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        java.lang.String[] strArray18 = posixParser0.flatten(options9, strArray16, true);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        boolean boolean25 = options23.hasOption("hi!");
        org.apache.commons.cli.Options options29 = options23.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder30 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options29);
        org.apache.commons.cli.CommandLine commandLine31 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray32 = commandLine31.getArgs();
        java.lang.String[] strArray33 = commandLine31.getArgs();
        java.lang.Object obj35 = commandLine31.getOptionObject(' ');
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasOptionalArg();
        java.lang.String str42 = option40.getArgName();
        boolean boolean44 = option40.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = option40.toString();
        commandLine31.addOption(option40);
        java.lang.String[] strArray47 = commandLine31.getArgs();
        java.lang.String[] strArray49 = posixParser22.flatten(options29, strArray47, true);
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        java.lang.String[] strArray69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser22.parse(options59, strArray69);
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        commandLine71.addArg("");
        java.lang.String[] strArray76 = commandLine71.getOptionValues("hi!");
        commandLine71.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean80 = commandLine71.hasOption('a');
        java.lang.String[] strArray81 = commandLine71.getArgs();
        java.lang.String[] strArray83 = posixParser0.flatten(options59, strArray81, true);
        org.apache.commons.cli.OptionGroup optionGroup84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options85 = options59.addOptionGroup(optionGroup84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(optionBuilder30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ option:    ::  ]" + "'", str45, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray83);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        java.util.Iterator iterator34 = commandLine33.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(iterator34);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        boolean boolean12 = option6.hasArgs();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        option17.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = option28.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options41);
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine43.getArgs();
        java.lang.String[] strArray45 = commandLine43.getArgs();
        java.lang.Object obj47 = commandLine43.getOptionObject(' ');
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean56 = option52.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = option52.toString();
        commandLine43.addOption(option52);
        java.lang.String[] strArray59 = commandLine43.getArgs();
        java.lang.String[] strArray61 = posixParser34.flatten(options41, strArray59, true);
        boolean boolean62 = option28.equals((java.lang.Object) posixParser34);
        option17.setType((java.lang.Object) option28);
        boolean boolean64 = option6.equals((java.lang.Object) option17);
        boolean boolean65 = option6.hasOptionalArg();
        java.util.List list66 = option6.getValuesList();
        java.lang.String str67 = option6.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionBuilder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ option:    ::  ]" + "'", str67, "[ option:    ::  ]");
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasOption("hi!");
        org.apache.commons.cli.Options options6 = options0.addOption("", false, "arg");
        org.apache.commons.cli.Option option8 = options6.getOption("");
        int int9 = option8.getArgs();
        boolean boolean10 = option8.hasArgName();
        char char11 = option8.getValueSeparator();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        boolean boolean15 = options13.hasOption("hi!");
        org.apache.commons.cli.Options options19 = options13.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder20 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options19);
        org.apache.commons.cli.CommandLine commandLine21 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine21.getArgs();
        java.lang.String[] strArray23 = commandLine21.getArgs();
        java.lang.Object obj25 = commandLine21.getOptionObject(' ');
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean31 = option30.hasOptionalArg();
        java.lang.String str32 = option30.getArgName();
        boolean boolean34 = option30.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = option30.toString();
        commandLine21.addOption(option30);
        java.lang.String[] strArray37 = commandLine21.getArgs();
        java.lang.String[] strArray39 = posixParser12.flatten(options19, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.util.List list41 = options40.helpOptions();
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine45 = posixParser12.parse(options40, strArray42, properties43, false);
        boolean boolean46 = option8.equals((java.lang.Object) commandLine45);
        java.lang.String str47 = option8.getOpt();
        option8.setDescription("[ option:    :: hi! ]");
        option8.setArgs((int) (short) 1);
        java.lang.String str53 = option8.getValue((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(optionBuilder20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[ option:    ::  ]" + "'", str35, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        java.lang.String str50 = options49.toString();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean56 = option55.hasOptionalArg();
        java.lang.String str57 = option55.getArgName();
        boolean boolean58 = option55.hasOptionalArg();
        java.lang.Object obj59 = option55.getType();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option55);
        org.apache.commons.cli.Options options64 = options49.addOption("", false, "");
        java.lang.String[] strArray65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options49, strArray65, false);
        boolean boolean69 = options49.hasOption("[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str50, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        java.lang.Object obj66 = commandLine64.getOptionObject('4');
        org.apache.commons.cli.Option[] optionArray67 = commandLine64.getOptions();
        org.apache.commons.cli.Option[] optionArray68 = commandLine64.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(optionArray67);
        org.junit.Assert.assertNotNull(optionArray68);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        boolean boolean4 = options2.hasOption("hi!");
        org.apache.commons.cli.Options options8 = options2.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder9 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options8);
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine10.getArgs();
        java.lang.String[] strArray12 = commandLine10.getArgs();
        java.lang.Object obj14 = commandLine10.getOptionObject(' ');
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean20 = option19.hasOptionalArg();
        java.lang.String str21 = option19.getArgName();
        boolean boolean23 = option19.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = option19.toString();
        commandLine10.addOption(option19);
        java.lang.String[] strArray26 = commandLine10.getArgs();
        java.lang.String[] strArray28 = posixParser1.flatten(options8, strArray26, true);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.util.List list30 = options29.helpOptions();
        java.lang.String[] strArray31 = new java.lang.String[] {};
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser1.parse(options29, strArray31, properties32, false);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.getLongOpt();
        java.lang.String str45 = option39.getKey();
        java.lang.Object obj46 = option39.getType();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = options53.getOption("");
        option39.setType((java.lang.Object) options53);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        posixParser57.burstToken("", true);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.util.Collection collection62 = options61.getOptions();
        java.lang.String[] strArray63 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser57.parse(options61, strArray63, true);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        boolean boolean68 = options66.hasOption("hi!");
        boolean boolean70 = options66.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        java.lang.String[] strArray73 = commandLine71.getArgs();
        java.lang.String[] strArray75 = posixParser57.flatten(options66, strArray73, true);
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser1.parse(options53, strArray73, properties76, true);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options53, strArray79, true);
        java.lang.String str83 = commandLine81.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(optionBuilder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:    ::  ]" + "'", str24, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        boolean boolean4 = options2.hasOption("hi!");
        org.apache.commons.cli.Options options8 = options2.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder9 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options8);
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine10.getArgs();
        java.lang.String[] strArray12 = commandLine10.getArgs();
        java.lang.Object obj14 = commandLine10.getOptionObject(' ');
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean20 = option19.hasOptionalArg();
        java.lang.String str21 = option19.getArgName();
        boolean boolean23 = option19.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = option19.toString();
        commandLine10.addOption(option19);
        java.lang.String[] strArray26 = commandLine10.getArgs();
        java.lang.String[] strArray28 = posixParser1.flatten(options8, strArray26, true);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.util.List list30 = options29.helpOptions();
        java.lang.String[] strArray31 = new java.lang.String[] {};
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser1.parse(options29, strArray31, properties32, false);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.getLongOpt();
        java.lang.String str45 = option39.getKey();
        java.lang.Object obj46 = option39.getType();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = options53.getOption("");
        option39.setType((java.lang.Object) options53);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        posixParser57.burstToken("", true);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.util.Collection collection62 = options61.getOptions();
        java.lang.String[] strArray63 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser57.parse(options61, strArray63, true);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        boolean boolean68 = options66.hasOption("hi!");
        boolean boolean70 = options66.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        java.lang.String[] strArray73 = commandLine71.getArgs();
        java.lang.String[] strArray75 = posixParser57.flatten(options66, strArray73, true);
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser1.parse(options53, strArray73, properties76, true);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options53, strArray79, true);
        java.lang.String str83 = commandLine81.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean85 = commandLine81.hasOption('4');
        commandLine81.addArg("[ option:    ::  ]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(optionBuilder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:    ::  ]" + "'", str24, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        boolean boolean82 = options78.hasOption("hi!");
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup89 = options78.getOptionGroup(option87);
        java.lang.Object obj90 = option87.getType();
        commandLine77.addOption(option87);
        java.lang.String str94 = commandLine77.getOptionValue('\000', "[ Options: [ short {} ] [ long {} ]");
        java.lang.String str97 = commandLine77.getOptionValue("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str94, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]" + "'", str97, "org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        java.util.List list34 = options28.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(list34);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        org.apache.commons.cli.Options options74 = options68.addOption("", false, "arg");
        org.apache.commons.cli.Option option76 = options74.getOption("");
        java.util.List list77 = options74.helpOptions();
        java.lang.String[] strArray78 = null;
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser0.parse(options74, strArray78, properties79);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertNotNull(commandLine80);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        boolean boolean13 = options9.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray15 = commandLine14.getArgs();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        java.lang.String[] strArray18 = posixParser0.flatten(options9, strArray16, true);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        boolean boolean24 = options22.hasOption("hi!");
        boolean boolean26 = options22.hasOption("hi!");
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean32 = option31.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup33 = options22.getOptionGroup(option31);
        java.util.List list34 = options22.helpOptions();
        java.lang.String str35 = options22.toString();
        java.util.Collection collection36 = options22.getOptions();
        java.util.Collection collection37 = options22.getOptionGroups();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasOptionalArg();
        java.lang.String str44 = option42.getArgName();
        boolean boolean46 = option42.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = option42.toString();
        option42.setValueSeparator(' ');
        java.lang.String str51 = option42.getValue(97);
        java.lang.String str52 = option42.getKey();
        org.apache.commons.cli.OptionGroup optionGroup53 = options22.getOptionGroup(option42);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray55 = commandLine54.getArgs();
        commandLine54.addArg("");
        java.lang.String str60 = commandLine54.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean62 = commandLine54.hasOption('4');
        java.lang.String[] strArray63 = commandLine54.getArgs();
        java.util.Iterator iterator64 = commandLine54.iterator();
        java.lang.String[] strArray65 = commandLine54.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options22, strArray65, properties66);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str35, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ option:    ::  ]" + "'", str47, "[ option:    ::  ]");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str60, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(iterator64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        java.util.Iterator iterator30 = commandLine29.iterator();
        java.lang.String[] strArray32 = commandLine29.getOptionValues("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        commandLine29.addArg("[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]");
        java.lang.Object obj36 = commandLine29.getOptionObject("hi!");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNull(strArray32);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        option25.setValueSeparator('#');
        org.apache.commons.cli.CommandLine commandLine66 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray67 = commandLine66.getArgs();
        java.lang.String[] strArray68 = commandLine66.getArgs();
        java.lang.Object obj70 = commandLine66.getOptionObject(' ');
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean76 = option75.hasOptionalArg();
        java.lang.String str77 = option75.getArgName();
        boolean boolean79 = option75.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = option75.toString();
        commandLine66.addOption(option75);
        java.lang.String str84 = commandLine66.getOptionValue('a', "");
        java.lang.Object obj86 = commandLine66.getOptionObject("hi!");
        org.apache.commons.cli.Option[] optionArray87 = commandLine66.getOptions();
        option25.setType((java.lang.Object) optionArray87);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "arg" + "'", str77, "arg");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option:    ::  ]" + "'", str80, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(optionArray87);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        java.util.Collection collection69 = options68.getOptions();
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean75 = option74.hasArg();
        boolean boolean76 = option74.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup77 = options68.getOptionGroup(option74);
        org.apache.commons.cli.CommandLine commandLine78 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray79 = commandLine78.getArgs();
        java.lang.String[] strArray80 = commandLine78.getArgs();
        java.lang.Object obj82 = commandLine78.getOptionObject(' ');
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        java.lang.String str89 = option87.getArgName();
        boolean boolean91 = option87.equals((java.lang.Object) (byte) 100);
        java.lang.String str92 = option87.toString();
        commandLine78.addOption(option87);
        java.lang.String[] strArray94 = commandLine78.getArgs();
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser0.parse(options68, strArray94, properties95, false);
        java.util.List list98 = commandLine97.getArgList();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(collection69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(optionGroup77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "arg" + "'", str89, "arg");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[ option:    ::  ]" + "'", str92, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(list98);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        java.util.List list59 = options37.helpOptions();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasArg();
        boolean boolean66 = option64.isRequired();
        boolean boolean67 = option64.hasValueSeparator();
        option64.setDescription("[ option:    :: hi! ]");
        boolean boolean70 = option64.hasArg();
        org.apache.commons.cli.Options options71 = options37.addOption(option64);
        org.apache.commons.cli.OptionGroup optionGroup72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options71.addOptionGroup(optionGroup72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(options71);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Iterator iterator9 = commandLine8.iterator();
        java.lang.Class<?> wildcardClass10 = commandLine8.getClass();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean33 = option32.hasOptionalArg();
        java.lang.String str34 = option32.getArgName();
        boolean boolean36 = option32.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = option32.getLongOpt();
        java.lang.String str38 = option32.getKey();
        java.lang.Object obj39 = option32.getType();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        boolean boolean42 = options40.hasOption("hi!");
        org.apache.commons.cli.Options options46 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Option option48 = options46.getOption("");
        option32.setType((java.lang.Object) options46);
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean55 = option54.hasOptionalArg();
        java.lang.String str56 = option54.getArgName();
        boolean boolean58 = option54.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = option54.toString();
        option54.setLongOpt("[ option:    ::  ]");
        org.apache.commons.cli.Options options62 = options46.addOption(option54);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine63.getArgs();
        commandLine63.addArg("");
        java.lang.String str69 = commandLine63.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray71 = commandLine63.getOptionValues("");
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean77 = option76.hasOptionalArg();
        java.lang.String str78 = option76.getArgName();
        boolean boolean80 = option76.equals((java.lang.Object) (byte) 100);
        boolean boolean81 = option76.hasValueSeparator();
        java.lang.String str82 = option76.getLongOpt();
        commandLine63.addOption(option76);
        org.apache.commons.cli.Options options84 = options62.addOption(option76);
        java.lang.String[] strArray85 = null;
        org.apache.commons.cli.CommandLine commandLine87 = posixParser0.parse(options84, strArray85, true);
        java.lang.String str88 = options84.toString();
        org.apache.commons.cli.OptionGroup optionGroup89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options90 = options84.addOptionGroup(optionGroup89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "arg" + "'", str34, "arg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ option:    ::  ]" + "'", str59, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str69, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]" + "'", str88, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]");
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.OptionBuilder optionBuilder28 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) posixParser0);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        boolean boolean31 = options29.hasOption("hi!");
        org.apache.commons.cli.Options options35 = options29.addOption("", false, "arg");
        org.apache.commons.cli.CommandLine commandLine36 = new org.apache.commons.cli.CommandLine();
        java.lang.Object obj38 = commandLine36.getOptionObject('#');
        java.lang.Object obj40 = commandLine36.getOptionObject('\000');
        java.lang.String[] strArray41 = commandLine36.getArgs();
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser0.parse(options29, strArray41, properties42, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(optionBuilder28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(commandLine44);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        org.apache.commons.cli.Options options15 = options9.addOption("", false, "arg");
        java.lang.String str16 = options9.toString();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean22 = option21.hasArg();
        boolean boolean23 = option21.isRequired();
        boolean boolean24 = option21.hasOptionalArg();
        java.lang.String str25 = option21.toString();
        org.apache.commons.cli.OptionGroup optionGroup26 = options9.getOptionGroup(option21);
        org.apache.commons.cli.Options options30 = options9.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option32 = options30.getOption("hi!");
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        posixParser33.burstToken("", true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        java.lang.String[] strArray39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options37, strArray39, true);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        boolean boolean46 = options42.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine47.getArgs();
        java.lang.String[] strArray49 = commandLine47.getArgs();
        java.lang.String[] strArray51 = posixParser33.flatten(options42, strArray49, true);
        java.lang.String[] strArray53 = posixParser0.flatten(options30, strArray51, true);
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        java.lang.String str60 = option58.getArgName();
        boolean boolean62 = option58.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = option58.toString();
        option58.setArgs((int) (byte) 1);
        java.lang.String str66 = option58.getKey();
        option58.addValue("");
        boolean boolean69 = option58.hasArgs();
        java.lang.String str70 = option58.getKey();
        option58.setOptionalArg(true);
        org.apache.commons.cli.Options options73 = options30.addOption(option58);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str16, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ option:    ::  ]" + "'", str25, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNull(option32);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[ option:    ::  ]" + "'", str63, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(options73);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        commandLine76.addArg("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        java.util.List list79 = commandLine76.getArgList();
        java.lang.String str81 = commandLine76.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.String[] strArray83 = commandLine76.getOptionValues('#');
        boolean boolean85 = commandLine76.hasOption(' ');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        java.lang.Class<?> wildcardClass61 = posixParser0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean33 = option32.hasOptionalArg();
        java.lang.String str34 = option32.getArgName();
        boolean boolean36 = option32.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = option32.getLongOpt();
        java.lang.String str38 = option32.getKey();
        java.lang.Object obj39 = option32.getType();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        boolean boolean42 = options40.hasOption("hi!");
        org.apache.commons.cli.Options options46 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Option option48 = options46.getOption("");
        option32.setType((java.lang.Object) options46);
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean55 = option54.hasOptionalArg();
        java.lang.String str56 = option54.getArgName();
        boolean boolean58 = option54.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = option54.toString();
        option54.setLongOpt("[ option:    ::  ]");
        org.apache.commons.cli.Options options62 = options46.addOption(option54);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine63.getArgs();
        commandLine63.addArg("");
        java.lang.String str69 = commandLine63.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray71 = commandLine63.getOptionValues("");
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean77 = option76.hasOptionalArg();
        java.lang.String str78 = option76.getArgName();
        boolean boolean80 = option76.equals((java.lang.Object) (byte) 100);
        boolean boolean81 = option76.hasValueSeparator();
        java.lang.String str82 = option76.getLongOpt();
        commandLine63.addOption(option76);
        org.apache.commons.cli.Options options84 = options62.addOption(option76);
        java.lang.String[] strArray85 = null;
        org.apache.commons.cli.CommandLine commandLine87 = posixParser0.parse(options84, strArray85, true);
        java.lang.Object obj89 = commandLine87.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean91 = commandLine87.hasOption("arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "arg" + "'", str34, "arg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ option:    ::  ]" + "'", str59, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str69, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        boolean boolean44 = options39.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list45 = options39.getRequiredOptions();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("arg", false, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup52 = options39.getOptionGroup(option49);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNull(optionGroup52);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        option25.setValueSeparator('#');
        option25.setOptionalArg(true);
        boolean boolean68 = option25.hasOptionalArg();
        // The following exception was thrown during execution in test generation
        try {
            int int69 = option25.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("", "[ option:    ::  ]");
        option2.setRequired(false);
        char char5 = option2.getValueSeparator();
        boolean boolean6 = option2.hasLongOpt();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean12 = option11.hasOptionalArg();
        java.lang.String str13 = option11.getArgName();
        boolean boolean14 = option11.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        boolean boolean18 = options16.hasOption("hi!");
        org.apache.commons.cli.Options options22 = options16.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder23 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options22);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine24.getArgs();
        java.lang.String[] strArray26 = commandLine24.getArgs();
        java.lang.Object obj28 = commandLine24.getOptionObject(' ');
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean34 = option33.hasOptionalArg();
        java.lang.String str35 = option33.getArgName();
        boolean boolean37 = option33.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = option33.toString();
        commandLine24.addOption(option33);
        java.lang.String[] strArray40 = commandLine24.getArgs();
        java.lang.String[] strArray42 = posixParser15.flatten(options22, strArray40, true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.List list44 = options43.helpOptions();
        java.lang.String[] strArray45 = new java.lang.String[] {};
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser15.parse(options43, strArray45, properties46, false);
        boolean boolean49 = option11.equals((java.lang.Object) false);
        option11.setOptionalArg(false);
        boolean boolean52 = option2.equals((java.lang.Object) option11);
        boolean boolean53 = option11.hasOptionalArg();
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(optionBuilder23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "arg" + "'", str35, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[ option:    ::  ]" + "'", str38, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        java.lang.String[] strArray75 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options68, strArray75, false);
        org.apache.commons.cli.OptionBuilder optionBuilder78 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine77);
        java.lang.String str81 = commandLine77.getOptionValue('4', "org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(optionBuilder78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org.apache.commons.cli.ParseException: " + "'", str81, "org.apache.commons.cli.ParseException: ");
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        org.apache.commons.cli.Options options70 = null;
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        commandLine71.addArg("");
        java.lang.String str77 = commandLine71.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean79 = commandLine71.hasOption('4');
        java.lang.String[] strArray80 = commandLine71.getArgs();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine81 = posixParser10.parse(options70, strArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str77, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strArray80);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasOptionalArg();
        java.lang.String str88 = option86.getArgName();
        boolean boolean90 = option86.equals((java.lang.Object) (byte) 100);
        option86.setLongOpt("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Options options93 = options81.addOption(option86);
        java.lang.String str95 = option86.getValue((-2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        boolean boolean4 = options2.hasOption("hi!");
        org.apache.commons.cli.Options options8 = options2.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder9 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options8);
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine10.getArgs();
        java.lang.String[] strArray12 = commandLine10.getArgs();
        java.lang.Object obj14 = commandLine10.getOptionObject(' ');
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean20 = option19.hasOptionalArg();
        java.lang.String str21 = option19.getArgName();
        boolean boolean23 = option19.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = option19.toString();
        commandLine10.addOption(option19);
        java.lang.String[] strArray26 = commandLine10.getArgs();
        java.lang.String[] strArray28 = posixParser1.flatten(options8, strArray26, true);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.util.List list30 = options29.helpOptions();
        java.lang.String[] strArray31 = new java.lang.String[] {};
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser1.parse(options29, strArray31, properties32, false);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.getLongOpt();
        java.lang.String str45 = option39.getKey();
        java.lang.Object obj46 = option39.getType();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = options53.getOption("");
        option39.setType((java.lang.Object) options53);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        posixParser57.burstToken("", true);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.util.Collection collection62 = options61.getOptions();
        java.lang.String[] strArray63 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser57.parse(options61, strArray63, true);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        boolean boolean68 = options66.hasOption("hi!");
        boolean boolean70 = options66.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        java.lang.String[] strArray73 = commandLine71.getArgs();
        java.lang.String[] strArray75 = posixParser57.flatten(options66, strArray73, true);
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser1.parse(options53, strArray73, properties76, true);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options53, strArray79, true);
        java.lang.String str84 = commandLine81.getOptionValue('a', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray85 = commandLine81.getOptions();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(optionBuilder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:    ::  ]" + "'", str24, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str84, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(optionArray85);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray1 = commandLine0.getArgs();
        commandLine0.addArg("");
        java.lang.String[] strArray5 = commandLine0.getOptionValues("hi!");
        commandLine0.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean9 = commandLine0.hasOption('a');
        java.lang.String[] strArray10 = commandLine0.getArgs();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String str12 = options11.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        org.apache.commons.cli.OptionGroup optionGroup22 = options11.getOptionGroup(option17);
        boolean boolean23 = option17.hasArgs();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasOptionalArg();
        java.lang.Object obj32 = option28.getType();
        option28.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        boolean boolean44 = option39.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder53 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options52);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.lang.String[] strArray56 = commandLine54.getArgs();
        java.lang.Object obj58 = commandLine54.getOptionObject(' ');
        org.apache.commons.cli.Option option63 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean64 = option63.hasOptionalArg();
        java.lang.String str65 = option63.getArgName();
        boolean boolean67 = option63.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = option63.toString();
        commandLine54.addOption(option63);
        java.lang.String[] strArray70 = commandLine54.getArgs();
        java.lang.String[] strArray72 = posixParser45.flatten(options52, strArray70, true);
        boolean boolean73 = option39.equals((java.lang.Object) posixParser45);
        option28.setType((java.lang.Object) option39);
        boolean boolean75 = option17.equals((java.lang.Object) option28);
        java.lang.String str77 = option17.getValue("[ Options: [ short {} ] [ long {} ]");
        commandLine0.addOption(option17);
        option17.setOptionalArg(false);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(optionBuilder53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ option:    ::  ]" + "'", str68, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str77, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean7 = option4.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        org.apache.commons.cli.Options options15 = options9.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder16 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options15);
        org.apache.commons.cli.CommandLine commandLine17 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray18 = commandLine17.getArgs();
        java.lang.String[] strArray19 = commandLine17.getArgs();
        java.lang.Object obj21 = commandLine17.getOptionObject(' ');
        org.apache.commons.cli.Option option26 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean27 = option26.hasOptionalArg();
        java.lang.String str28 = option26.getArgName();
        boolean boolean30 = option26.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = option26.toString();
        commandLine17.addOption(option26);
        java.lang.String[] strArray33 = commandLine17.getArgs();
        java.lang.String[] strArray35 = posixParser8.flatten(options15, strArray33, true);
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.util.List list37 = options36.helpOptions();
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser8.parse(options36, strArray38, properties39, false);
        boolean boolean42 = option4.equals((java.lang.Object) false);
        java.lang.Object obj43 = option4.getType();
        boolean boolean44 = option4.hasArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertNotNull(optionBuilder16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "arg" + "'", str28, "arg");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[ option:    ::  ]" + "'", str31, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.lang.String str20 = commandLine17.getOptionValue("", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        boolean boolean22 = commandLine17.hasOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str28 = option27.getKey();
        java.lang.String[] strArray29 = option27.getValues();
        commandLine17.addOption(option27);
        option27.setDescription("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        boolean boolean33 = option27.hasValueSeparator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        posixParser0.burstToken("[ option:    ::  :: [ option:    ::  ] ]", false);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.util.List list34 = options33.helpOptions();
        java.util.List list35 = options33.helpOptions();
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine45.getArgs();
        java.lang.String[] strArray47 = commandLine45.getArgs();
        java.lang.Object obj49 = commandLine45.getOptionObject(' ');
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean55 = option54.hasOptionalArg();
        java.lang.String str56 = option54.getArgName();
        boolean boolean58 = option54.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = option54.toString();
        commandLine45.addOption(option54);
        java.lang.String[] strArray61 = commandLine45.getArgs();
        java.lang.String[] strArray63 = posixParser36.flatten(options43, strArray61, true);
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options33, strArray63);
        java.util.Collection collection65 = options33.getOptions();
        java.util.List list66 = options33.getRequiredOptions();
        org.apache.commons.cli.Options options70 = options33.addOption("", true, "[ option:    :: [ option:    :: hi! ] ]");
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean76 = option75.hasOptionalArg();
        java.lang.String str77 = option75.getArgName();
        boolean boolean79 = option75.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = option75.toString();
        option75.setArgs((int) (byte) 1);
        java.lang.String str83 = option75.getKey();
        option75.addValue("");
        boolean boolean86 = option75.hasValueSeparator();
        org.apache.commons.cli.OptionGroup optionGroup87 = options70.getOptionGroup(option75);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ option:    ::  ]" + "'", str59, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "arg" + "'", str77, "arg");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option:    ::  ]" + "'", str80, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(optionGroup87);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        java.lang.String str64 = option25.getValue();
        // The following exception was thrown during execution in test generation
        try {
            int int65 = option25.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        java.lang.Object obj52 = option38.getType();
        java.lang.String str53 = option38.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[ option:    ::  ]" + "'", str53, "[ option:    ::  ]");
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        boolean boolean70 = commandLine68.hasOption('#');
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean76 = option75.hasOptionalArg();
        java.lang.String str77 = option75.getArgName();
        boolean boolean79 = option75.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = option75.toString();
        option75.setArgs((int) (byte) 1);
        java.lang.String str83 = option75.getKey();
        option75.addValue("");
        char char86 = option75.getValueSeparator();
        int int87 = option75.getArgs();
        commandLine68.addOption(option75);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "arg" + "'", str77, "arg");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option:    ::  ]" + "'", str80, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + char86 + "' != '" + '\000' + "'", char86 == '\000');
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        org.apache.commons.cli.Option option81 = new org.apache.commons.cli.Option("", "hi!", true, "arg");
        java.lang.String str82 = option81.getDescription();
        option81.addValue("arg");
        int int85 = option81.getArgs();
        java.lang.String str86 = option81.getOpt();
        boolean boolean87 = option81.hasArgName();
        java.util.ListIterator listIterator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option81, listIterator88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "arg" + "'", str82, "arg");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        posixParser0.burstToken("", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean73 = option72.hasOptionalArg();
        java.lang.String str74 = option72.getArgName();
        boolean boolean75 = option72.hasOptionalArg();
        java.lang.Object obj76 = option72.getType();
        option72.setArgs((int) (byte) -1);
        commandLine67.addOption(option72);
        java.lang.String[] strArray81 = commandLine67.getOptionValues('#');
        org.apache.commons.cli.Option[] optionArray82 = commandLine67.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "arg" + "'", str74, "arg");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertNotNull(optionArray82);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        boolean boolean78 = commandLine76.hasOption("[ option:    ::  ]");
        java.lang.String[] strArray79 = commandLine76.getArgs();
        java.lang.String str81 = commandLine76.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Option option5 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean6 = option5.hasOptionalArg();
        java.lang.String str7 = option5.getArgName();
        boolean boolean9 = option5.equals((java.lang.Object) (byte) 100);
        boolean boolean10 = option5.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        boolean boolean14 = options12.hasOption("hi!");
        org.apache.commons.cli.Options options18 = options12.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder19 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options18);
        org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray21 = commandLine20.getArgs();
        java.lang.String[] strArray22 = commandLine20.getArgs();
        java.lang.Object obj24 = commandLine20.getOptionObject(' ');
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean30 = option29.hasOptionalArg();
        java.lang.String str31 = option29.getArgName();
        boolean boolean33 = option29.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = option29.toString();
        commandLine20.addOption(option29);
        java.lang.String[] strArray36 = commandLine20.getArgs();
        java.lang.String[] strArray38 = posixParser11.flatten(options18, strArray36, true);
        boolean boolean39 = option5.equals((java.lang.Object) posixParser11);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray41 = null;
        java.util.Properties properties42 = null;
        org.apache.commons.cli.CommandLine commandLine43 = posixParser11.parse(options40, strArray41, properties42);
        boolean boolean45 = options40.hasOption("");
        java.lang.String str46 = options40.toString();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        boolean boolean50 = options48.hasOption("hi!");
        org.apache.commons.cli.Options options54 = options48.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder55 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options54);
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        java.lang.String[] strArray58 = commandLine56.getArgs();
        java.lang.Object obj60 = commandLine56.getOptionObject(' ');
        org.apache.commons.cli.Option option65 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean66 = option65.hasOptionalArg();
        java.lang.String str67 = option65.getArgName();
        boolean boolean69 = option65.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = option65.toString();
        commandLine56.addOption(option65);
        java.lang.String[] strArray72 = commandLine56.getArgs();
        java.lang.String[] strArray74 = posixParser47.flatten(options54, strArray72, true);
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        java.util.List list76 = options75.helpOptions();
        java.lang.String[] strArray77 = new java.lang.String[] {};
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser47.parse(options75, strArray77, properties78, false);
        java.lang.String[] strArray82 = posixParser0.flatten(options40, strArray77, false);
        boolean boolean84 = options40.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options89 = options40.addOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!", "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]", true, "org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(optionBuilder19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ option:    ::  ]" + "'", str34, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str46, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNotNull(optionBuilder55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "arg" + "'", str67, "arg");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ option:    ::  ]" + "'", str70, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(list76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.util.Collection collection66 = options65.getOptions();
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean72 = option71.hasArg();
        boolean boolean73 = option71.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup74 = options65.getOptionGroup(option71);
        org.apache.commons.cli.Option option79 = new org.apache.commons.cli.Option("", "hi!", true, "arg");
        java.lang.String str80 = option79.getDescription();
        option79.addValue("arg");
        int int83 = option79.getArgs();
        org.apache.commons.cli.Options options84 = options65.addOption(option79);
        java.util.List list85 = options65.helpOptions();
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray87 = commandLine86.getArgs();
        java.lang.String[] strArray88 = commandLine86.getArgs();
        java.util.Iterator iterator89 = commandLine86.iterator();
        boolean boolean91 = commandLine86.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.Object obj93 = commandLine86.getOptionObject('a');
        java.lang.String[] strArray94 = commandLine86.getArgs();
        java.lang.String[] strArray96 = posixParser0.flatten(options65, strArray94, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(collection66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "arg" + "'", str80, "arg");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(list85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        org.apache.commons.cli.Options options15 = options9.addOption("", false, "arg");
        java.lang.String str16 = options9.toString();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean22 = option21.hasArg();
        boolean boolean23 = option21.isRequired();
        boolean boolean24 = option21.hasOptionalArg();
        java.lang.String str25 = option21.toString();
        org.apache.commons.cli.OptionGroup optionGroup26 = options9.getOptionGroup(option21);
        org.apache.commons.cli.Options options30 = options9.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option32 = options30.getOption("hi!");
        org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser();
        posixParser33.burstToken("", true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        java.lang.String[] strArray39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser33.parse(options37, strArray39, true);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        boolean boolean46 = options42.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine47 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray48 = commandLine47.getArgs();
        java.lang.String[] strArray49 = commandLine47.getArgs();
        java.lang.String[] strArray51 = posixParser33.flatten(options42, strArray49, true);
        java.lang.String[] strArray53 = posixParser0.flatten(options30, strArray51, true);
        org.apache.commons.cli.Options options54 = null;
        java.lang.String[] strArray55 = null;
        java.util.Properties properties56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options54, strArray55, properties56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(options15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str16, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ option:    ::  ]" + "'", str25, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(options30);
        org.junit.Assert.assertNull(option32);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        option25.setValueSeparator('#');
        char char66 = option25.getValueSeparator();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + char66 + "' != '" + '#' + "'", char66 == '#');
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.lang.String str11 = commandLine8.getOptionValue('\000', "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.Object obj13 = commandLine8.getOptionObject("[ option:    ::  ]");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str11, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("", "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.Object obj3 = option2.getType();
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        boolean boolean7 = options5.hasOption("hi!");
        org.apache.commons.cli.Options options11 = options5.addOption("", false, "arg");
        org.apache.commons.cli.Option option13 = options11.getOption("");
        java.lang.String[] strArray19 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine21 = posixParser4.parse(options11, strArray19, false);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        java.util.Collection collection23 = options22.getOptions();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasArg();
        boolean boolean30 = option28.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup31 = options22.getOptionGroup(option28);
        java.lang.String str32 = options22.toString();
        org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray34 = commandLine33.getArgs();
        java.lang.String[] strArray35 = commandLine33.getArgs();
        java.lang.Object obj37 = commandLine33.getOptionObject(' ');
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasOptionalArg();
        java.lang.String str44 = option42.getArgName();
        boolean boolean46 = option42.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = option42.toString();
        commandLine33.addOption(option42);
        java.lang.String[] strArray49 = commandLine33.getArgs();
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser4.parse(options22, strArray49, properties50, true);
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        posixParser53.burstToken("", true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.util.Collection collection58 = options57.getOptions();
        java.lang.String[] strArray59 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser53.parse(options57, strArray59, true);
        java.lang.String str62 = options57.toString();
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine63.getArgs();
        java.lang.String[] strArray65 = commandLine63.getArgs();
        java.lang.Object obj67 = commandLine63.getOptionObject(' ');
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean73 = option72.hasOptionalArg();
        java.lang.String str74 = option72.getArgName();
        boolean boolean76 = option72.equals((java.lang.Object) (byte) 100);
        java.lang.String str77 = option72.toString();
        commandLine63.addOption(option72);
        java.lang.String[] strArray79 = commandLine63.getArgs();
        org.apache.commons.cli.CommandLine commandLine81 = posixParser4.parse(options57, strArray79, true);
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasOptionalArg();
        java.lang.String str88 = option86.getArgName();
        boolean boolean90 = option86.equals((java.lang.Object) (byte) 100);
        boolean boolean91 = option86.hasValueSeparator();
        commandLine81.addOption(option86);
        java.lang.Object obj94 = commandLine81.getOptionObject("arg");
        option2.setType((java.lang.Object) commandLine81);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(collection23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ option:    ::  ]" + "'", str47, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str62, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "arg" + "'", str74, "arg");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ option:    ::  ]" + "'", str77, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        java.util.Collection collection34 = options28.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options36 = options28.addOptionGroup(optionGroup35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection34);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        org.apache.commons.cli.Option[] optionArray63 = commandLine62.getOptions();
        java.lang.String str65 = commandLine62.getOptionValue("[ option:   :: hi! ]");
        commandLine62.addArg("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(optionArray63);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Option[] optionArray9 = commandLine8.getOptions();
        java.lang.Object obj11 = commandLine8.getOptionObject("[ option:    ::  :: [ option:    ::  ] ]");
        org.apache.commons.cli.Option[] optionArray12 = commandLine8.getOptions();
        java.lang.String str14 = commandLine8.getOptionValue('#');
        java.lang.Object obj16 = commandLine8.getOptionObject("[ option:   :: hi! ]");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(optionArray9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(optionArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        commandLine76.addArg("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        java.util.List list79 = commandLine76.getArgList();
        java.lang.String str81 = commandLine76.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.String[] strArray83 = commandLine76.getOptionValues("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(strArray83);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        boolean boolean31 = options29.hasOption("hi!");
        org.apache.commons.cli.Options options35 = options29.addOption("", false, "arg");
        org.apache.commons.cli.Option option37 = options35.getOption("");
        java.lang.String[] strArray43 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine45 = posixParser28.parse(options35, strArray43, false);
        org.apache.commons.cli.Option option47 = options35.getOption("");
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean55 = option52.hasOptionalArg();
        java.lang.Object obj56 = option52.getType();
        option52.setArgs((int) (byte) -1);
        java.lang.String str59 = option52.getArgName();
        boolean boolean60 = option52.hasOptionalArg();
        java.lang.String str62 = option52.getValue((int) (short) 0);
        java.lang.String str63 = option52.getOpt();
        org.apache.commons.cli.OptionGroup optionGroup64 = options35.getOptionGroup(option52);
        java.lang.String str65 = options35.toString();
        java.lang.String[] strArray66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options35, strArray66);
        posixParser0.burstToken("", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(option37);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str65, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(commandLine67);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        java.lang.String str63 = options34.toString();
        org.apache.commons.cli.Option option65 = options34.getOption("org.apache.commons.cli.MissingArgumentException: [ option:    ::  ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options69 = options34.addOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false, "[ option: arg  :: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ] ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str63, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(option65);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Option option19 = options7.getOption("");
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasOptionalArg();
        java.lang.String str26 = option24.getArgName();
        boolean boolean27 = option24.hasOptionalArg();
        java.lang.Object obj28 = option24.getType();
        option24.setArgs((int) (byte) -1);
        java.lang.String str31 = option24.getArgName();
        boolean boolean32 = option24.hasOptionalArg();
        java.lang.String str34 = option24.getValue((int) (short) 0);
        java.lang.String str35 = option24.getOpt();
        org.apache.commons.cli.OptionGroup optionGroup36 = options7.getOptionGroup(option24);
        java.lang.String str37 = options7.toString();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasOptionalArg();
        java.lang.String str44 = option42.getArgName();
        boolean boolean46 = option42.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = option42.getOpt();
        java.lang.String str48 = option42.getArgName();
        option42.setOptionalArg(false);
        java.lang.String str51 = option42.getLongOpt();
        org.apache.commons.cli.OptionGroup optionGroup52 = options7.getOptionGroup(option42);
        boolean boolean53 = option42.hasLongOpt();
        java.lang.String[] strArray54 = option42.getValues();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "arg" + "'", str31, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str37, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "arg" + "'", str48, "arg");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(strArray54);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        java.util.Collection collection81 = options80.getOptions();
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasArg();
        boolean boolean88 = option86.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup89 = options80.getOptionGroup(option86);
        org.apache.commons.cli.OptionGroup optionGroup90 = options77.getOptionGroup(option86);
        boolean boolean91 = option86.hasLongOpt();
        java.lang.String str93 = option86.getValue((-2));
        option86.setDescription("");
        org.apache.commons.cli.Options options96 = options43.addOption(option86);
        java.lang.String str97 = option86.getValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(options96);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean38 = option37.hasOptionalArg();
        java.lang.String str39 = option37.getArgName();
        boolean boolean40 = option37.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        org.apache.commons.cli.Options options48 = options42.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder49 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options48);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine50.getArgs();
        java.lang.String[] strArray52 = commandLine50.getArgs();
        java.lang.Object obj54 = commandLine50.getOptionObject(' ');
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = option59.toString();
        commandLine50.addOption(option59);
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.lang.String[] strArray68 = posixParser41.flatten(options48, strArray66, true);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.util.List list70 = options69.helpOptions();
        java.lang.String[] strArray71 = new java.lang.String[] {};
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser41.parse(options69, strArray71, properties72, false);
        boolean boolean75 = option37.equals((java.lang.Object) false);
        org.apache.commons.cli.Options options76 = options28.addOption(option37);
        java.lang.String str77 = option37.getArgName();
        boolean boolean78 = option37.hasArgName();
        // The following exception was thrown during execution in test generation
        try {
            int int79 = option37.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionBuilder49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option:    ::  ]" + "'", str64, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "arg" + "'", str77, "arg");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        boolean boolean62 = option4.hasArgs();
        option4.setOptionalArg(false);
        java.lang.String str66 = option4.getValue((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        java.lang.Object obj52 = null;
        boolean boolean53 = option38.equals(obj52);
        option38.setArgs((int) (short) 0);
        option38.setArgName("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        int int58 = option38.getArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean85 = option82.hasOptionalArg();
        commandLine77.addOption(option82);
        java.lang.String[] strArray88 = commandLine77.getOptionValues("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(strArray88);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        org.apache.commons.cli.Options options65 = options59.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder66 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options65);
        java.util.List list67 = options65.helpOptions();
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        posixParser68.burstToken("", true);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        java.util.Collection collection73 = options72.getOptions();
        java.lang.String[] strArray74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser68.parse(options72, strArray74, true);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        boolean boolean81 = options77.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine82 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray83 = commandLine82.getArgs();
        java.lang.String[] strArray84 = commandLine82.getArgs();
        java.lang.String[] strArray86 = posixParser68.flatten(options77, strArray84, true);
        java.lang.String[] strArray88 = posixParser0.flatten(options65, strArray84, true);
        posixParser0.burstToken("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(optionBuilder66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        java.lang.String str30 = options9.toString();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean36 = option35.hasArg();
        boolean boolean37 = option35.isRequired();
        boolean boolean38 = option35.hasValueSeparator();
        option35.setDescription("[ option:    :: hi! ]");
        boolean boolean41 = option35.hasArg();
        boolean boolean42 = option35.hasValueSeparator();
        org.apache.commons.cli.Options options43 = options9.addOption(option35);
        option35.setArgName("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str30, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(options43);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Option option32 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean33 = option32.hasOptionalArg();
        java.lang.String str34 = option32.getArgName();
        boolean boolean36 = option32.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = option32.getLongOpt();
        java.lang.String str38 = option32.getKey();
        java.lang.Object obj39 = option32.getType();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        boolean boolean42 = options40.hasOption("hi!");
        org.apache.commons.cli.Options options46 = options40.addOption("", false, "arg");
        org.apache.commons.cli.Option option48 = options46.getOption("");
        option32.setType((java.lang.Object) options46);
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean55 = option54.hasOptionalArg();
        java.lang.String str56 = option54.getArgName();
        boolean boolean58 = option54.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = option54.toString();
        option54.setLongOpt("[ option:    ::  ]");
        org.apache.commons.cli.Options options62 = options46.addOption(option54);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine63.getArgs();
        commandLine63.addArg("");
        java.lang.String str69 = commandLine63.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray71 = commandLine63.getOptionValues("");
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean77 = option76.hasOptionalArg();
        java.lang.String str78 = option76.getArgName();
        boolean boolean80 = option76.equals((java.lang.Object) (byte) 100);
        boolean boolean81 = option76.hasValueSeparator();
        java.lang.String str82 = option76.getLongOpt();
        commandLine63.addOption(option76);
        org.apache.commons.cli.Options options84 = options62.addOption(option76);
        java.lang.String[] strArray85 = null;
        org.apache.commons.cli.CommandLine commandLine87 = posixParser0.parse(options84, strArray85, true);
        java.lang.String str88 = options84.toString();
        java.lang.String str89 = options84.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options94 = options84.addOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: arg", false, "org.apache.commons.cli.MissingArgumentException: [ option:    ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "arg" + "'", str34, "arg");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(options46);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ option:    ::  ]" + "'", str59, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str69, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]" + "'", str88, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]" + "'", str89, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]");
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        org.apache.commons.cli.Options options77 = new org.apache.commons.cli.Options();
        boolean boolean79 = options77.hasOption("hi!");
        org.apache.commons.cli.Options options80 = new org.apache.commons.cli.Options();
        java.util.Collection collection81 = options80.getOptions();
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasArg();
        boolean boolean88 = option86.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup89 = options80.getOptionGroup(option86);
        org.apache.commons.cli.OptionGroup optionGroup90 = options77.getOptionGroup(option86);
        boolean boolean91 = option86.hasLongOpt();
        java.lang.String str93 = option86.getValue((-2));
        option86.setDescription("");
        org.apache.commons.cli.Options options96 = options43.addOption(option86);
        java.util.Collection collection97 = options96.getOptionGroups();
        java.util.Collection collection98 = options96.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(optionGroup90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(options96);
        org.junit.Assert.assertNotNull(collection97);
        org.junit.Assert.assertNotNull(collection98);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        java.util.Collection collection65 = options49.getOptions();
        java.util.Collection collection66 = options49.getOptions();
        java.lang.String str67 = options49.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(collection66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str67, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        java.util.Iterator iterator61 = commandLine60.iterator();
        org.apache.commons.cli.CommandLine commandLine62 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray63 = commandLine62.getArgs();
        commandLine62.addArg("");
        java.lang.String[] strArray67 = commandLine62.getOptionValues("hi!");
        java.lang.String[] strArray69 = commandLine62.getOptionValues("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option74 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str76 = option74.getValue((int) (byte) 10);
        org.apache.commons.cli.CommandLine commandLine77 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray78 = commandLine77.getArgs();
        commandLine77.addArg("");
        java.util.List list81 = commandLine77.getArgList();
        commandLine77.addArg("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray84 = commandLine77.getOptions();
        boolean boolean85 = option74.equals((java.lang.Object) optionArray84);
        java.lang.String str86 = option74.getOpt();
        commandLine62.addOption(option74);
        commandLine60.addOption(option74);
        boolean boolean89 = option74.hasOptionalArg();
        org.apache.commons.cli.OptionBuilder optionBuilder90 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) boolean89);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(iterator61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(list81);
        org.junit.Assert.assertNotNull(optionArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(optionBuilder90);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.lang.String str20 = commandLine17.getOptionValue("", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        boolean boolean22 = commandLine17.hasOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str25 = commandLine17.getOptionValue("", "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str25, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.cli.CommandLine commandLine0 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray1 = commandLine0.getArgs();
        commandLine0.addArg("");
        java.lang.String[] strArray5 = commandLine0.getOptionValues("hi!");
        commandLine0.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean9 = commandLine0.hasOption('a');
        java.lang.String[] strArray10 = commandLine0.getArgs();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String str12 = options11.toString();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        org.apache.commons.cli.OptionGroup optionGroup22 = options11.getOptionGroup(option17);
        boolean boolean23 = option17.hasArgs();
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean31 = option28.hasOptionalArg();
        java.lang.Object obj32 = option28.getType();
        option28.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        boolean boolean44 = option39.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder53 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options52);
        org.apache.commons.cli.CommandLine commandLine54 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.lang.String[] strArray56 = commandLine54.getArgs();
        java.lang.Object obj58 = commandLine54.getOptionObject(' ');
        org.apache.commons.cli.Option option63 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean64 = option63.hasOptionalArg();
        java.lang.String str65 = option63.getArgName();
        boolean boolean67 = option63.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = option63.toString();
        commandLine54.addOption(option63);
        java.lang.String[] strArray70 = commandLine54.getArgs();
        java.lang.String[] strArray72 = posixParser45.flatten(options52, strArray70, true);
        boolean boolean73 = option39.equals((java.lang.Object) posixParser45);
        option28.setType((java.lang.Object) option39);
        boolean boolean75 = option17.equals((java.lang.Object) option28);
        java.lang.String str77 = option17.getValue("[ Options: [ short {} ] [ long {} ]");
        commandLine0.addOption(option17);
        java.lang.String[] strArray80 = commandLine0.getOptionValues("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str12, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(optionBuilder53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ option:    ::  ]" + "'", str68, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str77, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray80);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        boolean boolean65 = options63.hasOption("hi!");
        org.apache.commons.cli.Options options69 = options63.addOption("", false, "arg");
        java.lang.String str70 = options63.toString();
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean76 = option75.hasArg();
        boolean boolean77 = option75.isRequired();
        boolean boolean78 = option75.hasOptionalArg();
        java.lang.String str79 = option75.toString();
        org.apache.commons.cli.OptionGroup optionGroup80 = options63.getOptionGroup(option75);
        org.apache.commons.cli.Options options84 = options63.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.util.List list85 = options84.getRequiredOptions();
        org.apache.commons.cli.CommandLine commandLine86 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray87 = commandLine86.getArgs();
        commandLine86.addArg("");
        java.util.List list90 = commandLine86.getArgList();
        commandLine86.addArg("[ Options: [ short {} ] [ long {} ]");
        boolean boolean94 = commandLine86.hasOption('4');
        java.lang.String[] strArray95 = commandLine86.getArgs();
        java.lang.String[] strArray97 = posixParser0.flatten(options84, strArray95, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[ option:    ::  ]" + "'", str79, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(list85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strArray97);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasOption("hi!");
        org.apache.commons.cli.Options options6 = options0.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder7 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options6);
        java.util.List list8 = options6.helpOptions();
        java.util.Collection collection9 = options6.getOptionGroups();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        option14.setArgName("");
        boolean boolean18 = option14.hasOptionalArg();
        int int19 = option14.getArgs();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasOptionalArg();
        java.lang.String str26 = option24.getArgName();
        boolean boolean27 = option24.hasOptionalArg();
        java.lang.Object obj28 = option24.getType();
        option24.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean36 = option35.hasOptionalArg();
        java.lang.String str37 = option35.getArgName();
        boolean boolean39 = option35.equals((java.lang.Object) (byte) 100);
        boolean boolean40 = option35.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        boolean boolean44 = options42.hasOption("hi!");
        org.apache.commons.cli.Options options48 = options42.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder49 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options48);
        org.apache.commons.cli.CommandLine commandLine50 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray51 = commandLine50.getArgs();
        java.lang.String[] strArray52 = commandLine50.getArgs();
        java.lang.Object obj54 = commandLine50.getOptionObject(' ');
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean60 = option59.hasOptionalArg();
        java.lang.String str61 = option59.getArgName();
        boolean boolean63 = option59.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = option59.toString();
        commandLine50.addOption(option59);
        java.lang.String[] strArray66 = commandLine50.getArgs();
        java.lang.String[] strArray68 = posixParser41.flatten(options48, strArray66, true);
        boolean boolean69 = option35.equals((java.lang.Object) posixParser41);
        option24.setType((java.lang.Object) option35);
        option14.setType((java.lang.Object) option35);
        org.apache.commons.cli.OptionGroup optionGroup72 = options6.getOptionGroup(option35);
        option35.setArgName("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(optionBuilder7);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "arg" + "'", str37, "arg");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(optionBuilder49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ option:    ::  ]" + "'", str64, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(optionGroup72);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.util.List list2 = options1.getRequiredOptions();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean8 = option7.hasOptionalArg();
        java.lang.String str9 = option7.getArgName();
        boolean boolean11 = option7.equals((java.lang.Object) (byte) 100);
        boolean boolean12 = option7.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser13 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        boolean boolean16 = options14.hasOption("hi!");
        org.apache.commons.cli.Options options20 = options14.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder21 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options20);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray23 = commandLine22.getArgs();
        java.lang.String[] strArray24 = commandLine22.getArgs();
        java.lang.Object obj26 = commandLine22.getOptionObject(' ');
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean32 = option31.hasOptionalArg();
        java.lang.String str33 = option31.getArgName();
        boolean boolean35 = option31.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = option31.toString();
        commandLine22.addOption(option31);
        java.lang.String[] strArray38 = commandLine22.getArgs();
        java.lang.String[] strArray40 = posixParser13.flatten(options20, strArray38, true);
        boolean boolean41 = option7.equals((java.lang.Object) posixParser13);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        java.util.Collection collection43 = options42.getOptions();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean49 = option48.hasArg();
        boolean boolean50 = option48.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option48);
        java.lang.String str52 = options42.toString();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        posixParser53.burstToken("", true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.util.Collection collection58 = options57.getOptions();
        java.lang.String[] strArray59 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser53.parse(options57, strArray59, true);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        boolean boolean64 = options62.hasOption("hi!");
        boolean boolean66 = options62.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine67.getArgs();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser53.flatten(options62, strArray69, true);
        org.apache.commons.cli.CommandLine commandLine72 = posixParser13.parse(options42, strArray69);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options1, strArray69, properties73);
        boolean boolean76 = commandLine74.hasOption(' ');
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(optionBuilder21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[ option:    ::  ]" + "'", str36, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(collection43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str52, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        java.util.List list33 = options28.helpOptions();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.util.List list56 = options55.getRequiredOptions();
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean62 = option61.hasOptionalArg();
        option61.setArgName("");
        boolean boolean65 = option61.hasOptionalArg();
        int int66 = option61.getArgs();
        boolean boolean67 = option61.hasLongOpt();
        org.apache.commons.cli.OptionGroup optionGroup68 = options55.getOptionGroup(option61);
        option61.setRequired(true);
        org.apache.commons.cli.Options options71 = options28.addOption(option61);
        java.util.Collection collection72 = options28.getOptionGroups();
        java.lang.String str73 = options28.toString();
        java.lang.String str74 = options28.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertNotNull(options71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str73, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str74, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        boolean boolean22 = options18.hasOption("hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean28 = option27.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup29 = options18.getOptionGroup(option27);
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean35 = option34.hasOptionalArg();
        java.lang.String str36 = option34.getArgName();
        boolean boolean37 = option34.hasOptionalArg();
        java.lang.Object obj38 = option34.getType();
        option34.setArgs((int) (byte) -1);
        java.lang.String str41 = option34.getArgName();
        org.apache.commons.cli.Options options42 = options18.addOption(option34);
        org.apache.commons.cli.Options options43 = options7.addOption(option34);
        java.lang.String str44 = options43.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str44, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        boolean boolean62 = option4.hasArgs();
        int int63 = option4.getArgs();
        int int64 = option4.getArgs();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean70 = option69.hasOptionalArg();
        java.lang.String str71 = option69.getArgName();
        boolean boolean73 = option69.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = option69.toString();
        option69.setArgs((int) (byte) 1);
        java.lang.String str77 = option69.getKey();
        option69.addValue("");
        boolean boolean80 = option69.hasArgs();
        java.lang.String str81 = option69.getValue();
        java.lang.String str82 = option69.getLongOpt();
        java.lang.String[] strArray83 = option69.getValues();
        option69.setDescription("");
        java.lang.String str87 = option69.getValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.apache.commons.cli.Options options88 = new org.apache.commons.cli.Options();
        java.util.List list89 = options88.helpOptions();
        java.util.List list90 = options88.helpOptions();
        boolean boolean91 = option69.equals((java.lang.Object) list90);
        boolean boolean92 = option4.equals((java.lang.Object) option69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "arg" + "'", str71, "arg");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ option:    ::  ]" + "'", str74, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(list90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.Collection collection38 = options37.getOptions();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean47 = option43.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = option43.toString();
        option43.setArgs((int) (byte) 1);
        java.lang.String str51 = option43.getKey();
        option43.addValue("");
        boolean boolean54 = option43.hasArgs();
        java.lang.String str55 = option43.getValue();
        java.lang.String str56 = option43.getLongOpt();
        java.lang.String[] strArray57 = option43.getValues();
        org.apache.commons.cli.CommandLine commandLine58 = posixParser0.parse(options37, strArray57);
        java.util.Collection collection59 = options37.getOptionGroups();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.getLongOpt();
        java.lang.String str70 = option64.getKey();
        java.lang.Object obj71 = option64.getType();
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        boolean boolean74 = options72.hasOption("hi!");
        org.apache.commons.cli.Options options78 = options72.addOption("", false, "arg");
        org.apache.commons.cli.Option option80 = options78.getOption("");
        option64.setType((java.lang.Object) options78);
        java.lang.String str82 = option64.getArgName();
        java.lang.String str84 = option64.getValue("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.OptionGroup optionGroup85 = options37.getOptionGroup(option64);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ option:    ::  ]" + "'", str48, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(option80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "arg" + "'", str82, "arg");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str84, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(optionGroup85);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        posixParser0.burstToken("[ Options: [ short {=[ option:  +ARG :: [ option:    ::  ] ]} ] [ long {} ]", false);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        boolean boolean66 = options64.hasOption("hi!");
        boolean boolean68 = options64.hasOption("hi!");
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup75 = options64.getOptionGroup(option73);
        org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean81 = option80.hasOptionalArg();
        java.lang.String str82 = option80.getArgName();
        boolean boolean83 = option80.hasOptionalArg();
        java.lang.Object obj84 = option80.getType();
        option80.setArgs((int) (byte) -1);
        java.lang.String str87 = option80.getArgName();
        org.apache.commons.cli.Options options88 = options64.addOption(option80);
        boolean boolean90 = options64.hasOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray91 = null;
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options64, strArray91, properties92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "arg" + "'", str82, "arg");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "arg" + "'", str87, "arg");
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(commandLine93);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        boolean boolean62 = option4.hasArgs();
        java.lang.String str63 = option4.toString();
        option4.setRequired(true);
        java.lang.String str66 = option4.getDescription();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[ option:    ::  :: [ option:    ::  ] ]" + "'", str63, "[ option:    ::  :: [ option:    ::  ] ]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        posixParser0.burstToken("[ option:    :: hi! ]", false);
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasArg();
        boolean boolean70 = option68.isRequired();
        boolean boolean71 = option68.hasLongOpt();
        java.util.ListIterator listIterator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option68, listIterator72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        java.lang.String str44 = commandLine42.getOptionValue('\000');
        org.apache.commons.cli.Option[] optionArray45 = commandLine42.getOptions();
        java.lang.Object obj47 = commandLine42.getOptionObject("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ], [ option:    ::  ]=[ option:  [ option:    ::  ]  ::  ]} ]");
        java.lang.String str50 = commandLine42.getOptionValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", "[ option:   :: hi! ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(optionArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:   :: hi! ]" + "'", str50, "[ option:   :: hi! ]");
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.util.List list10 = options4.helpOptions();
        java.lang.String str11 = options4.toString();
        org.apache.commons.cli.CommandLine commandLine12 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray13 = commandLine12.getArgs();
        java.lang.String[] strArray14 = commandLine12.getArgs();
        java.lang.Object obj16 = commandLine12.getOptionObject(' ');
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean22 = option21.hasOptionalArg();
        java.lang.String str23 = option21.getArgName();
        boolean boolean25 = option21.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = option21.toString();
        commandLine12.addOption(option21);
        option21.setValueSeparator('4');
        boolean boolean30 = option21.hasLongOpt();
        java.lang.String str31 = option21.getLongOpt();
        java.lang.String[] strArray32 = option21.getValues();
        org.apache.commons.cli.OptionGroup optionGroup33 = options4.getOptionGroup(option21);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        java.util.List list44 = option38.getValuesList();
        option38.setLongOpt("");
        java.lang.String str47 = option38.getDescription();
        boolean boolean48 = option38.hasArg();
        java.lang.String str50 = option38.getValue("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Options options51 = options4.addOption(option38);
        java.util.List list52 = options51.helpOptions();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ option:    ::  ]" + "'", str26, "[ option:    ::  ]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(strArray32);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str50, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(list52);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        commandLine77.addOption(option82);
        java.lang.String str91 = commandLine77.getOptionValue('#', "[ option:    ::  ]");
        java.lang.String str93 = commandLine77.getOptionValue('\000');
        org.apache.commons.cli.Option[] optionArray94 = commandLine77.getOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ option:    ::  ]" + "'", str91, "[ option:    ::  ]");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(optionArray94);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        posixParser28.burstToken("", true);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.util.Collection collection33 = options32.getOptions();
        java.lang.String[] strArray34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser28.parse(options32, strArray34, true);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        boolean boolean41 = options37.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine42 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray43 = commandLine42.getArgs();
        java.lang.String[] strArray44 = commandLine42.getArgs();
        java.lang.String[] strArray46 = posixParser28.flatten(options37, strArray44, true);
        java.lang.String[] strArray47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options37, strArray47);
        boolean boolean50 = options37.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.Collection collection51 = options37.getOptionGroups();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(collection33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(collection51);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        java.util.List list72 = options39.getRequiredOptions();
        java.util.Collection collection73 = options39.getOptions();
        java.util.Collection collection74 = options39.getOptionGroups();
        java.lang.String str75 = options39.toString();
        org.apache.commons.cli.Option option77 = options39.getOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str75, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(option77);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Option[] optionArray78 = commandLine77.getOptions();
        java.lang.Object obj80 = commandLine77.getOptionObject('#');
        boolean boolean82 = commandLine77.hasOption('#');
        java.util.List list83 = commandLine77.getArgList();
        java.lang.Object obj85 = commandLine77.getOptionObject('#');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(optionArray78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(list83);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        boolean boolean41 = options37.hasOption("hi!");
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup48 = options37.getOptionGroup(option46);
        boolean boolean50 = options37.hasOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.List list51 = options37.helpOptions();
        org.apache.commons.cli.Option option53 = options37.getOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser54 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        boolean boolean57 = options55.hasOption("hi!");
        org.apache.commons.cli.Options options61 = options55.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder62 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options61);
        org.apache.commons.cli.CommandLine commandLine63 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray64 = commandLine63.getArgs();
        java.lang.String[] strArray65 = commandLine63.getArgs();
        java.lang.Object obj67 = commandLine63.getOptionObject(' ');
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean73 = option72.hasOptionalArg();
        java.lang.String str74 = option72.getArgName();
        boolean boolean76 = option72.equals((java.lang.Object) (byte) 100);
        java.lang.String str77 = option72.toString();
        commandLine63.addOption(option72);
        java.lang.String[] strArray79 = commandLine63.getArgs();
        java.lang.String[] strArray81 = posixParser54.flatten(options61, strArray79, true);
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray84 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine86 = posixParser54.parse(options82, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options37, strArray84, true);
        java.lang.String str89 = options37.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(list51);
        org.junit.Assert.assertNull(option53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(optionBuilder62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "arg" + "'", str74, "arg");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[ option:    ::  ]" + "'", str77, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine86);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str89, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        commandLine76.addArg("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        java.util.List list79 = commandLine76.getArgList();
        java.lang.String str81 = commandLine76.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.String str84 = commandLine76.getOptionValue("org.apache.commons.cli.MissingOptionException: arg", "org.apache.commons.cli.MissingOptionException: arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.apache.commons.cli.MissingOptionException: arg" + "'", str84, "org.apache.commons.cli.MissingOptionException: arg");
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options28, strArray30, true);
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean38 = option37.hasArg();
        option37.setValueSeparator('4');
        java.lang.String str42 = option37.getValue(0);
        boolean boolean43 = option37.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup44 = options28.getOptionGroup(option37);
        java.util.List list45 = options28.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(list45);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        java.util.List list72 = options39.getRequiredOptions();
        java.util.Collection collection73 = options39.getOptions();
        java.util.Collection collection74 = options39.getOptionGroups();
        org.apache.commons.cli.Options options78 = options39.addOption("", false, "org.apache.commons.cli.MissingOptionException: arg");
        java.util.Collection collection79 = options39.getOptionGroups();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(collection79);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        java.lang.String str70 = commandLine67.getOptionValue("[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.String str73 = commandLine67.getOptionValue('a', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str73, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        option38.setArgName("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("", "[ option:    ::  ]");
        option2.setRequired(false);
        char char5 = option2.getValueSeparator();
        boolean boolean6 = option2.hasLongOpt();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean12 = option11.hasOptionalArg();
        java.lang.String str13 = option11.getArgName();
        boolean boolean14 = option11.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        boolean boolean18 = options16.hasOption("hi!");
        org.apache.commons.cli.Options options22 = options16.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder23 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options22);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine24.getArgs();
        java.lang.String[] strArray26 = commandLine24.getArgs();
        java.lang.Object obj28 = commandLine24.getOptionObject(' ');
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean34 = option33.hasOptionalArg();
        java.lang.String str35 = option33.getArgName();
        boolean boolean37 = option33.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = option33.toString();
        commandLine24.addOption(option33);
        java.lang.String[] strArray40 = commandLine24.getArgs();
        java.lang.String[] strArray42 = posixParser15.flatten(options22, strArray40, true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.List list44 = options43.helpOptions();
        java.lang.String[] strArray45 = new java.lang.String[] {};
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser15.parse(options43, strArray45, properties46, false);
        boolean boolean49 = option11.equals((java.lang.Object) false);
        option11.setOptionalArg(false);
        boolean boolean52 = option2.equals((java.lang.Object) option11);
        java.lang.String str53 = option2.getLongOpt();
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(optionBuilder23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "arg" + "'", str35, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[ option:    ::  ]" + "'", str38, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        boolean boolean82 = options78.hasOption("hi!");
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup89 = options78.getOptionGroup(option87);
        java.lang.Object obj90 = option87.getType();
        commandLine77.addOption(option87);
        java.util.Iterator iterator92 = commandLine77.iterator();
        commandLine77.addArg("org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(iterator92);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasOptionalArg();
        java.lang.String str88 = option86.getArgName();
        boolean boolean90 = option86.equals((java.lang.Object) (byte) 100);
        option86.setLongOpt("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Options options93 = options81.addOption(option86);
        java.util.Collection collection94 = options93.getOptions();
        java.util.Collection collection95 = options93.getOptionGroups();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNotNull(collection94);
        org.junit.Assert.assertNotNull(collection95);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String str70 = options69.toString();
        java.util.List list71 = options69.helpOptions();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine72.getArgs();
        java.lang.String[] strArray74 = commandLine72.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser10.parse(options69, strArray74, properties75, false);
        java.lang.String[] strArray79 = commandLine77.getOptionValues("[ option:    :: hi! ]");
        java.lang.String str82 = commandLine77.getOptionValue('#', "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        java.lang.String str85 = commandLine77.getOptionValue('#', "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str70, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str82, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str85, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Option[] optionArray9 = commandLine8.getOptions();
        java.lang.Object obj11 = commandLine8.getOptionObject("[ option:    ::  :: [ option:    ::  ] ]");
        org.apache.commons.cli.Option[] optionArray12 = commandLine8.getOptions();
        java.lang.String str14 = commandLine8.getOptionValue('#');
        java.lang.Object obj16 = commandLine8.getOptionObject("");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(optionArray9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(optionArray12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        java.lang.String str70 = commandLine67.getOptionValue("[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.String[] strArray72 = commandLine67.getOptionValues('\000');
        boolean boolean74 = commandLine67.hasOption("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Option[] optionArray9 = commandLine8.getOptions();
        java.lang.Object obj11 = commandLine8.getOptionObject("[ option:    ::  :: [ option:    ::  ] ]");
        java.lang.Object obj13 = commandLine8.getOptionObject('\000');
        java.lang.Object obj15 = commandLine8.getOptionObject("[ option:    :: [ option:    :: hi! ] ]");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(optionArray9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.List list9 = options4.helpOptions();
        boolean boolean11 = options4.hasOption("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options69 = options49.addOption("org.apache.commons.cli.MissingOptionException: arg", "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!", false, "org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        boolean boolean43 = option38.hasValueSeparator();
        boolean boolean44 = option38.isRequired();
        java.lang.String str45 = option38.getKey();
        boolean boolean46 = option38.hasArgName();
        option38.setLongOpt("");
        boolean boolean49 = option38.hasArg();
        java.lang.String str50 = option38.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options28.getOptionGroup(option38);
        option38.setRequired(true);
        java.lang.Object obj54 = option38.getType();
        option38.setOptionalArg(false);
        boolean boolean57 = option38.hasOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Option option10 = options4.getOption("[ option: arg   :: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ] :: -1 ]");
        java.lang.Class<?> wildcardClass11 = options4.getClass();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNull(option10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        org.apache.commons.cli.Option[] optionArray63 = commandLine62.getOptions();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        boolean boolean66 = options64.hasOption("hi!");
        org.apache.commons.cli.Options options70 = options64.addOption("", false, "arg");
        java.lang.String str71 = options64.toString();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean77 = option76.hasOptionalArg();
        java.lang.String str78 = option76.getArgName();
        boolean boolean80 = option76.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = option76.toString();
        option76.setArgs((int) (byte) 1);
        java.lang.String str84 = option76.getKey();
        org.apache.commons.cli.OptionGroup optionGroup85 = options64.getOptionGroup(option76);
        java.lang.String str86 = option76.getKey();
        option76.setOptionalArg(true);
        option76.setValueSeparator('#');
        commandLine62.addOption(option76);
        java.lang.String[] strArray92 = commandLine62.getArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(optionArray63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ option:    ::  ]" + "'", str81, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(strArray92);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.lang.String str58 = options53.toString();
        org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray60 = commandLine59.getArgs();
        java.lang.String[] strArray61 = commandLine59.getArgs();
        java.lang.Object obj63 = commandLine59.getOptionObject(' ');
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasOptionalArg();
        java.lang.String str70 = option68.getArgName();
        boolean boolean72 = option68.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = option68.toString();
        commandLine59.addOption(option68);
        java.lang.String[] strArray75 = commandLine59.getArgs();
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options53, strArray75, true);
        org.apache.commons.cli.Options options81 = options53.addOption("", true, "[ option:    ::  ]");
        org.apache.commons.cli.Option option86 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean87 = option86.hasOptionalArg();
        java.lang.String str88 = option86.getArgName();
        boolean boolean90 = option86.equals((java.lang.Object) (byte) 100);
        option86.setLongOpt("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Options options93 = options81.addOption(option86);
        java.util.List list94 = options93.getRequiredOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str58, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ option:    ::  ]" + "'", str73, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNotNull(list94);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.util.List list2 = options1.getRequiredOptions();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean8 = option7.hasOptionalArg();
        java.lang.String str9 = option7.getArgName();
        boolean boolean11 = option7.equals((java.lang.Object) (byte) 100);
        boolean boolean12 = option7.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser13 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        boolean boolean16 = options14.hasOption("hi!");
        org.apache.commons.cli.Options options20 = options14.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder21 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options20);
        org.apache.commons.cli.CommandLine commandLine22 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray23 = commandLine22.getArgs();
        java.lang.String[] strArray24 = commandLine22.getArgs();
        java.lang.Object obj26 = commandLine22.getOptionObject(' ');
        org.apache.commons.cli.Option option31 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean32 = option31.hasOptionalArg();
        java.lang.String str33 = option31.getArgName();
        boolean boolean35 = option31.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = option31.toString();
        commandLine22.addOption(option31);
        java.lang.String[] strArray38 = commandLine22.getArgs();
        java.lang.String[] strArray40 = posixParser13.flatten(options20, strArray38, true);
        boolean boolean41 = option7.equals((java.lang.Object) posixParser13);
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        java.util.Collection collection43 = options42.getOptions();
        org.apache.commons.cli.Option option48 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean49 = option48.hasArg();
        boolean boolean50 = option48.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup51 = options42.getOptionGroup(option48);
        java.lang.String str52 = options42.toString();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        posixParser53.burstToken("", true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.util.Collection collection58 = options57.getOptions();
        java.lang.String[] strArray59 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser53.parse(options57, strArray59, true);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        boolean boolean64 = options62.hasOption("hi!");
        boolean boolean66 = options62.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray68 = commandLine67.getArgs();
        java.lang.String[] strArray69 = commandLine67.getArgs();
        java.lang.String[] strArray71 = posixParser53.flatten(options62, strArray69, true);
        org.apache.commons.cli.CommandLine commandLine72 = posixParser13.parse(options42, strArray69);
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options1, strArray69, properties73);
        org.apache.commons.cli.PosixParser posixParser75 = new org.apache.commons.cli.PosixParser();
        posixParser75.burstToken("", true);
        org.apache.commons.cli.Options options79 = new org.apache.commons.cli.Options();
        java.util.Collection collection80 = options79.getOptions();
        java.lang.String[] strArray81 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser75.parse(options79, strArray81, true);
        java.lang.String[] strArray84 = null;
        java.util.Properties properties85 = null;
        org.apache.commons.cli.CommandLine commandLine87 = posixParser0.parse(options79, strArray84, properties85, false);
        java.util.Iterator iterator88 = commandLine87.iterator();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(optionBuilder21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[ option:    ::  ]" + "'", str36, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(collection43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str52, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(commandLine72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(collection80);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(iterator88);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String str70 = options69.toString();
        java.util.List list71 = options69.helpOptions();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine72.getArgs();
        java.lang.String[] strArray74 = commandLine72.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser10.parse(options69, strArray74, properties75, false);
        org.apache.commons.cli.Option option82 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean83 = option82.hasOptionalArg();
        java.lang.String str84 = option82.getArgName();
        boolean boolean86 = option82.equals((java.lang.Object) (byte) 100);
        boolean boolean87 = option82.hasValueSeparator();
        java.util.List list88 = option82.getValuesList();
        option82.setLongOpt("");
        java.lang.String str92 = option82.getValue(100);
        java.lang.String str93 = option82.getValue();
        org.apache.commons.cli.Options options94 = options69.addOption(option82);
        java.lang.String str95 = option82.getKey();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str70, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(list88);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(options94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.lang.String str1 = options0.toString();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean7 = option6.hasOptionalArg();
        java.lang.String str8 = option6.getArgName();
        boolean boolean9 = option6.hasOptionalArg();
        java.lang.Object obj10 = option6.getType();
        org.apache.commons.cli.OptionGroup optionGroup11 = options0.getOptionGroup(option6);
        boolean boolean12 = option6.hasArgs();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasOptionalArg();
        java.lang.String str19 = option17.getArgName();
        boolean boolean20 = option17.hasOptionalArg();
        java.lang.Object obj21 = option17.getType();
        option17.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = option28.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder42 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options41);
        org.apache.commons.cli.CommandLine commandLine43 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray44 = commandLine43.getArgs();
        java.lang.String[] strArray45 = commandLine43.getArgs();
        java.lang.Object obj47 = commandLine43.getOptionObject(' ');
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasOptionalArg();
        java.lang.String str54 = option52.getArgName();
        boolean boolean56 = option52.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = option52.toString();
        commandLine43.addOption(option52);
        java.lang.String[] strArray59 = commandLine43.getArgs();
        java.lang.String[] strArray61 = posixParser34.flatten(options41, strArray59, true);
        boolean boolean62 = option28.equals((java.lang.Object) posixParser34);
        option17.setType((java.lang.Object) option28);
        boolean boolean64 = option6.equals((java.lang.Object) option17);
        option17.setArgs((int) (byte) 1);
        java.lang.Object obj67 = option17.getType();
        option17.setDescription("org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str1, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(optionBuilder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "[ option:    ::  ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "[ option:    ::  ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "[ option:    ::  ]");
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean54 = option53.hasArg();
        boolean boolean55 = option53.isRequired();
        boolean boolean56 = option53.hasOptionalArg();
        java.lang.String str57 = option53.toString();
        java.lang.String str58 = option53.getOpt();
        java.lang.String[] strArray59 = option53.getValues();
        org.apache.commons.cli.Options options60 = options18.addOption(option53);
        org.apache.commons.cli.Option option62 = options60.getOption("[ option:   :: hi! ]");
        java.util.List list63 = options60.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[ option:    ::  ]" + "'", str57, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(strArray59);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNull(option62);
        org.junit.Assert.assertNotNull(list63);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        boolean boolean2 = options0.hasOption("hi!");
        org.apache.commons.cli.Options options6 = options0.addOption("", false, "arg");
        org.apache.commons.cli.Option option8 = options6.getOption("");
        int int9 = option8.getArgs();
        boolean boolean10 = option8.hasArgName();
        char char11 = option8.getValueSeparator();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        boolean boolean15 = options13.hasOption("hi!");
        org.apache.commons.cli.Options options19 = options13.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder20 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options19);
        org.apache.commons.cli.CommandLine commandLine21 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray22 = commandLine21.getArgs();
        java.lang.String[] strArray23 = commandLine21.getArgs();
        java.lang.Object obj25 = commandLine21.getOptionObject(' ');
        org.apache.commons.cli.Option option30 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean31 = option30.hasOptionalArg();
        java.lang.String str32 = option30.getArgName();
        boolean boolean34 = option30.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = option30.toString();
        commandLine21.addOption(option30);
        java.lang.String[] strArray37 = commandLine21.getArgs();
        java.lang.String[] strArray39 = posixParser12.flatten(options19, strArray37, true);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.util.List list41 = options40.helpOptions();
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine45 = posixParser12.parse(options40, strArray42, properties43, false);
        boolean boolean46 = option8.equals((java.lang.Object) commandLine45);
        java.lang.String str47 = option8.getOpt();
        java.lang.Object obj48 = option8.getType();
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        posixParser49.burstToken("", true);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.util.Collection collection54 = options53.getOptions();
        java.lang.String[] strArray55 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser49.parse(options53, strArray55, true);
        java.util.Iterator iterator58 = commandLine57.iterator();
        java.lang.Object obj60 = commandLine57.getOptionObject('4');
        boolean boolean61 = option8.equals(obj60);
        option8.setArgs((int) '#');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(option8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + '\000' + "'", char11 == '\000');
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(optionBuilder20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "arg" + "'", str32, "arg");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[ option:    ::  ]" + "'", str35, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(iterator58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.lang.Object obj10 = commandLine8.getOptionObject('4');
        java.lang.Object obj12 = commandLine8.getOptionObject('\000');
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        char char78 = option73.getValueSeparator();
        commandLine68.addOption(option73);
        java.lang.String str82 = commandLine68.getOptionValue('#', "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.String[] strArray83 = commandLine68.getArgs();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + char78 + "' != '" + '\000' + "'", char78 == '\000');
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str82, "org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray83);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options34 = options9.addOption("[ option:    :: [ option:    :: hi! ] ]", "org.apache.commons.cli.MissingOptionException: ", false, "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.lang.String str9 = options4.toString();
        java.util.Collection collection10 = options4.getOptions();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        option15.setArgs((int) (byte) 100);
        java.lang.String str20 = option15.getOpt();
        boolean boolean21 = option15.hasArgName();
        org.apache.commons.cli.Options options22 = options4.addOption(option15);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str9, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(options22);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        boolean boolean12 = options10.hasOption("hi!");
        org.apache.commons.cli.Options options16 = options10.addOption("", false, "arg");
        org.apache.commons.cli.Option option18 = options16.getOption("");
        java.lang.String[] strArray24 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine26 = posixParser9.parse(options16, strArray24, false);
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        boolean boolean31 = options27.hasOption("hi!");
        org.apache.commons.cli.Option option36 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean37 = option36.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup38 = options27.getOptionGroup(option36);
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean44 = option43.hasOptionalArg();
        java.lang.String str45 = option43.getArgName();
        boolean boolean46 = option43.hasOptionalArg();
        java.lang.Object obj47 = option43.getType();
        option43.setArgs((int) (byte) -1);
        java.lang.String str50 = option43.getArgName();
        org.apache.commons.cli.Options options51 = options27.addOption(option43);
        org.apache.commons.cli.Options options52 = options16.addOption(option43);
        org.apache.commons.cli.Option option54 = options52.getOption("org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        boolean boolean58 = options56.hasOption("hi!");
        org.apache.commons.cli.Options options62 = options56.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder63 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options62);
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.Object obj68 = commandLine64.getOptionObject(' ');
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean74 = option73.hasOptionalArg();
        java.lang.String str75 = option73.getArgName();
        boolean boolean77 = option73.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = option73.toString();
        commandLine64.addOption(option73);
        java.lang.String[] strArray80 = commandLine64.getArgs();
        java.lang.String[] strArray82 = posixParser55.flatten(options62, strArray80, true);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray85 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine87 = posixParser55.parse(options83, strArray85, true);
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser0.parse(options52, strArray85, properties88);
        org.apache.commons.cli.Option option91 = options52.getOption("");
        java.lang.String str92 = option91.getDescription();
        boolean boolean93 = option91.hasOptionalArg();
        java.lang.String str95 = option91.getValue(0);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(option18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "arg" + "'", str50, "arg");
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNull(option54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(optionBuilder63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[ option:    ::  ]" + "'", str78, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(commandLine87);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(option91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        java.lang.Object obj62 = option4.getType();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "[ option:    ::  ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "[ option:    ::  ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "[ option:    ::  ]");
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        posixParser0.burstToken("[ option:    ::  :: [ option:    ::  ] ]", false);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.util.List list34 = options33.helpOptions();
        java.util.List list35 = options33.helpOptions();
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine45.getArgs();
        java.lang.String[] strArray47 = commandLine45.getArgs();
        java.lang.Object obj49 = commandLine45.getOptionObject(' ');
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean55 = option54.hasOptionalArg();
        java.lang.String str56 = option54.getArgName();
        boolean boolean58 = option54.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = option54.toString();
        commandLine45.addOption(option54);
        java.lang.String[] strArray61 = commandLine45.getArgs();
        java.lang.String[] strArray63 = posixParser36.flatten(options43, strArray61, true);
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options33, strArray63);
        java.util.Collection collection65 = options33.getOptions();
        java.util.List list66 = options33.helpOptions();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ option:    ::  ]" + "'", str59, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(list66);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        java.util.Collection collection45 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder54 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options53);
        org.apache.commons.cli.CommandLine commandLine55 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray56 = commandLine55.getArgs();
        java.lang.String[] strArray57 = commandLine55.getArgs();
        java.lang.Object obj59 = commandLine55.getOptionObject(' ');
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean65 = option64.hasOptionalArg();
        java.lang.String str66 = option64.getArgName();
        boolean boolean68 = option64.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = option64.toString();
        commandLine55.addOption(option64);
        java.lang.String[] strArray71 = commandLine55.getArgs();
        java.lang.String[] strArray73 = posixParser46.flatten(options53, strArray71, true);
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options43, strArray73, properties74, false);
        java.lang.String str79 = commandLine76.getOptionValue("[ option:    ::  ]", "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String str82 = commandLine76.getOptionValue('a', "hi!");
        java.lang.Object obj84 = commandLine76.getOptionObject('4');
        boolean boolean86 = commandLine76.hasOption('#');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(collection45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(optionBuilder54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[ option:    ::  ]" + "'", str69, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!" + "'", str79, "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        java.lang.String str50 = options49.toString();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean56 = option55.hasOptionalArg();
        java.lang.String str57 = option55.getArgName();
        boolean boolean58 = option55.hasOptionalArg();
        java.lang.Object obj59 = option55.getType();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option55);
        org.apache.commons.cli.Options options64 = options49.addOption("", false, "");
        java.lang.String[] strArray65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options49, strArray65, false);
        java.lang.String[] strArray68 = commandLine67.getArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str50, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray68);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Option[] optionArray9 = commandLine8.getOptions();
        java.lang.String[] strArray11 = commandLine8.getOptionValues("");
        boolean boolean13 = commandLine8.hasOption('a');
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(optionArray9);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        boolean boolean11 = options9.hasOption("hi!");
        boolean boolean13 = options9.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine14 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray15 = commandLine14.getArgs();
        java.lang.String[] strArray16 = commandLine14.getArgs();
        java.lang.String[] strArray18 = posixParser0.flatten(options9, strArray16, true);
        org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean24 = option23.hasOptionalArg();
        java.lang.String str25 = option23.getArgName();
        boolean boolean27 = option23.equals((java.lang.Object) (byte) 100);
        boolean boolean28 = option23.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        boolean boolean32 = options30.hasOption("hi!");
        org.apache.commons.cli.Options options36 = options30.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder37 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options36);
        org.apache.commons.cli.CommandLine commandLine38 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray39 = commandLine38.getArgs();
        java.lang.String[] strArray40 = commandLine38.getArgs();
        java.lang.Object obj42 = commandLine38.getOptionObject(' ');
        org.apache.commons.cli.Option option47 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean48 = option47.hasOptionalArg();
        java.lang.String str49 = option47.getArgName();
        boolean boolean51 = option47.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = option47.toString();
        commandLine38.addOption(option47);
        java.lang.String[] strArray54 = commandLine38.getArgs();
        java.lang.String[] strArray56 = posixParser29.flatten(options36, strArray54, true);
        boolean boolean57 = option23.equals((java.lang.Object) posixParser29);
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray59 = null;
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser29.parse(options58, strArray59, properties60);
        boolean boolean63 = options58.hasOption("");
        java.lang.String str64 = options58.toString();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean70 = option69.hasOptionalArg();
        java.lang.String str71 = option69.getArgName();
        boolean boolean72 = option69.hasArgs();
        java.lang.String str73 = option69.getValue();
        java.lang.String[] strArray74 = option69.getValues();
        org.apache.commons.cli.Options options75 = options58.addOption(option69);
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create('4');
        boolean boolean78 = option77.isRequired();
        boolean boolean79 = option77.hasArgs();
        org.apache.commons.cli.OptionGroup optionGroup80 = options58.getOptionGroup(option77);
        java.lang.String[] strArray81 = null;
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser0.parse(options58, strArray81, properties82);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(optionBuilder37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[ option:    ::  ]" + "'", str52, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str64, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "arg" + "'", str71, "arg");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(strArray74);
        org.junit.Assert.assertNotNull(options75);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(commandLine83);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        boolean boolean82 = options78.hasOption("hi!");
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup89 = options78.getOptionGroup(option87);
        java.lang.Object obj90 = option87.getType();
        commandLine77.addOption(option87);
        java.lang.String str93 = option87.getValue("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org.apache.commons.cli.MissingOptionException: " + "'", str93, "org.apache.commons.cli.MissingOptionException: ");
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        posixParser39.burstToken("", true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.Collection collection44 = options43.getOptions();
        java.lang.String[] strArray45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser39.parse(options43, strArray45, true);
        org.apache.commons.cli.PosixParser posixParser48 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        org.apache.commons.cli.Options options55 = options49.addOption("", false, "arg");
        org.apache.commons.cli.Option option57 = options55.getOption("");
        java.lang.String[] strArray63 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser48.parse(options55, strArray63, false);
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser10.parse(options43, strArray63, properties66, false);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String str70 = options69.toString();
        java.util.List list71 = options69.helpOptions();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray73 = commandLine72.getArgs();
        java.lang.String[] strArray74 = commandLine72.getArgs();
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser10.parse(options69, strArray74, properties75, false);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        org.apache.commons.cli.Options options84 = options78.addOption("", false, "arg");
        java.lang.String str85 = options78.toString();
        org.apache.commons.cli.Option option87 = options78.getOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.CommandLine commandLine88 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray89 = commandLine88.getArgs();
        java.lang.String[] strArray90 = commandLine88.getArgs();
        org.apache.commons.cli.Option[] optionArray91 = commandLine88.getOptions();
        boolean boolean93 = commandLine88.hasOption(' ');
        java.lang.String[] strArray94 = commandLine88.getArgs();
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser10.parse(options78, strArray94, properties95);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str70, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str85, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNull(option87);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(optionArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        boolean boolean4 = options2.hasOption("hi!");
        org.apache.commons.cli.Options options8 = options2.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder9 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options8);
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine10.getArgs();
        java.lang.String[] strArray12 = commandLine10.getArgs();
        java.lang.Object obj14 = commandLine10.getOptionObject(' ');
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean20 = option19.hasOptionalArg();
        java.lang.String str21 = option19.getArgName();
        boolean boolean23 = option19.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = option19.toString();
        commandLine10.addOption(option19);
        java.lang.String[] strArray26 = commandLine10.getArgs();
        java.lang.String[] strArray28 = posixParser1.flatten(options8, strArray26, true);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.util.List list30 = options29.helpOptions();
        java.lang.String[] strArray31 = new java.lang.String[] {};
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser1.parse(options29, strArray31, properties32, false);
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean40 = option39.hasOptionalArg();
        java.lang.String str41 = option39.getArgName();
        boolean boolean43 = option39.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = option39.getLongOpt();
        java.lang.String str45 = option39.getKey();
        java.lang.Object obj46 = option39.getType();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        boolean boolean49 = options47.hasOption("hi!");
        org.apache.commons.cli.Options options53 = options47.addOption("", false, "arg");
        org.apache.commons.cli.Option option55 = options53.getOption("");
        option39.setType((java.lang.Object) options53);
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        posixParser57.burstToken("", true);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.util.Collection collection62 = options61.getOptions();
        java.lang.String[] strArray63 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser57.parse(options61, strArray63, true);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        boolean boolean68 = options66.hasOption("hi!");
        boolean boolean70 = options66.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine71 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray72 = commandLine71.getArgs();
        java.lang.String[] strArray73 = commandLine71.getArgs();
        java.lang.String[] strArray75 = posixParser57.flatten(options66, strArray73, true);
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser1.parse(options53, strArray73, properties76, true);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options53, strArray79, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: ", false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(optionBuilder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:    ::  ]" + "'", str24, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertNotNull(collection62);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        java.lang.String str70 = commandLine67.getOptionValue("[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        boolean boolean72 = commandLine67.hasOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str70, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.util.List list10 = options4.helpOptions();
        java.util.List list11 = options4.helpOptions();
        boolean boolean13 = options4.hasOption("org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        java.util.List list65 = options49.getRequiredOptions();
        org.apache.commons.cli.Option option67 = options49.getOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingOptionException: arg");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNull(option67);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        java.lang.String str72 = options39.toString();
        java.util.Collection collection73 = options39.getOptionGroups();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str72, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection73);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        java.lang.String str64 = option25.getValue();
        boolean boolean65 = option25.hasValueSeparator();
        java.lang.String str66 = option25.getDescription();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        option4.setArgName("");
        boolean boolean8 = option4.hasOptionalArg();
        int int9 = option4.getArgs();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean15 = option14.hasOptionalArg();
        java.lang.String str16 = option14.getArgName();
        boolean boolean17 = option14.hasOptionalArg();
        java.lang.Object obj18 = option14.getType();
        option14.setArgs((int) (byte) -1);
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean26 = option25.hasOptionalArg();
        java.lang.String str27 = option25.getArgName();
        boolean boolean29 = option25.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = option25.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        boolean boolean34 = options32.hasOption("hi!");
        org.apache.commons.cli.Options options38 = options32.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options38);
        org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray41 = commandLine40.getArgs();
        java.lang.String[] strArray42 = commandLine40.getArgs();
        java.lang.Object obj44 = commandLine40.getOptionObject(' ');
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean50 = option49.hasOptionalArg();
        java.lang.String str51 = option49.getArgName();
        boolean boolean53 = option49.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = option49.toString();
        commandLine40.addOption(option49);
        java.lang.String[] strArray56 = commandLine40.getArgs();
        java.lang.String[] strArray58 = posixParser31.flatten(options38, strArray56, true);
        boolean boolean59 = option25.equals((java.lang.Object) posixParser31);
        option14.setType((java.lang.Object) option25);
        option4.setType((java.lang.Object) option25);
        option25.setArgs(0);
        java.lang.String str64 = option25.getValue();
        option25.setArgs((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[ option:    ::  ]" + "'", str54, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.Collection collection35 = options34.getOptions();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean41 = option40.hasArg();
        boolean boolean42 = option40.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup43 = options34.getOptionGroup(option40);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        boolean boolean47 = options45.hasOption("hi!");
        org.apache.commons.cli.Options options51 = options45.addOption("", false, "arg");
        org.apache.commons.cli.Option option53 = options51.getOption("");
        java.lang.String[] strArray59 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine61 = posixParser44.parse(options51, strArray59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options34, strArray59);
        org.apache.commons.cli.Option[] optionArray63 = commandLine62.getOptions();
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        boolean boolean66 = options64.hasOption("hi!");
        org.apache.commons.cli.Options options70 = options64.addOption("", false, "arg");
        java.lang.String str71 = options64.toString();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean77 = option76.hasOptionalArg();
        java.lang.String str78 = option76.getArgName();
        boolean boolean80 = option76.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = option76.toString();
        option76.setArgs((int) (byte) 1);
        java.lang.String str84 = option76.getKey();
        org.apache.commons.cli.OptionGroup optionGroup85 = options64.getOptionGroup(option76);
        java.lang.String str86 = option76.getKey();
        option76.setOptionalArg(true);
        option76.setValueSeparator('#');
        commandLine62.addOption(option76);
        boolean boolean92 = option76.hasArg();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(option53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(optionArray63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str71, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ option:    ::  ]" + "'", str81, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(optionGroup85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        boolean boolean44 = options39.hasOption("");
        java.lang.String str45 = options39.toString();
        java.util.List list46 = options39.helpOptions();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str45, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list46);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.getLongOpt();
        java.lang.String str44 = option38.getKey();
        java.lang.Object obj45 = option38.getType();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.Option option54 = options52.getOption("");
        option38.setType((java.lang.Object) options52);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        posixParser56.burstToken("", true);
        org.apache.commons.cli.Options options60 = new org.apache.commons.cli.Options();
        java.util.Collection collection61 = options60.getOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser56.parse(options60, strArray62, true);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        boolean boolean67 = options65.hasOption("hi!");
        boolean boolean69 = options65.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray71 = commandLine70.getArgs();
        java.lang.String[] strArray72 = commandLine70.getArgs();
        java.lang.String[] strArray74 = posixParser56.flatten(options65, strArray72, true);
        java.util.Properties properties75 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options52, strArray72, properties75, true);
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        boolean boolean80 = options78.hasOption("hi!");
        boolean boolean82 = options78.hasOption("hi!");
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean88 = option87.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup89 = options78.getOptionGroup(option87);
        java.lang.Object obj90 = option87.getType();
        commandLine77.addOption(option87);
        java.lang.String str92 = option87.getValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertNotNull(collection61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(optionGroup89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        posixParser0.burstToken("[ option:    ::  :: [ option:    ::  ] ]", false);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.util.List list34 = options33.helpOptions();
        java.util.List list35 = options33.helpOptions();
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        boolean boolean39 = options37.hasOption("hi!");
        org.apache.commons.cli.Options options43 = options37.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder44 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options43);
        org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray46 = commandLine45.getArgs();
        java.lang.String[] strArray47 = commandLine45.getArgs();
        java.lang.Object obj49 = commandLine45.getOptionObject(' ');
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean55 = option54.hasOptionalArg();
        java.lang.String str56 = option54.getArgName();
        boolean boolean58 = option54.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = option54.toString();
        commandLine45.addOption(option54);
        java.lang.String[] strArray61 = commandLine45.getArgs();
        java.lang.String[] strArray63 = posixParser36.flatten(options43, strArray61, true);
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options33, strArray63);
        java.util.Collection collection65 = options33.getOptions();
        java.util.List list66 = options33.getRequiredOptions();
        org.apache.commons.cli.Options options70 = options33.addOption("", true, "[ option:    :: [ option:    :: hi! ] ]");
        boolean boolean72 = options70.hasOption("");
        java.lang.String str73 = options70.toString();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(optionBuilder44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ option:    ::  ]" + "'", str59, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(collection65);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertNotNull(options70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[ Options: [ short {=[ option:  +ARG :: [ option:    :: [ option:    :: hi! ] ] ]} ] [ long {} ]" + "'", str73, "[ Options: [ short {=[ option:  +ARG :: [ option:    :: [ option:    :: hi! ] ] ]} ] [ long {} ]");
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("", "[ option:    ::  ]");
        option2.setRequired(false);
        char char5 = option2.getValueSeparator();
        boolean boolean6 = option2.hasLongOpt();
        org.apache.commons.cli.Option option11 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean12 = option11.hasOptionalArg();
        java.lang.String str13 = option11.getArgName();
        boolean boolean14 = option11.hasOptionalArg();
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        boolean boolean18 = options16.hasOption("hi!");
        org.apache.commons.cli.Options options22 = options16.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder23 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options22);
        org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray25 = commandLine24.getArgs();
        java.lang.String[] strArray26 = commandLine24.getArgs();
        java.lang.Object obj28 = commandLine24.getOptionObject(' ');
        org.apache.commons.cli.Option option33 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean34 = option33.hasOptionalArg();
        java.lang.String str35 = option33.getArgName();
        boolean boolean37 = option33.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = option33.toString();
        commandLine24.addOption(option33);
        java.lang.String[] strArray40 = commandLine24.getArgs();
        java.lang.String[] strArray42 = posixParser15.flatten(options22, strArray40, true);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.util.List list44 = options43.helpOptions();
        java.lang.String[] strArray45 = new java.lang.String[] {};
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser15.parse(options43, strArray45, properties46, false);
        boolean boolean49 = option11.equals((java.lang.Object) false);
        option11.setOptionalArg(false);
        boolean boolean52 = option2.equals((java.lang.Object) option11);
        java.lang.Object obj53 = option11.getType();
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(optionBuilder23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "arg" + "'", str35, "arg");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[ option:    ::  ]" + "'", str38, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        boolean boolean20 = options18.hasOption("hi!");
        org.apache.commons.cli.Options options24 = options18.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder25 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        boolean boolean29 = options27.hasOption("hi!");
        org.apache.commons.cli.Options options33 = options27.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder34 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options33);
        org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray36 = commandLine35.getArgs();
        java.lang.String[] strArray37 = commandLine35.getArgs();
        java.lang.Object obj39 = commandLine35.getOptionObject(' ');
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasOptionalArg();
        java.lang.String str46 = option44.getArgName();
        boolean boolean48 = option44.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = option44.toString();
        commandLine35.addOption(option44);
        java.lang.String[] strArray51 = commandLine35.getArgs();
        java.lang.String[] strArray53 = posixParser26.flatten(options33, strArray51, true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.helpOptions();
        java.lang.String[] strArray56 = new java.lang.String[] {};
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser26.parse(options54, strArray56, properties57, false);
        org.apache.commons.cli.CommandLine commandLine60 = posixParser0.parse(options24, strArray56);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        java.lang.String str62 = options61.toString();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean68 = option67.hasOptionalArg();
        java.lang.String str69 = option67.getArgName();
        boolean boolean70 = option67.hasOptionalArg();
        java.lang.Object obj71 = option67.getType();
        org.apache.commons.cli.OptionGroup optionGroup72 = options61.getOptionGroup(option67);
        boolean boolean73 = option67.hasArgs();
        org.apache.commons.cli.OptionGroup optionGroup74 = options24.getOptionGroup(option67);
        boolean boolean76 = options24.hasOption("hi!");
        boolean boolean78 = options24.hasOption("org.apache.commons.cli.ParseException: [ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(options24);
        org.junit.Assert.assertNotNull(optionBuilder25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(optionBuilder34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ option:    ::  ]" + "'", str49, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str62, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "arg" + "'", str69, "arg");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        boolean boolean51 = options49.hasOption("hi!");
        boolean boolean53 = options49.hasOption("hi!");
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean59 = option58.hasOptionalArg();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option58);
        java.util.List list61 = options49.helpOptions();
        java.lang.String[] strArray62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options49, strArray62, true);
        org.apache.commons.cli.Option option65 = null;
        java.util.ListIterator listIterator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option65, listIterator66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(commandLine64);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        boolean boolean36 = options34.hasOption("hi!");
        org.apache.commons.cli.Options options40 = options34.addOption("", false, "arg");
        java.lang.String str41 = options34.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean47 = option46.hasArg();
        boolean boolean48 = option46.isRequired();
        boolean boolean49 = option46.hasOptionalArg();
        java.lang.String str50 = option46.toString();
        org.apache.commons.cli.OptionGroup optionGroup51 = options34.getOptionGroup(option46);
        org.apache.commons.cli.Options options55 = options34.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine56 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray57 = commandLine56.getArgs();
        commandLine56.addArg("");
        java.lang.String str62 = commandLine56.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean64 = commandLine56.hasOption('4');
        java.lang.String[] strArray65 = commandLine56.getArgs();
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options34, strArray65, properties66);
        boolean boolean69 = commandLine67.hasOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str41, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ option:    ::  ]" + "'", str50, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(options55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str62, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        posixParser0.burstToken("[ option:    ::  :: [ option:    ::  ] ]", false);
        org.apache.commons.cli.Options options33 = null;
        org.apache.commons.cli.CommandLine commandLine34 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray35 = commandLine34.getArgs();
        commandLine34.addArg("");
        java.lang.String str40 = commandLine34.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray42 = commandLine34.getOptionValues("");
        java.lang.String str45 = commandLine34.getOptionValue("org.apache.commons.cli.MissingArgumentException: hi!", "");
        java.lang.String[] strArray46 = commandLine34.getArgs();
        java.util.Properties properties47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options33, strArray46, properties47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str40, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray46);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        boolean boolean4 = options2.hasOption("hi!");
        org.apache.commons.cli.Options options8 = options2.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder9 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options8);
        org.apache.commons.cli.CommandLine commandLine10 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray11 = commandLine10.getArgs();
        java.lang.String[] strArray12 = commandLine10.getArgs();
        java.lang.Object obj14 = commandLine10.getOptionObject(' ');
        org.apache.commons.cli.Option option19 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean20 = option19.hasOptionalArg();
        java.lang.String str21 = option19.getArgName();
        boolean boolean23 = option19.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = option19.toString();
        commandLine10.addOption(option19);
        java.lang.String[] strArray26 = commandLine10.getArgs();
        java.lang.String[] strArray28 = posixParser1.flatten(options8, strArray26, true);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.util.List list30 = options29.helpOptions();
        java.lang.String[] strArray31 = new java.lang.String[] {};
        java.util.Properties properties32 = null;
        org.apache.commons.cli.CommandLine commandLine34 = posixParser1.parse(options29, strArray31, properties32, false);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        boolean boolean37 = options35.hasOption("hi!");
        org.apache.commons.cli.Options options41 = options35.addOption("", false, "arg");
        java.lang.String str42 = options35.toString();
        org.apache.commons.cli.Option option47 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean48 = option47.hasArg();
        boolean boolean49 = option47.isRequired();
        boolean boolean50 = option47.hasOptionalArg();
        java.lang.String str51 = option47.toString();
        org.apache.commons.cli.OptionGroup optionGroup52 = options35.getOptionGroup(option47);
        org.apache.commons.cli.Options options56 = options35.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.CommandLine commandLine57 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray58 = commandLine57.getArgs();
        commandLine57.addArg("");
        java.lang.String str63 = commandLine57.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean65 = commandLine57.hasOption('4');
        java.lang.String[] strArray66 = commandLine57.getArgs();
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine68 = posixParser1.parse(options35, strArray66, properties67);
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        boolean boolean71 = options69.hasOption("hi!");
        java.lang.String[] strArray76 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]", "arg", "[ option:    ::  ]" };
        org.apache.commons.cli.CommandLine commandLine78 = posixParser1.parse(options69, strArray76, false);
        org.apache.commons.cli.CommandLine commandLine79 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray80 = commandLine79.getArgs();
        commandLine79.addArg("");
        java.lang.String str85 = commandLine79.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean87 = commandLine79.hasOption('4');
        java.lang.String[] strArray88 = commandLine79.getArgs();
        java.util.Iterator iterator89 = commandLine79.iterator();
        java.lang.String[] strArray90 = commandLine79.getArgs();
        java.util.Properties properties91 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options69, strArray90, properties91, true);
        java.lang.String[] strArray95 = commandLine93.getOptionValues('\000');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(optionBuilder9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[ option:    ::  ]" + "'", str24, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(commandLine34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str42, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[ option:    ::  ]" + "'", str51, "[ option:    ::  ]");
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str63, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str85, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNull(strArray95);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        java.lang.String str20 = commandLine17.getOptionValue("", "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        boolean boolean22 = commandLine17.hasOption("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.apache.commons.cli.Option option27 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str28 = option27.getKey();
        java.lang.String[] strArray29 = option27.getValues();
        commandLine17.addOption(option27);
        option27.setRequired(false);
        java.lang.String[] strArray33 = option27.getValues();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str20, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(strArray29);
        org.junit.Assert.assertNull(strArray33);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.util.List list10 = options4.helpOptions();
        java.lang.String str11 = options4.toString();
        org.apache.commons.cli.CommandLine commandLine12 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray13 = commandLine12.getArgs();
        java.lang.String[] strArray14 = commandLine12.getArgs();
        java.lang.Object obj16 = commandLine12.getOptionObject(' ');
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean22 = option21.hasOptionalArg();
        java.lang.String str23 = option21.getArgName();
        boolean boolean25 = option21.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = option21.toString();
        commandLine12.addOption(option21);
        option21.setValueSeparator('4');
        boolean boolean30 = option21.hasLongOpt();
        java.lang.String str31 = option21.getLongOpt();
        java.lang.String[] strArray32 = option21.getValues();
        org.apache.commons.cli.OptionGroup optionGroup33 = options4.getOptionGroup(option21);
        boolean boolean34 = option21.hasOptionalArg();
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str11, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[ option:    ::  ]" + "'", str26, "[ option:    ::  ]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(strArray32);
        org.junit.Assert.assertNull(optionGroup33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String str10 = options9.toString();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean16 = option15.hasOptionalArg();
        java.lang.String str17 = option15.getArgName();
        boolean boolean18 = option15.hasOptionalArg();
        java.lang.Object obj19 = option15.getType();
        org.apache.commons.cli.OptionGroup optionGroup20 = options9.getOptionGroup(option15);
        boolean boolean22 = options9.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: hi!", "org.apache.commons.cli.MissingArgumentException: hi!", "", "arg" };
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options9, strArray27, properties28);
        commandLine29.addArg("org.apache.commons.cli.UnrecognizedOptionException: [ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
        java.lang.Object obj33 = commandLine29.getOptionObject('4');
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = null;
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options39, strArray40, properties41);
        posixParser10.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: hi!", true);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        boolean boolean48 = options46.hasOption("hi!");
        org.apache.commons.cli.Options options52 = options46.addOption("", false, "arg");
        org.apache.commons.cli.CommandLine commandLine53 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray54 = commandLine53.getArgs();
        commandLine53.addArg("");
        java.lang.String str59 = commandLine53.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.String[] strArray61 = commandLine53.getOptionValues("");
        java.lang.String str64 = commandLine53.getOptionValue("org.apache.commons.cli.MissingArgumentException: hi!", "");
        java.lang.Object obj66 = commandLine53.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        java.util.List list67 = commandLine53.getArgList();
        java.lang.Object obj69 = commandLine53.getOptionObject("");
        java.lang.String[] strArray70 = commandLine53.getArgs();
        java.util.Properties properties71 = null;
        org.apache.commons.cli.CommandLine commandLine73 = posixParser10.parse(options46, strArray70, properties71, false);
        java.lang.String str74 = options46.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str59, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(commandLine73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]" + "'", str74, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {} ]");
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder8 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options7);
        org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray10 = commandLine9.getArgs();
        java.lang.String[] strArray11 = commandLine9.getArgs();
        java.lang.Object obj13 = commandLine9.getOptionObject(' ');
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean19 = option18.hasOptionalArg();
        java.lang.String str20 = option18.getArgName();
        boolean boolean22 = option18.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = option18.toString();
        commandLine9.addOption(option18);
        java.lang.String[] strArray25 = commandLine9.getArgs();
        java.lang.String[] strArray27 = posixParser0.flatten(options7, strArray25, true);
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.util.List list29 = options28.helpOptions();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.parse(options28, strArray30, properties31, false);
        boolean boolean35 = commandLine33.hasOption("org.apache.commons.cli.MissingArgumentException: hi!");
        java.lang.Object obj37 = commandLine33.getOptionObject("");
        commandLine33.addArg("org.apache.commons.cli.ParseException: ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(optionBuilder8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:    ::  ]" + "'", str23, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", true);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.util.Collection collection5 = options4.getOptions();
        java.lang.String[] strArray6 = null;
        org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options4, strArray6, true);
        java.util.Collection collection9 = options4.getOptionGroups();
        java.lang.String str10 = options4.toString();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.util.Collection collection12 = options11.getOptions();
        org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean18 = option17.hasArg();
        boolean boolean19 = option17.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup20 = options11.getOptionGroup(option17);
        org.apache.commons.cli.Options options21 = options4.addOption(option17);
        char char22 = option17.getValueSeparator();
        option17.setArgName("org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(commandLine8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str10, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertTrue("'" + char22 + "' != '" + '\000' + "'", char22 == '\000');
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        java.util.List list72 = options39.getRequiredOptions();
        java.util.Collection collection73 = options39.getOptions();
        java.util.Collection collection74 = options39.getOptionGroups();
        org.apache.commons.cli.Options options78 = options39.addOption("", false, "org.apache.commons.cli.MissingOptionException: arg");
        org.apache.commons.cli.Option option80 = options78.getOption("[ option:    :: [ option:    :: hi! ] ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNull(option80);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean5 = option4.hasOptionalArg();
        java.lang.String str6 = option4.getArgName();
        boolean boolean8 = option4.equals((java.lang.Object) (byte) 100);
        boolean boolean9 = option4.hasValueSeparator();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        boolean boolean13 = options11.hasOption("hi!");
        org.apache.commons.cli.Options options17 = options11.addOption("", false, "arg");
        org.apache.commons.cli.OptionBuilder optionBuilder18 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options17);
        org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray20 = commandLine19.getArgs();
        java.lang.String[] strArray21 = commandLine19.getArgs();
        java.lang.Object obj23 = commandLine19.getOptionObject(' ');
        org.apache.commons.cli.Option option28 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean29 = option28.hasOptionalArg();
        java.lang.String str30 = option28.getArgName();
        boolean boolean32 = option28.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = option28.toString();
        commandLine19.addOption(option28);
        java.lang.String[] strArray35 = commandLine19.getArgs();
        java.lang.String[] strArray37 = posixParser10.flatten(options17, strArray35, true);
        boolean boolean38 = option4.equals((java.lang.Object) posixParser10);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.util.Collection collection40 = options39.getOptions();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean46 = option45.hasArg();
        boolean boolean47 = option45.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option45);
        java.lang.String str49 = options39.toString();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        posixParser50.burstToken("", true);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.Collection collection55 = options54.getOptions();
        java.lang.String[] strArray56 = null;
        org.apache.commons.cli.CommandLine commandLine58 = posixParser50.parse(options54, strArray56, true);
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        boolean boolean61 = options59.hasOption("hi!");
        boolean boolean63 = options59.hasOption("hi!");
        org.apache.commons.cli.CommandLine commandLine64 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray65 = commandLine64.getArgs();
        java.lang.String[] strArray66 = commandLine64.getArgs();
        java.lang.String[] strArray68 = posixParser50.flatten(options59, strArray66, true);
        org.apache.commons.cli.CommandLine commandLine69 = posixParser10.parse(options39, strArray66);
        java.util.Collection collection70 = options39.getOptions();
        java.lang.String str71 = options39.toString();
        java.util.List list72 = options39.getRequiredOptions();
        org.apache.commons.cli.Option option77 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean78 = option77.hasArg();
        boolean boolean79 = option77.isRequired();
        boolean boolean80 = option77.hasOptionalArg();
        java.lang.String str81 = option77.toString();
        java.lang.String str82 = option77.getOpt();
        java.lang.String[] strArray83 = option77.getValues();
        char char84 = option77.getValueSeparator();
        org.apache.commons.cli.Options options85 = options39.addOption(option77);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(options17);
        org.junit.Assert.assertNotNull(optionBuilder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:    ::  ]" + "'", str33, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(collection40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str49, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertNotNull(commandLine58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str71, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[ option:    ::  ]" + "'", str81, "[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(strArray83);
        org.junit.Assert.assertTrue("'" + char84 + "' != '" + '\000' + "'", char84 == '\000');
        org.junit.Assert.assertNotNull(options85);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        boolean boolean3 = options1.hasOption("hi!");
        org.apache.commons.cli.Options options7 = options1.addOption("", false, "arg");
        org.apache.commons.cli.Option option9 = options7.getOption("");
        java.lang.String[] strArray15 = new java.lang.String[] { "[ option:    ::  ]", "[ option:    ::  ]", "org.apache.commons.cli.MissingArgumentException: hi!", "[ option:    ::  ]", "arg" };
        org.apache.commons.cli.CommandLine commandLine17 = posixParser0.parse(options7, strArray15, false);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        java.util.Collection collection19 = options18.getOptions();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean25 = option24.hasArg();
        boolean boolean26 = option24.isRequired();
        org.apache.commons.cli.OptionGroup optionGroup27 = options18.getOptionGroup(option24);
        java.lang.String str28 = options18.toString();
        org.apache.commons.cli.CommandLine commandLine29 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray30 = commandLine29.getArgs();
        java.lang.String[] strArray31 = commandLine29.getArgs();
        java.lang.Object obj33 = commandLine29.getOptionObject(' ');
        org.apache.commons.cli.Option option38 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean39 = option38.hasOptionalArg();
        java.lang.String str40 = option38.getArgName();
        boolean boolean42 = option38.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = option38.toString();
        commandLine29.addOption(option38);
        java.lang.String[] strArray45 = commandLine29.getArgs();
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options18, strArray45, properties46, true);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        java.lang.String str50 = options49.toString();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean56 = option55.hasOptionalArg();
        java.lang.String str57 = option55.getArgName();
        boolean boolean58 = option55.hasOptionalArg();
        java.lang.Object obj59 = option55.getType();
        org.apache.commons.cli.OptionGroup optionGroup60 = options49.getOptionGroup(option55);
        org.apache.commons.cli.Options options64 = options49.addOption("", false, "");
        java.lang.String[] strArray65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser0.parse(options49, strArray65, false);
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        boolean boolean70 = options68.hasOption("hi!");
        org.apache.commons.cli.Options options74 = options68.addOption("", false, "arg");
        java.util.Collection collection75 = options74.getOptions();
        org.apache.commons.cli.Options options80 = options74.addOption("", "[ option:    ::  ]", false, "org.apache.commons.cli.MissingArgumentException: hi!");
        java.util.Collection collection81 = options80.getOptionGroups();
        java.util.List list82 = options80.getRequiredOptions();
        org.apache.commons.cli.CommandLine commandLine83 = new org.apache.commons.cli.CommandLine();
        java.lang.String[] strArray84 = commandLine83.getArgs();
        commandLine83.addArg("");
        java.lang.String str89 = commandLine83.getOptionValue('#', "org.apache.commons.cli.MissingArgumentException: hi!");
        boolean boolean91 = commandLine83.hasOption('4');
        java.lang.String[] strArray92 = commandLine83.getArgs();
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser0.parse(options80, strArray92, properties93, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(option9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(commandLine17);
        org.junit.Assert.assertNotNull(collection19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str28, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[ option:    ::  ]" + "'", str43, "[ option:    ::  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str50, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(optionGroup60);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(collection75);
        org.junit.Assert.assertNotNull(options80);
        org.junit.Assert.assertNotNull(collection81);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.apache.commons.cli.MissingArgumentException: hi!" + "'", str89, "org.apache.commons.cli.MissingArgumentException: hi!");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine95);
    }
}

