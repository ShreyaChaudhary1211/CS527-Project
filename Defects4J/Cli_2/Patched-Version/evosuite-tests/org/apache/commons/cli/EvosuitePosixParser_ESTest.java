/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 14:35:46 GMT 2024
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuitePosixParser_ESTest extends EvosuitePosixParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      posixParser0.burstToken("", false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.burstToken(", ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("N'}pnF=5,,0h-_8K", true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-2";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      options0.addOption("", true, "");
      String[] stringArray0 = Locale.getISOLanguages();
      posixParser0.parse(options0, stringArray0);
      posixParser0.burstToken("(o~dhK!2{>3#n-", true);
      posixParser0.burstToken("(o~dhK!2{>3#n-", true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      options0.addOption("", "", false, "");
      String[] stringArray0 = Locale.getISOCountries();
      posixParser0.parse(options0, stringArray0);
      posixParser0.burstToken("`tc$td-?J%", true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-2";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N'}pnF=5,,0h-_8K";
      stringArray0[1] = "org.apache.commons.cli.PosixParser";
      stringArray0[2] = "N'}pnF=5,,0h-_8K";
      stringArray0[3] = "N'}pnF=5,,0h-_8K";
      stringArray0[4] = "opt contains illegal character value '";
      stringArray0[5] = "tNxhQ=xV09~";
      stringArray0[6] = "N'}pnF=5,,0h-_8K";
      stringArray0[7] = "-(2,.W";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "kyy\"j*.6Dfocu3\"B%#";
      stringArray0[1] = "7[*GDps'XRU";
      stringArray0[2] = "--T>nR=z>#3P";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N'}pnF=5,,0h-_8K";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }
}
