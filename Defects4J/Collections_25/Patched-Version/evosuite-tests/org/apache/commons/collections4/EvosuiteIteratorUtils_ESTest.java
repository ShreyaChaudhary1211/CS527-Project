/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 03:25:28 GMT 2024
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteIteratorUtils_ESTest extends EvosuiteIteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) mapIterator1, (Iterator<? extends StringTokenizer>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<StringTokenizer, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, StringTokenizer>(orderedMapIterator0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends StringTokenizer>) orderedMapIterator0, (Iterator<? extends StringTokenizer>) abstractOrderedMapIteratorDecorator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) zippingIterator0, (Iterator<? extends StringTokenizer>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedMapIterator<Predicate<StringTokenizer>, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 0, 852);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = ConstantTransformer.constantTransformer(locale_FilteringMode0);
      TransformerClosure<Locale.FilteringMode> transformerClosure0 = new TransformerClosure<Locale.FilteringMode>(transformer0);
      ForClosure<Locale.FilteringMode> forClosure0 = new ForClosure<Locale.FilteringMode>(91, transformerClosure0);
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.apply((Iterator<Locale.FilteringMode>) singletonListIterator0, (Closure<? super Locale.FilteringMode>) forClosure0);
      assertEquals(0, singletonListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 9);
      ResettableListIterator<Class<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      ListIterator<Class<StringTokenizer>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Class<StringTokenizer>>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<StringTokenizer, String> invokerTransformer0 = new InvokerTransformer<StringTokenizer, String>("", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, String>) invokerTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Hashtable<StringTokenizer, String> hashtable0 = new Hashtable<StringTokenizer, String>();
      Transformer<StringTokenizer, String> transformer0 = MapTransformer.mapTransformer((Map<? super StringTokenizer, ? extends String>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) singletonIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.StringTokenizer.class) , any(java.util.StringTokenizer.class));
      Predicate<StringTokenizer> predicate0 = ComparatorPredicate.comparatorPredicate(stringTokenizer0, comparator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) predicate0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) iterator0);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) singletonIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("eD8fXXe`J35:>dN(");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) singletonListIterator0, class0);
      assertEquals(1, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>((StringTokenizer) null, true);
      StringTokenizer stringTokenizer0 = IteratorUtils.get((Iterator<StringTokenizer>) singletonIterator0, 0);
      assertNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      MapIterator<StringTokenizer, Class<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<StringTokenizer, Class<StringTokenizer>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<StringTokenizer, Class<StringTokenizer>>(mapIterator0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<StringTokenizer>) abstractMapIteratorDecorator0;
      iteratorArray0[1] = (Iterator<StringTokenizer>) singletonIterator0;
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) null, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Boolean> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Boolean>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      ResettableIterator<Class<StringTokenizer>> resettableIterator0 = IteratorUtils.singletonIterator(class0);
      Iterator<Class<StringTokenizer>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Class<StringTokenizer>>) resettableIterator0, (Iterator<? extends Class<StringTokenizer>>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Transformer<Locale.Category, StringTokenizer>[] transformerArray0 = (Transformer<Locale.Category, StringTokenizer>[]) Array.newInstance(Transformer.class, 3);
      ResettableListIterator<Transformer<Locale.Category, StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(transformerArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 7, 7);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<HashMap<StringTokenizer, Predicate<Object>>, StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      Stack<Class<StringTokenizer>> stack0 = new Stack<Class<StringTokenizer>>();
      stack0.addElement(class0);
      ResettableIterator<Class<StringTokenizer>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Class<StringTokenizer>>) stack0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Class<StringTokenizer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("S=/|EH^VQ");
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      Predicate<StringTokenizer>[] predicateArray0 = (Predicate<StringTokenizer>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<StringTokenizer> anyPredicate0 = new AnyPredicate<StringTokenizer>(predicateArray0);
      AndPredicate<StringTokenizer> andPredicate0 = new AndPredicate<StringTokenizer>(anyPredicate0, anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("eD8fXXe`J35:>dN(");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Factory<Locale.FilteringMode> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<StringTokenizer, Locale.FilteringMode> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Locale.FilteringMode>) factory0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, ? extends Locale.FilteringMode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1073741824);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayList<Class<StringTokenizer>> arrayList0 = new ArrayList<Class<StringTokenizer>>();
      ResettableIterator<Class<StringTokenizer>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Class<StringTokenizer>>) arrayList0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      arrayList0.add(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Class<StringTokenizer>>) resettableIterator0, 31);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Class<Locale.FilteringMode>>) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Stack<Predicate<StringTokenizer>> stack0 = new Stack<Predicate<StringTokenizer>>();
      stack0.add((Predicate<StringTokenizer>) null);
      ResettableListIterator<Predicate<StringTokenizer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Predicate<StringTokenizer>>) stack0);
      Predicate<Predicate<StringTokenizer>> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      IteratorUtils.find((Iterator<Predicate<StringTokenizer>>) resettableListIterator0, (Predicate<? super Predicate<StringTokenizer>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SingletonListIterator<Predicate<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<Predicate<StringTokenizer>>((Predicate<StringTokenizer>) null);
      EqualPredicate<Predicate<StringTokenizer>> equalPredicate0 = new EqualPredicate<Predicate<StringTokenizer>>((Predicate<StringTokenizer>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Predicate<StringTokenizer>>) singletonListIterator0, (Predicate<? super Predicate<StringTokenizer>>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Iterator<Class<StringTokenizer>>[] iteratorArray0 = (Iterator<Class<StringTokenizer>>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Class<StringTokenizer>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ListIterator<StringTokenizer> listIterator0 = stack0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) listIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Predicate<StringTokenizer>[] predicateArray0 = (Predicate<StringTokenizer>[]) Array.newInstance(Predicate.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(predicateArray0, 1, (-2613));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 2885, 251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) objectArrayIterator0, (-1502));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(classArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 12, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-219), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 420);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.list.TreeList$TreeListIterator");
      Transformer<Locale.FilteringMode, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) listIterator0, (Iterator<? extends Locale.FilteringMode>) listIterator0, (Iterator<? extends Locale.FilteringMode>) listIterator0);
      String string0 = IteratorUtils.toString((Iterator<Locale.FilteringMode>) zippingIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, "):N+]OzLEzX<", "org.apache.commons.collections4.list.TreeList$TreeListIterator", "6");
      assertTrue(listIterator0.hasPrevious());
      assertEquals("org.apache.commons.collections4.list.TreeList$TreeListIteratororg.apache.commons.collections4.list.TreeList$TreeListIterator6", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("6");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) listIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, "~X~", "~X~", "6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '6' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<Locale.FilteringMode>) null, (Transformer<? super Locale.FilteringMode, String>) transformer0, "jQd*Qmp0V%lZ", "6", "jQd*Qmp0V%lZ");
      assertEquals("6jQd*Qmp0V%lZ", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("S=/|EH^VQ");
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      Predicate<StringTokenizer>[] predicateArray0 = (Predicate<StringTokenizer>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<StringTokenizer> anyPredicate0 = new AnyPredicate<StringTokenizer>(predicateArray0);
      AndPredicate<StringTokenizer> andPredicate0 = new AndPredicate<StringTokenizer>(anyPredicate0, anyPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) andPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) listIterator0, 36);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null, (-2371));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Predicate<StringTokenizer>[] predicateArray0 = (Predicate<StringTokenizer>[]) Array.newInstance(Predicate.class, 2);
      ResettableIterator<Predicate<StringTokenizer>> resettableIterator0 = IteratorUtils.arrayIterator(predicateArray0);
      SkippingIterator<Predicate<StringTokenizer>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Predicate<StringTokenizer>>) resettableIterator0, 0L);
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 0);
      Transformer<Predicate<StringTokenizer>, String> transformer0 = InvokerTransformer.invokerTransformer("Vqn<cCpc)W.jej(hs", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Predicate<StringTokenizer>>) skippingIterator0, (Transformer<? super Predicate<StringTokenizer>, String>) transformer0, "", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ResettableIterator<Class<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(class0);
      Class<Locale.FilteringMode> class1 = IteratorUtils.get((Iterator<Class<Locale.FilteringMode>>) resettableIterator0, 0);
      assertEquals("class java.util.Locale$FilteringMode", class1.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      SingletonIterator<Class<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<Class<Locale.FilteringMode>>(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Class<Locale.FilteringMode>>) singletonIterator0, 4802);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4801
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("S=/|EH^VQ");
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      Predicate<StringTokenizer>[] predicateArray0 = (Predicate<StringTokenizer>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<StringTokenizer> anyPredicate0 = new AnyPredicate<StringTokenizer>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) anyPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Predicate<StringTokenizer>[] predicateArray0 = (Predicate<StringTokenizer>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<StringTokenizer> onePredicate0 = new OnePredicate<StringTokenizer>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) onePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.StringTokenizer.class) , any(java.util.StringTokenizer.class));
      Predicate<StringTokenizer> predicate0 = ComparatorPredicate.comparatorPredicate(stringTokenizer0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      UniquePredicate<StringTokenizer> uniquePredicate0 = new UniquePredicate<StringTokenizer>();
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("dOzT\"0aqnUy.jAD>>?", "'K:kB4r,ps%Hrg6");
      priorityQueue0.add(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = priorityQueue0.iterator();
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super StringTokenizer>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Predicate<StringTokenizer> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SingletonListIterator<Predicate<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<Predicate<StringTokenizer>>((Predicate<StringTokenizer>) null);
      UniquePredicate<Predicate<StringTokenizer>> uniquePredicate0 = new UniquePredicate<Predicate<StringTokenizer>>();
      IteratorUtils.find((Iterator<Predicate<StringTokenizer>>) singletonListIterator0, (Predicate<? super Predicate<StringTokenizer>>) uniquePredicate0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SingletonListIterator<Predicate<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<Predicate<StringTokenizer>>((Predicate<StringTokenizer>) null);
      Predicate<Predicate<StringTokenizer>> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<Predicate<StringTokenizer>>) singletonListIterator0, (Predicate<? super Predicate<StringTokenizer>>) predicate0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Predicate<StringTokenizer> predicate0 = NotNullPredicate.notNullPredicate();
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
      assertNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<Boolean, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Boolean>) orderedMapIterator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("+~@V", "+~@V");
      InvokerTransformer<StringTokenizer, StringTokenizer> invokerTransformer0 = new InvokerTransformer<StringTokenizer, StringTokenizer>("+~@V", (Class<?>[]) null, (Object[]) null);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) invokerTransformer0);
      NonePredicate<StringTokenizer> nonePredicate0 = new NonePredicate<StringTokenizer>((Predicate<? super StringTokenizer>[]) null);
      NullIsExceptionPredicate<StringTokenizer> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<StringTokenizer>(nonePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super StringTokenizer>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '+~@V' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Closure<StringTokenizer>[] closureArray0 = (Closure<StringTokenizer>[]) Array.newInstance(Closure.class, 6);
      ChainedClosure<StringTokenizer> chainedClosure0 = new ChainedClosure<StringTokenizer>(closureArray0);
      IteratorUtils.apply((Iterator<StringTokenizer>) null, (Closure<? super StringTokenizer>) chainedClosure0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Locale.FilteringMode>) orderedIterator0, (Closure<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("k]\"Pc1Zm`Z5B/8!mx*");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) mapIterator0, (-1959));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) mapIterator0, (Class<StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) mapIterator0, class0);
      assertEquals(0, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Class<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) mapIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterable<StringTokenizer> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      Iterable<Locale.FilteringMode> iterable0 = IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      Iterator<StringTokenizer> iterator0 = priorityQueue0.iterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) iterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      Enumeration<StringTokenizer> enumeration0 = stack0.elements();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<Class<StringTokenizer>> vector0 = new Vector<Class<StringTokenizer>>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Class<StringTokenizer>>) null, (Collection<? super Class<StringTokenizer>>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      Enumeration<StringTokenizer> enumeration0 = stack0.elements();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) stack0);
      Closure<StringTokenizer> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super StringTokenizer>) closure0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      Enumeration<StringTokenizer> enumeration0 = stack0.elements();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector<Class<Object>> vector0 = new Vector<Class<Object>>();
      ResettableListIterator<Class<Object>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Class<Object>>) vector0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<Class<StringTokenizer>> stack0 = new Stack<Class<StringTokenizer>>();
      ResettableIterator<Class<StringTokenizer>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Class<StringTokenizer>>) stack0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      stack0.add(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(resettableIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TreeSet<Predicate<StringTokenizer>> treeSet0 = new TreeSet<Predicate<StringTokenizer>>();
      Predicate<StringTokenizer> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super StringTokenizer>>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      UniquePredicate<Predicate<StringTokenizer>> uniquePredicate0 = new UniquePredicate<Predicate<StringTokenizer>>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Predicate<StringTokenizer>>) null, (Predicate<? super Predicate<StringTokenizer>>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Predicate<StringTokenizer>> linkedList0 = new LinkedList<Predicate<StringTokenizer>>();
      Predicate<StringTokenizer> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super StringTokenizer>>) linkedList0);
      Transformer<Object, Locale.FilteringMode> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<StringTokenizer, Locale.FilteringMode> transformer1 = IfTransformer.ifTransformer((Predicate<? super StringTokenizer>) predicate0, (Transformer<? super StringTokenizer, ? extends Locale.FilteringMode>) transformer0, (Transformer<? super StringTokenizer, ? extends Locale.FilteringMode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) null, (Transformer<? super StringTokenizer, ? extends Locale.FilteringMode>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) resettableListIterator0, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0, 0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) null, (Iterator<? extends StringTokenizer>) objectArrayIterator0, (Iterator<? extends StringTokenizer>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, HashMap<StringTokenizer, Class<StringTokenizer>>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedMapIterator0, (-1243L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) mapIterator0, (Transformer<? super StringTokenizer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<Predicate<StringTokenizer>, Predicate<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<Predicate<StringTokenizer>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Predicate<StringTokenizer>>) mapIterator0, 1579L, 1579L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Predicate<StringTokenizer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Iterator<StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 8, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("4;> }dVjDbM", "4;> }dVjDbM");
      ConstantTransformer<StringTokenizer, StringTokenizer> constantTransformer0 = new ConstantTransformer<StringTokenizer, StringTokenizer>(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) constantTransformer0);
      ChainedClosure<StringTokenizer> chainedClosure0 = new ChainedClosure<StringTokenizer>((Closure<? super StringTokenizer>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super StringTokenizer>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) orderedIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-3185), (-3185));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 96);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SingletonListIterator<Class<Object>> singletonListIterator0 = new SingletonListIterator<Class<Object>>(class0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("zN^", "zN^", false);
      boolean boolean0 = IteratorUtils.contains((Iterator<Class<Object>>) singletonListIterator0, (Object) stringTokenizer0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      Predicate<Locale.FilteringMode> predicate0 = NullPredicate.nullPredicate();
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) listIterator1, 36);
      assertFalse(list0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MapIterator<StringTokenizer, Class<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) orderedIterator0, (Transformer<? super Locale.FilteringMode, String>) null, "~XJ~", "Enumeration must not be null", "Enumeration must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
