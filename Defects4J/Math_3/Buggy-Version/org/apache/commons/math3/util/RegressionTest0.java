package org.apache.commons.math3.util;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { '#', (short) 0, (short) 10, 1.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray6 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray0, doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[35.0, 0.0, 10.0, 1.0]");
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        double[] doubleArray2 = new double[] { 10.0f, (-1) };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0, -1.0]");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        double[] doubleArray5 = new double[] { 10, (byte) 10, 100.0f, 1.0f, 0.0f };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 10.0, 100.0, 1.0, 0.0]");
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 1, (double) (-1), 100.0d, (double) '#', 0.0d, (double) (short) 100, (double) 1.0f, (double) 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3500.0d + "'", double8 == 3500.0d);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        double[] doubleArray4 = new double[] { 1, 0L, (short) 100, 3500.0d };
        double[] doubleArray7 = new double[] { 1L, 0.0d };
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0, 100.0, 3500.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0]");
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray0, orderDirection1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 2 and 3 are not strictly increasing (52 >= 10)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 1L, (double) 100.0f, 1.0d, 0.0d, (double) (-1.0f), (double) (short) 1, (double) (short) 1, (double) ' ');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 131.0d + "'", double8 == 131.0d);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        double[] doubleArray2 = new double[] { 'a', (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[97.0, -1.0]");
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray35, orderDirection37, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray35, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection27, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray12, doubleArray58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray0, doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        double[] doubleArray0 = null;
        double[][] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray15 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        double[] doubleArray29 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray15, doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection9 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection9, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection9 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection9.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        java.lang.Class<?> wildcardClass11 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) ' ', 0.0d, (double) 'a', (double) 100L, (double) (byte) 1, 0.0d, (double) ' ');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 'a', (double) 100L, 0.0d, (double) 'a');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 9700.0d + "'", double4 == 9700.0d);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) 100L, (double) 1L, 0.0d, (double) ' ', (double) (short) 10, 10.0d, 131.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1630.0d + "'", double8 == 1630.0d);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException28 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = nonMonotonicSequenceException28.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException33 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = nonMonotonicSequenceException33.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException38 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = nonMonotonicSequenceException38.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException48 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = nonMonotonicSequenceException48.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException53 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = nonMonotonicSequenceException53.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray55 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection29, orderDirection34, orderDirection39, orderDirection44, orderDirection49, orderDirection54 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException59 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = nonMonotonicSequenceException59.getDirection();
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray55, orderDirection60, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray2, orderDirection60, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection54 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection54.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray55);
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (3,500 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        java.lang.Class<?> wildcardClass8 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray15 = new double[] { (short) -1, 100.0d };
        double[] doubleArray18 = new double[] { (short) -1, 100.0d };
        double[] doubleArray21 = new double[] { (short) -1, 100.0d };
        double[] doubleArray24 = new double[] { (short) -1, 100.0d };
        double[][] doubleArray25 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray12, doubleArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 2 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 10, (double) (short) -1, 0.0d, (double) 100.0f, 10.0d, 131.0d, 0.0d, (double) 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1300.0d + "'", double8 == 1300.0d);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        double[][] doubleArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray60, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) '4', (double) '#', 1630.0d, (double) '#', (double) 'a', (double) (-1.0f), (double) 100, (double) 0.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 58773.0d + "'", double8 == 58773.0d);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException34 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection35 = nonMonotonicSequenceException34.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException39 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = nonMonotonicSequenceException39.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException44 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection45 = nonMonotonicSequenceException44.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException49.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray51 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection25, orderDirection30, orderDirection35, orderDirection40, orderDirection45, orderDirection50 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray51, orderDirection56, false);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray4, orderDirection56, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        double[] doubleArray65 = new double[] { (-1L), 3500.0d, (byte) 10 };
        double[] doubleArray69 = new double[] { (-1L), 3500.0d, (byte) 10 };
        double[] doubleArray73 = new double[] { (-1L), 3500.0d, (byte) 10 };
        double[] doubleArray77 = new double[] { (-1L), 3500.0d, (byte) 10 };
        double[] doubleArray81 = new double[] { (-1L), 3500.0d, (byte) 10 };
        double[] doubleArray85 = new double[] { (-1L), 3500.0d, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray65, doubleArray69, doubleArray73, doubleArray77, doubleArray81, doubleArray85 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray4, orderDirection61, doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection35 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection35.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection45 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection45.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray51);
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 3500.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 3500.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 3500.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 3500.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 3500.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 3500.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1L), (double) 0L, (double) 10, (double) (short) 10, (double) (-1L), (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 101.0d + "'", double6 == 101.0d);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 0, (double) 0.0f, (double) (byte) 10, 0.0d, (double) 100L, (double) ' ', (double) '4', (double) (short) 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3200.0d + "'", double8 == 3200.0d);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) 1, (double) 100.0f, (double) 100L, (double) 100.0f, (double) '#');
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 13500.0d + "'", double6 == 13500.0d);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray58 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        double[] doubleArray72 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray58, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray52, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection78, true, true);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray13, doubleArray77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 1");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 0L, (double) '#', 131.0d, 0.0d, 0.0d, (double) 0.0f, (double) (short) 1, (double) 'a');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 35, (double) (byte) 100, (double) 0, 10.0d, (-1.0d), (double) 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3500.0d + "'", double6 == 3500.0d);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException9 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException9.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException19 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = nonMonotonicSequenceException19.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray31 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection5, orderDirection10, orderDirection15, orderDirection20, orderDirection25, orderDirection30 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection36, false);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException39 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = mathIllegalArgumentException39.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray31);
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10.0f, 113.16359838746733d, (double) (byte) 10, 0.0d, (double) 1, (double) (short) 1, (double) (byte) 10, (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1122.6359838746732d + "'", double8 == 1122.6359838746732d);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        int[] intArray0 = null;
        int[] intArray4 = new int[] { 0, (byte) 10, 10 };
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int7 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] { (short) 10, 100.0d };
        double[][] doubleArray4 = new double[][] { doubleArray3 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28, 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray53);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 1");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 'a', doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -97 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-97.0, 97.0, 5044.0, 970.0, 9700.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        double[] doubleArray66 = new double[] { (short) -1, 100.0f, 100.0d, 1122.6359838746732d, 58773.0d };
        double[] doubleArray72 = new double[] { (short) -1, 100.0f, 100.0d, 1122.6359838746732d, 58773.0d };
        double[] doubleArray78 = new double[] { (short) -1, 100.0f, 100.0d, 1122.6359838746732d, 58773.0d };
        double[] doubleArray84 = new double[] { (short) -1, 100.0f, 100.0d, 1122.6359838746732d, 58773.0d };
        double[] doubleArray90 = new double[] { (short) -1, 100.0f, 100.0d, 1122.6359838746732d, 58773.0d };
        double[][] doubleArray91 = new double[][] { doubleArray66, doubleArray72, doubleArray78, doubleArray84, doubleArray90 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray19, doubleArray91);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 5 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 100.0, 100.0, 1122.6359838746732, 58773.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 100.0, 100.0, 1122.6359838746732, 58773.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0, 100.0, 1122.6359838746732, 58773.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 100.0, 100.0, 1122.6359838746732, 58773.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 100.0, 100.0, 1122.6359838746732, 58773.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        double[] doubleArray0 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40, orderDirection41, true, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection41, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray37, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray37);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray1, doubleArray61);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[5200.0, 182000.0, 52.0, 520.0]");
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray61 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray55, doubleArray77);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55, 1);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException91 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection92 = nonMonotonicSequenceException91.getDirection();
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray87, orderDirection92, false);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray80, orderDirection92, true, false);
        boolean boolean99 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray3, orderDirection92, false);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0]");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + orderDirection92 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection92.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 1.0f, (double) (short) 10, 1630.0d, (double) '4');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 84770.0d + "'", double4 == 84770.0d);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException48 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = nonMonotonicSequenceException48.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException51 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection49, false);
        double[] doubleArray55 = new double[] { (byte) 100, 1300.0d, 'a' };
        double[] doubleArray59 = new double[] { (byte) 100, 1300.0d, 'a' };
        double[] doubleArray63 = new double[] { (byte) 100, 1300.0d, 'a' };
        double[] doubleArray67 = new double[] { (byte) 100, 1300.0d, 'a' };
        double[] doubleArray71 = new double[] { (byte) 100, 1300.0d, 'a' };
        double[] doubleArray75 = new double[] { (byte) 100, 1300.0d, 'a' };
        double[][] doubleArray76 = new double[][] { doubleArray55, doubleArray59, doubleArray63, doubleArray67, doubleArray71, doubleArray75 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray39, orderDirection49, doubleArray76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 1300.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 1300.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 1300.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 1300.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 1300.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 1300.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 100, 84770.0d, (double) '#', 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 8477035.0d + "'", double4 == 8477035.0d);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray7, doubleArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 6 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 113.16359838746733d + "'", double9 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray13, doubleArray77);
        double[] doubleArray80 = new double[] {};
        double[] doubleArray87 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double88 = org.apache.commons.math3.util.MathArrays.distance(doubleArray80, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray77, doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 1.0d);
        double[] doubleArray47 = new double[] { (byte) 1, (byte) 10, 1.0d, (short) 100, 1300.0d };
        double[] doubleArray53 = new double[] { (byte) 1, (byte) 10, 1.0d, (short) 100, 1300.0d };
        double[] doubleArray59 = new double[] { (byte) 1, (byte) 10, 1.0d, (short) 100, 1300.0d };
        double[] doubleArray65 = new double[] { (byte) 1, (byte) 10, 1.0d, (short) 100, 1300.0d };
        double[][] doubleArray66 = new double[][] { doubleArray47, doubleArray53, doubleArray59, doubleArray65 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray39, doubleArray66);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 5 != 1");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0, 1.0, 100.0, 1300.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0, 1.0, 100.0, 1300.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0, 1.0, 100.0, 1300.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0, 1.0, 100.0, 1300.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray32 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray33 = new double[] {};
        double[] doubleArray40 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray40);
        double[] doubleArray46 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray32, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray26, doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray12, doubleArray48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.1, 3499.999714285714, 2.0, 11.0]");
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        double[] doubleArray0 = null;
        double[][] doubleArray1 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = new int[] {};
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (byte) 10);
        int[] intArray11 = new int[] {};
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) (byte) 10);
        int int14 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray11);
        int[] intArray19 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math3.util.MathArrays.distance(intArray5, intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException1 = new org.apache.commons.math3.exception.NullArgumentException();
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { 100.0d, (-1), (byte) -1, (byte) -1, 100.0d, 1.0f };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable4, objArray11);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException13 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, objArray11);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext14 = nullArgumentException13.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext15 = nullArgumentException13.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext16 = nullArgumentException13.getContext();
        java.lang.Number number17 = null;
        org.apache.commons.math3.exception.NotPositiveException notPositiveException18 = new org.apache.commons.math3.exception.NotPositiveException(number17);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        java.lang.Object[] objArray35 = new java.lang.Object[] { nullArgumentException1, true, nullArgumentException13, notPositiveException18, 35, doubleArray20 };
        org.apache.commons.math3.exception.MathInternalError mathInternalError36 = new org.apache.commons.math3.exception.MathInternalError(localizable0, objArray35);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext37 = mathInternalError36.getContext();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(exceptionContext14);
        org.junit.Assert.assertNotNull(exceptionContext15);
        org.junit.Assert.assertNotNull(exceptionContext16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(exceptionContext37);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) ' ', 1.0d, 1122.6359838746732d, (double) (short) 0, 8477035.0d, (double) (-1L));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-8477003.0d) + "'", double6 == (-8477003.0d));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray13, doubleArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException22 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = nonMonotonicSequenceException22.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection23, false);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection23, true);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray0, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) 0.0f, 100.0d, 3500.0d, 1.0d, (double) (short) 1, 10.0d, (double) (short) 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 350101.0d + "'", double8 == 350101.0d);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = new int[] {};
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (byte) 10);
        int[] intArray11 = new int[] {};
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) (byte) 10);
        int int14 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray11);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = org.apache.commons.math3.util.MathArrays.distance1(intArray5, intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        java.lang.Object[] objArray5 = new java.lang.Object[] { 100, (byte) 10 };
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException6 = new org.apache.commons.math3.exception.MathArithmeticException(localizable2, objArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, objArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, objArray5);
        org.apache.commons.math3.exception.util.Localizable localizable9 = null;
        org.apache.commons.math3.exception.util.Localizable localizable10 = null;
        long[] longArray11 = new long[] {};
        long[] longArray12 = new long[] {};
        long[][] longArray13 = new long[][] { longArray11, longArray12 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray13);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException15 = new org.apache.commons.math3.exception.NullArgumentException(localizable10, (java.lang.Object[]) longArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException16 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException8, localizable9, (java.lang.Object[]) longArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[100, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[100, 10]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(longArray13);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(9700.0d, 1122.6359838746732d, 0.0d, 20.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.088956904358433E7d + "'", double4 == 1.088956904358433E7d);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(10.0d, (double) (-1), (double) (short) 1, (double) (byte) 100);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 90.0d + "'", double4 == 90.0d);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 0, (double) (byte) 0, 101.0d, (double) 10.0f, 350101.0d, (double) 10.0f, 0.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3502020.0d + "'", double8 == 3502020.0d);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { 1122.6359838746732d, 3200.0d, '4', 1122.6359838746732d };
        double[] doubleArray18 = new double[] { 1122.6359838746732d, 3200.0d, '4', 1122.6359838746732d };
        double[] doubleArray23 = new double[] { 1122.6359838746732d, 3200.0d, '4', 1122.6359838746732d };
        double[] doubleArray28 = new double[] { 1122.6359838746732d, 3200.0d, '4', 1122.6359838746732d };
        double[] doubleArray33 = new double[] { 1122.6359838746732d, 3200.0d, '4', 1122.6359838746732d };
        double[][] doubleArray34 = new double[][] { doubleArray13, doubleArray18, doubleArray23, doubleArray28, doubleArray33 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray7, doubleArray34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 6");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1122.6359838746732, 3200.0, 52.0, 1122.6359838746732]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1122.6359838746732, 3200.0, 52.0, 1122.6359838746732]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1122.6359838746732, 3200.0, 52.0, 1122.6359838746732]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1122.6359838746732, 3200.0, 52.0, 1122.6359838746732]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1122.6359838746732, 3200.0, 52.0, 1122.6359838746732]");
        org.junit.Assert.assertNotNull(doubleArray34);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1122.6359838746732d, (double) 0, (double) 10.0f, 1300.0d, 90.0d, 20.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 14800.0d + "'", double6 == 14800.0d);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, (int) ' ');
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray13);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray13);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 32");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        double[] doubleArray14 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray14, doubleArray28);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException34 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection35 = nonMonotonicSequenceException34.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException39 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = nonMonotonicSequenceException39.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException44 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection45 = nonMonotonicSequenceException44.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException49.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException54 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection55 = nonMonotonicSequenceException54.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException59 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = nonMonotonicSequenceException59.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray61 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection35, orderDirection40, orderDirection45, orderDirection50, orderDirection55, orderDirection60 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = nonMonotonicSequenceException65.getDirection();
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray61, orderDirection66, false);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection66, false);
        double[] doubleArray71 = new double[] {};
        double[] doubleArray78 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray78);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray71);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection81 = null;
        double[] doubleArray82 = new double[] {};
        double[][] doubleArray83 = new double[][] { doubleArray82 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray71, orderDirection81, doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray7, orderDirection66, doubleArray83);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 6");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 113.16359838746733d + "'", double9 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection35 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection35.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection45 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection45.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection55 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection55.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray61);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 35, (double) '#', (double) (byte) 100, (double) ' ');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4425.0d + "'", double4 == 4425.0d);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) ' ', 1122.6359838746732d, 113.16359838746733d, 0.0d, 0.0d, 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35924.35148398954d + "'", double6 == 35924.35148398954d);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 1);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray80, 1.0d);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 10.0f, doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1000.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray13, doubleArray77);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(90.0d, 97.0d, (double) 100, (double) 0, (double) (byte) -1, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 8730.0d + "'", double6 == 8730.0d);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        double[] doubleArray3 = new double[] { 1.0f, 10L, 97.0d };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray4);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray4);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray3, doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 10.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray28 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        double[] doubleArray42 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray28, doubleArray42);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray64 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray65 = new double[] {};
        double[] doubleArray72 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray72);
        double[] doubleArray78 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray64, doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray58, doubleArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray42, doubleArray80);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray42);
        double double84 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray1, doubleArray42);
        double[] doubleArray85 = null;
        double double86 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray1, doubleArray85);
        double[] doubleArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 20.0d + "'", double82 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (163 >= -0.566)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray3, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray13, doubleArray77);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException85 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection86 = nonMonotonicSequenceException85.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException88 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection86, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = nonMonotonicSequenceException88.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection89, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not increasing (182,000 > 52)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + orderDirection86 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection86.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray10 = new double[] {};
        double[] doubleArray17 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray17);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray10);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray21);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray10, doubleArray21);
        double[] doubleArray37 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray38 = new double[] {};
        double[] doubleArray45 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray45);
        double[] doubleArray51 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray37, doubleArray51);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        double[] doubleArray67 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray67);
        double[] doubleArray73 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray74 = new double[] {};
        double[] doubleArray81 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray74, doubleArray81);
        double[] doubleArray87 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double88 = org.apache.commons.math3.util.MathArrays.distance(doubleArray74, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray73, doubleArray87);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray67, doubleArray89);
        double double91 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray51, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray51);
        double double93 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray10, doubleArray51);
        double[] doubleArray94 = null;
        double double95 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray10, doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray7, doubleArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 20.0d + "'", double91 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        java.lang.String[] strArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection40, true, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray0, orderDirection40, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException9 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException9.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException19 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = nonMonotonicSequenceException19.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray31 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection5, orderDirection10, orderDirection15, orderDirection20, orderDirection25, orderDirection30 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection36, false);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException39 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray31);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext40 = mathIllegalArgumentException39.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext41 = mathIllegalArgumentException39.getContext();
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray31);
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(exceptionContext40);
        org.junit.Assert.assertNotNull(exceptionContext41);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = null;
        double[] doubleArray11 = new double[] {};
        double[][] doubleArray12 = new double[][] { doubleArray11 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection10, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, 20.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 131.0d, (double) 'a', (double) 0);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.0d), (double) 10.0f, 20.0d, 84770.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1695390.0d + "'", double4 == 1695390.0d);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) 10);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        double double13 = org.apache.commons.math3.util.MathArrays.distance(intArray7, intArray12);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray27, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10, 0.0d, 350101.0d, 9700.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.3959797E9d + "'", double4 == 3.3959797E9d);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        long[][] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkRectangular(longArray0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.0d, (double) 1L, (double) (short) 100, (double) 'a');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 9701.0d + "'", double4 == 9701.0d);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 8730.0d, (double) (short) 10, 1630.0d, (double) (-1), (double) '#', (double) '4', (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 16213.0d + "'", double8 == 16213.0d);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1122.6359838746732d, (double) (-1L), (double) 1.0f, 9700.0d, (double) (-1.0f), (double) 10L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 8567.364016125326d + "'", double6 == 8567.364016125326d);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1.0f), 0.0d, 14800.0d, 84770.0d, 16213.0d, 0.0d, 0.0d, 1.088956904358433E7d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.254596E9d + "'", double8 == 1.254596E9d);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray57 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray57);
        double[] doubleArray63 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray63);
        double[] doubleArray69 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray70 = new double[] {};
        double[] doubleArray77 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray77);
        double[] doubleArray83 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray69, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray63, doubleArray85);
        double double87 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray47, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray47);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException92 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection93 = nonMonotonicSequenceException92.getDirection();
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray47, orderDirection93, true, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray26, orderDirection93, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 20.0d + "'", double87 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection93 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection93.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        double[] doubleArray5 = new double[] { 100.0f, (byte) 100, 97.0d, 1.254596E9d, ' ' };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException12 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = nonMonotonicSequenceException12.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection13, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection16, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (100 >= 100)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 100.0, 97.0, 1.254596E9, 32.0]");
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray3, doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        int[] intArray3 = new int[] { 0, (byte) 10, 10 };
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) '4');
        int[] intArray11 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) ' ');
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, 35);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = org.apache.commons.math3.util.MathArrays.distance(intArray5, intArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray43 = new double[] { 58773.0d };
        double[] doubleArray45 = new double[] { 58773.0d };
        double[] doubleArray47 = new double[] { 58773.0d };
        double[] doubleArray49 = new double[] { 58773.0d };
        double[][] doubleArray50 = new double[][] { doubleArray43, doubleArray45, doubleArray47, doubleArray49 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray39, doubleArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 1 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[58773.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[58773.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[58773.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[58773.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        double[] doubleArray0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException7 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection8 = nonMonotonicSequenceException7.getDirection();
        java.lang.Number number9 = nonMonotonicSequenceException7.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException7.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException12 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 0L, (int) ' ', orderDirection10, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection8 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection8.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number9 + "' != '" + (short) -1 + "'", number9, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        int[] intArray0 = null;
        int[] intArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray40 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray40, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray34, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray34, 1);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException70 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = nonMonotonicSequenceException70.getDirection();
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray66, orderDirection71, false);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray59, orderDirection71, true, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20, orderDirection71, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not increasing (0.1 > -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 20.0d, (double) 35, 90.0d, 90.0d, 1630.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 149850.0d + "'", double6 == 149850.0d);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        long[] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException13 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection11, false);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext14 = nonMonotonicSequenceException13.getContext();
        mathIllegalArgumentException7.addSuppressed((java.lang.Throwable) nonMonotonicSequenceException13);
        boolean boolean16 = nonMonotonicSequenceException13.getStrict();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(exceptionContext14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection11, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray39, doubleArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int15 = nonMonotonicSequenceException14.getIndex();
        java.lang.Number number16 = nonMonotonicSequenceException14.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException14.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertEquals("'" + number16 + "' != '" + (short) -1 + "'", number16, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray54);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray78);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 'a', doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[504400.0, 1.7654E7, 5044.0, 50440.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 1L, doubleArray13);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray15);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray15);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 32");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 1);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray61 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray55, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray55);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray15, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale(1630.0d, doubleArray81);
        double[] doubleArray85 = new double[] {};
        double[] doubleArray92 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double93 = org.apache.commons.math3.util.MathArrays.distance(doubleArray85, doubleArray92);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray85);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray81, doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.10188E10, 3.85658E11, 1.10188E8, 1.10188E9]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[]");
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException13 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = nonMonotonicSequenceException13.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection14, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection14 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection14.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray2);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray2, orderDirection15, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) (byte) 100, (double) (short) 10, 100.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1000.0d + "'", double4 == 1000.0d);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        double[] doubleArray6 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        double[] doubleArray20 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray6, doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray20, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray20);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray20);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray73 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray66);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66, 0);
        double[] doubleArray78 = new double[] {};
        double[] doubleArray85 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double86 = org.apache.commons.math3.util.MathArrays.distance(doubleArray78, doubleArray85);
        double[] doubleArray91 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray78, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray66, doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray20, doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-100.0, -3500.0, -1.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 20.0d + "'", double60 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray54);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3200.0d, 1.0d, 4425.0d, 0.0d, 10.0d, 1300.0d, (double) '#', 58773.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2073255.0d + "'", double8 == 2073255.0d);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray1, orderDirection12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException34 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection35 = nonMonotonicSequenceException34.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException39 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = nonMonotonicSequenceException39.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException44 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection45 = nonMonotonicSequenceException44.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException49.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray51 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection25, orderDirection30, orderDirection35, orderDirection40, orderDirection45, orderDirection50 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray51, orderDirection56, false);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray4, orderDirection56, false);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray4, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection35 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection35.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection45 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection45.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray51);
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray43, 0);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        double[] doubleArray68 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray55);
        double[] doubleArray72 = new double[] {};
        double[] doubleArray79 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray72);
        double[] doubleArray83 = new double[] {};
        double[] doubleArray90 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray83, doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray83);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray72, doubleArray83);
        double double94 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray93);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray55, doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray39, doubleArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 0.0d, 1.0d, (double) '4');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 52.0d + "'", double4 == 52.0d);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        int[] intArray3 = new int[] { 0, (byte) 10, 10 };
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) '4');
        int[] intArray6 = new int[] {};
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (byte) 10);
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray6, intArray11);
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (short) 0);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = org.apache.commons.math3.util.MathArrays.distance(intArray5, intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray14 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) ' ');
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, 35);
        int int20 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray14);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        double double27 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray26);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (short) 0);
        int[] intArray31 = new int[] {};
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (byte) 10);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        double double37 = org.apache.commons.math3.util.MathArrays.distance(intArray31, intArray36);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (short) 0);
        int int41 = org.apache.commons.math3.util.MathArrays.distance1(intArray21, intArray31);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = org.apache.commons.math3.util.MathArrays.distance1(intArray14, intArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0]");
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection3, false);
        int int6 = nonMonotonicSequenceException5.getIndex();
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray38 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32, orderDirection37 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray38, orderDirection43, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable7, (java.lang.Object[]) orderDirectionArray38);
        java.lang.Class<?> wildcardClass47 = orderDirectionArray38.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray38);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        double[] doubleArray15 = new double[] { (short) 10, 1300.0d, 1, 1.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, 1300.0, 1.0, 1.0]");
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (1,630 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray54);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray80);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException85 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection86 = nonMonotonicSequenceException85.getDirection();
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray80, orderDirection86, false);
        double double89 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertTrue("'" + orderDirection86 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection86.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 2.3669752669971016E8d + "'", double89 == 2.3669752669971016E8d);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray54);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 5100.0d + "'", double80 == 5100.0d);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException6 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection3, false);
        int int6 = nonMonotonicSequenceException5.getIndex();
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray38 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32, orderDirection37 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray38, orderDirection43, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable7, (java.lang.Object[]) orderDirectionArray38);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = nonMonotonicSequenceException60.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = nonMonotonicSequenceException65.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException70 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = nonMonotonicSequenceException70.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException75 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection76 = nonMonotonicSequenceException75.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray77 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection51, orderDirection56, orderDirection61, orderDirection66, orderDirection71, orderDirection76 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException81 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection82 = nonMonotonicSequenceException81.getDirection();
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray77, orderDirection82, false);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray38, orderDirection82, false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray38);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection76 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection76.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray77);
        org.junit.Assert.assertTrue("'" + orderDirection82 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection82.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(13500.0d, (double) 0, 1630.0d, (double) 100.0f, 3500.0d, 8567.364016125326d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.014877405643864E7d + "'", double6 == 3.014877405643864E7d);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException9 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException9.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException19 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = nonMonotonicSequenceException19.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray31 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection5, orderDirection10, orderDirection15, orderDirection20, orderDirection25, orderDirection30 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection36, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray0, orderDirection36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray31);
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray14 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) ' ');
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, 35);
        int int20 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray14);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        double double27 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray26);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray14, intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(350101.0d, 20.0d, 8567.364016125326d, (double) (byte) 0, (double) 1.0f, (double) '4', (double) (short) -1, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 7002072.0d + "'", double8 == 7002072.0d);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException9 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException9.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException19 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = nonMonotonicSequenceException19.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray31 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection5, orderDirection10, orderDirection15, orderDirection20, orderDirection25, orderDirection30 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection36, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection43, false);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException46 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray31);
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray31);
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 'a', 3.014877405643864E7d, (double) (short) 1, (double) 100.0f);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.924431183474548E9d + "'", double4 == 2.924431183474548E9d);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        long[] longArray0 = new long[] {};
        long[] longArray1 = new long[] {};
        long[][] longArray2 = new long[][] { longArray0, longArray1 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException53 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = nonMonotonicSequenceException53.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException58.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection64 = nonMonotonicSequenceException63.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException68 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = nonMonotonicSequenceException68.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException73 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = nonMonotonicSequenceException73.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException78 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection79 = nonMonotonicSequenceException78.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray80 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection54, orderDirection59, orderDirection64, orderDirection69, orderDirection74, orderDirection79 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException84 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = nonMonotonicSequenceException84.getDirection();
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray80, orderDirection85, false);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray33, orderDirection85, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray28, orderDirection85, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection54 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection54.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection64 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection64.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection79 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection79.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray80);
        org.junit.Assert.assertTrue("'" + orderDirection85 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection85.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray41, orderDirection42, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException41 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = nonMonotonicSequenceException41.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray43 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection17, orderDirection22, orderDirection27, orderDirection32, orderDirection37, orderDirection42 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = nonMonotonicSequenceException47.getDirection();
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray43, orderDirection48, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException54 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection55 = nonMonotonicSequenceException54.getDirection();
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray43, orderDirection55, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray1, orderDirection55, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray43);
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + orderDirection55 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection55.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray77);
        double[] doubleArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray38, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5100.0d + "'", double79 == 5100.0d);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable5 = null;
        double[] doubleArray6 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray8);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray19);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray19);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray6, doubleArray8);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8, 0);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray32);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray34);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = null;
        double[] doubleArray45 = new double[] {};
        double[][] doubleArray46 = new double[][] { doubleArray45 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray34, orderDirection44, doubleArray46);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray33, doubleArray46);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException49 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException4, localizable5, (java.lang.Object[]) doubleArray46);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException50 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) doubleArray46);
        java.lang.Throwable[] throwableArray51 = nullArgumentException50.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException17 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection18 = nonMonotonicSequenceException17.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (-1L), (java.lang.Number) 350101.0d, (int) ' ', orderDirection18, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray10, orderDirection18, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        int int16 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray10, intArray13);
        int[] intArray21 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray21);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        double double24 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray23);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 100);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        double[] doubleArray0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.math3.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math3.exception.DimensionMismatchException(35, (int) (short) 10);
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        org.apache.commons.math3.exception.util.Localizable localizable5 = null;
        long[] longArray6 = new long[] {};
        long[] longArray7 = new long[] {};
        long[][] longArray8 = new long[][] { longArray6, longArray7 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray8);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray8);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable5, (java.lang.Object[]) longArray8);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable4, (java.lang.Object[]) longArray8);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException13 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) dimensionMismatchException2, localizable3, (java.lang.Object[]) longArray8);
        int int14 = dimensionMismatchException2.getDimension();
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray3, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (1.001 >= -0.001)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { 10L, 10 };
        float[] floatArray4 = new float[] {};
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray4);
        float[] floatArray8 = new float[] { 10L, 10 };
        float[] floatArray9 = new float[] {};
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray9);
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray9);
        float[] floatArray14 = new float[] { 10L, 10 };
        float[] floatArray15 = new float[] {};
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray15);
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray14);
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray14);
        float[] floatArray21 = new float[] { 10L, 10 };
        float[] floatArray22 = new float[] {};
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(floatArray21, floatArray22);
        float[] floatArray26 = new float[] { 10L, 10 };
        float[] floatArray27 = new float[] {};
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.equals(floatArray26, floatArray27);
        float[] floatArray31 = new float[] { 10L, 10 };
        float[] floatArray32 = new float[] {};
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray32);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray26, floatArray32);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray22, floatArray26);
        float[] floatArray38 = new float[] { 10L, 10 };
        float[] floatArray39 = new float[] {};
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray39);
        float[] floatArray43 = new float[] { 10L, 10 };
        float[] floatArray44 = new float[] {};
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray44);
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray44);
        float[] floatArray49 = new float[] { 10L, 10 };
        float[] floatArray50 = new float[] {};
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(floatArray49, floatArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray38, floatArray49);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray38);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray38);
        float[] floatArray60 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray67 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray60, floatArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray38, floatArray67);
        float[] floatArray72 = new float[] { 10L, 10 };
        float[] floatArray73 = new float[] {};
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equals(floatArray72, floatArray73);
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray67, floatArray73);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        double[] doubleArray0 = null;
        double[] doubleArray6 = new double[] { (short) 100, 8730.0d, 1630.0d, (-1.0d), 3500.0d };
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray6, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 8730.0, 1630.0, -1.0, 3500.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0]");
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int[] intArray6 = new int[] {};
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (byte) 10);
        double double9 = org.apache.commons.math3.util.MathArrays.distance(intArray3, intArray8);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (short) 0);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        int[] intArray16 = new int[] {};
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 10);
        double double19 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray18);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (short) 0);
        int int23 = org.apache.commons.math3.util.MathArrays.distance1(intArray3, intArray13);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray2, intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0]");
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        double[] doubleArray52 = new double[] {};
        double[] doubleArray59 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray59);
        double[] doubleArray65 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray65);
        double[] doubleArray71 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray72 = new double[] {};
        double[] doubleArray79 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray79);
        double[] doubleArray85 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double86 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray71, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray65, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray65);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray65);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray50, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[10.0, 349.9714285714286, 99.1, 3600.999714285714, 3500.997142857143, 11.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext9 = mathIllegalStateException8.getContext();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(exceptionContext9);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        long[][] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int25 = nonMonotonicSequenceException24.getIndex();
        java.lang.Number number26 = nonMonotonicSequenceException24.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException24.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray4, orderDirection27, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (10 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (short) -1 + "'", number26, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, 35);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray14 = new int[] { 0 };
        // The following exception was thrown during execution in test generation
        try {
            int int15 = org.apache.commons.math3.util.MathArrays.distance1(intArray5, intArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0]");
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection22, false);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray13, orderDirection22, true);
        double[] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray13, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray1);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException34 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection35 = nonMonotonicSequenceException34.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection35, false);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray26, orderDirection35, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection35, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection35 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection35.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection39, true, true);
        double[] doubleArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray38, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(58773.0d, (double) 1.0f, (double) (short) 100, 5100.0d, 1000.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 568773.0d + "'", double6 == 568773.0d);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = null;
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection40, true);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray44);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44, 0);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray64 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray57, doubleArray64);
        double[] doubleArray70 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double71 = org.apache.commons.math3.util.MathArrays.distance(doubleArray57, doubleArray70);
        double[] doubleArray76 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray77 = new double[] {};
        double[] doubleArray84 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray77, doubleArray84);
        double[] doubleArray90 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray77, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray76, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray70, doubleArray92);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray70);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray94);
        double double96 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray39, doubleArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray77);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 0.0d);
        double[] doubleArray82 = new double[] {};
        double[] doubleArray89 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray82, doubleArray89);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray82);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection92 = null;
        double[] doubleArray93 = new double[] {};
        double[][] doubleArray94 = new double[][] { doubleArray93 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray82, orderDirection92, doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray81, doubleArray94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 1");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5100.0d + "'", double79 == 5100.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 1.0f, (double) (byte) 0, 1040.0d, (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1040.0d) + "'", double4 == (-1040.0d));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, 35);
        int[] intArray11 = new int[] {};
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) (byte) 10);
        int[] intArray14 = new int[] {};
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (byte) 10);
        int int17 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray11, intArray14);
        int[] intArray22 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(intArray11, intArray22);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = org.apache.commons.math3.util.MathArrays.distance1(intArray10, intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 1L, doubleArray13);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28, 1);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        double[] doubleArray68 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray68);
        double[] doubleArray74 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray75 = new double[] {};
        double[] doubleArray82 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray82);
        double[] doubleArray88 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray74, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray68, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray68);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray92);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray92, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.027693159789531987, 0.9692605926336195, 2.7693159789531985E-4, 0.0027693159789531985]");
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray50 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        double[] doubleArray64 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray50, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray44, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray44);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray13, doubleArray69);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray62 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray63 = new double[] {};
        double[] doubleArray70 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double71 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray70);
        double[] doubleArray76 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double77 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray62, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray56, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[5200.0, 182000.0, 52.0, 520.0]");
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException49.getDirection();
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection50, false);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection50, true, false);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray64 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray57, doubleArray64);
        double[] doubleArray70 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double71 = org.apache.commons.math3.util.MathArrays.distance(doubleArray57, doubleArray70);
        double[] doubleArray76 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray77 = new double[] {};
        double[] doubleArray84 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray77, doubleArray84);
        double[] doubleArray90 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray77, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray76, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray70, doubleArray92);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray38, doubleArray94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 1 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[5200.0, 182000.0, 52.0, 520.0]");
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray14);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray53 = new double[] {};
        double[] doubleArray60 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray53);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray53);
        double double64 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray63);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray74 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray74);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray67);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray67);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray63, doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException12 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        int int13 = nonMonotonicSequenceException12.getIndex();
        java.lang.Throwable[] throwableArray14 = nonMonotonicSequenceException12.getSuppressed();
        int int15 = nonMonotonicSequenceException12.getIndex();
        boolean boolean16 = nonMonotonicSequenceException12.getStrict();
        java.lang.Number number17 = nonMonotonicSequenceException12.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection18 = nonMonotonicSequenceException12.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7, orderDirection18, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 2 and 3 are not increasing (52 > 10)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + number17 + "' != '" + 10 + "'", number17, 10);
        org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(58773.0d, 3.014877405643864E7d, (double) 10L, (double) (byte) 100, (double) (short) 100, 0.0d, (double) (-1.0f), (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.771933898620068E12d + "'", double8 == 1.771933898620068E12d);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray27);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray27);
        double double38 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray14, doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException49.getDirection();
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection50, false);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection50, true, false);
        double[] doubleArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray3 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, (int) (byte) 10);
        int[] intArray4 = new int[] {};
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) (byte) 10);
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray4);
        int[] intArray12 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(intArray1, intArray12);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = mathIllegalStateException11.getContext();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(exceptionContext12);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray4);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.scale(14800.0d, doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray77);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 0.0d);
        double[] doubleArray85 = new double[] {};
        double[] doubleArray92 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double93 = org.apache.commons.math3.util.MathArrays.distance(doubleArray85, doubleArray92);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray85);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray85);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale(14800.0d, doubleArray95);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5100.0d + "'", double79 == 5100.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[]");
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray45 = null;
        double[] doubleArray47 = new double[] {};
        double[] doubleArray54 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray54);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray47);
        double[] doubleArray58 = new double[] {};
        double[] doubleArray65 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray58, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray58);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray58);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray45, doubleArray47);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, 0);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray71);
        double[] doubleArray73 = new double[] {};
        double[] doubleArray80 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray80);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray73);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection83 = null;
        double[] doubleArray84 = new double[] {};
        double[][] doubleArray85 = new double[][] { doubleArray84 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray73, orderDirection83, doubleArray85);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray72, doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray3, doubleArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        double[] doubleArray16 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray16);
        double[] doubleArray22 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray22, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray16, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 1);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = nonMonotonicSequenceException52.getDirection();
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray48, orderDirection53, false);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41, orderDirection53, true, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 14800.0d, 1, orderDirection53, false);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray0, orderDirection5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray14 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray14, doubleArray50);
        double[] doubleArray53 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray53);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray14, (double) 1.0f);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray1, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, (int) (byte) 1);
        double[] doubleArray63 = new double[] {};
        double[] doubleArray70 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double71 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray70);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray63);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray63, 0);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray1, doubleArray75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray62);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray19, doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (3,500 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray35 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray36 = new double[] {};
        double[] doubleArray43 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray43);
        double[] doubleArray49 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray35, doubleArray49);
        double[] doubleArray52 = new double[] {};
        double[] doubleArray59 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray59);
        double[] doubleArray65 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray65);
        double[] doubleArray71 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray72 = new double[] {};
        double[] doubleArray79 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray79);
        double[] doubleArray85 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double86 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray71, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray65, doubleArray87);
        double double89 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray49, doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 20.0d + "'", double89 == 20.0d);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double double37 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3501.448701609104d + "'", double37 == 3501.448701609104d);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException45 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int46 = nonMonotonicSequenceException45.getIndex();
        java.lang.Number number47 = nonMonotonicSequenceException45.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = nonMonotonicSequenceException45.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection48, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0.1 >= -0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertEquals("'" + number47 + "' != '" + (short) -1 + "'", number47, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        long[] longArray5 = new long[] { 100L, (-1), 1, 'a', (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[100, -1, 1, 97, 0]");
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray14 = null;
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray14);
        int[] intArray16 = new int[] {};
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 10);
        int[] intArray19 = new int[] {};
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 10);
        double double22 = org.apache.commons.math3.util.MathArrays.distance(intArray16, intArray21);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (short) 0);
        int[] intArray26 = new int[] {};
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (byte) 10);
        int[] intArray29 = new int[] {};
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 10);
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray26, intArray31);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 0);
        int int36 = org.apache.commons.math3.util.MathArrays.distance1(intArray16, intArray26);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray14, intArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        double[] doubleArray8 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray9 = new double[] {};
        double[] doubleArray16 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray16);
        double[] doubleArray22 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray22);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray8, doubleArray22);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray44 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray44, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray38, doubleArray60);
        double double62 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray22, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray22);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray22);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0L, doubleArray67);
        double[] doubleArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray67, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-100.0, -3500.0, -1.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 20.0d + "'", double62 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray22, orderDirection23, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(113.16359838746733d, 58773.0d, (double) 100, (double) '#', 10.0d, (double) 0, 3.3959797E9d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6654464.168026618d + "'", double8 == 6654464.168026618d);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        long[] longArray5 = new long[] { (-1), (byte) 1, 35, ' ', (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[-1, 1, 35, 32, 1]");
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray1 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray15);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15);
        double double41 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray0, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3501.442702658434d + "'", double41 == 3501.442702658434d);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray39);
        double[] doubleArray50 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray58 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        double[] doubleArray72 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray58, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray52, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52, 1);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException88 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = nonMonotonicSequenceException88.getDirection();
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray84, orderDirection89, false);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection89, true, false);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray13, doubleArray77);
        double double97 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[10000.0, 350000.0, 100.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 350144.2702658434d + "'", double97 == 350144.2702658434d);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        java.lang.Class<?> wildcardClass12 = mathIllegalStateException11.getClass();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        double[] doubleArray0 = null;
        double[] doubleArray6 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        double[] doubleArray20 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray6, doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray20, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray20);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = nonMonotonicSequenceException65.getDirection();
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20, orderDirection66, true, false);
        double[] doubleArray70 = new double[] {};
        double[] doubleArray77 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray77);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray70);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection80 = null;
        double[] doubleArray81 = new double[] {};
        double[][] doubleArray82 = new double[][] { doubleArray81 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray70, orderDirection80, doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection66, doubleArray82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 20.0d + "'", double60 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray36 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray37 = new double[] {};
        double[] doubleArray44 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray44);
        double[] doubleArray50 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray36, doubleArray50);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException56 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = nonMonotonicSequenceException56.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException61 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = nonMonotonicSequenceException61.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException66 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection67 = nonMonotonicSequenceException66.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException71 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = nonMonotonicSequenceException71.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException76 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = nonMonotonicSequenceException76.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException81 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection82 = nonMonotonicSequenceException81.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray83 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection57, orderDirection62, orderDirection67, orderDirection72, orderDirection77, orderDirection82 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException87 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = nonMonotonicSequenceException87.getDirection();
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray83, orderDirection88, false);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray36, orderDirection88, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException94 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) (short) 100, (int) 'a', orderDirection88, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray13, orderDirection88, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection57.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection67 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection67.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection82 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection82.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray83);
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, (int) (short) 100);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray54);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray54);
        double double65 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray39, doubleArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException8 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext9 = mathArithmeticException8.getContext();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(exceptionContext9);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray23, (int) 'a');
        double[] doubleArray26 = new double[] {};
        double[] doubleArray33 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray33);
        double[] doubleArray39 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray39);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = nonMonotonicSequenceException47.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection48, false);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray39, orderDirection48, true);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray25, orderDirection48, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection48, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 0);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        double[] doubleArray41 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray16, doubleArray28);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray13, doubleArray45);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray11 = null;
        float[] floatArray14 = new float[] { 10L, 10 };
        float[] floatArray15 = new float[] {};
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray15);
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray20);
        float[] floatArray25 = new float[] { 10L, 10 };
        float[] floatArray26 = new float[] {};
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray26);
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray25);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(floatArray11, floatArray25);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray11);
        float[] floatArray33 = new float[] { 10L, 10 };
        float[] floatArray34 = new float[] {};
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray33, floatArray34);
        float[] floatArray38 = new float[] { 10L, 10 };
        float[] floatArray39 = new float[] {};
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray39);
        float[] floatArray43 = new float[] { 10L, 10 };
        float[] floatArray44 = new float[] {};
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray44);
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray44);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray34, floatArray38);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray38);
        float[] floatArray51 = new float[] { 10L, 10 };
        float[] floatArray52 = new float[] {};
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray52);
        float[] floatArray56 = new float[] { 10L, 10 };
        float[] floatArray57 = new float[] {};
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray56, floatArray57);
        float[] floatArray61 = new float[] { 10L, 10 };
        float[] floatArray62 = new float[] {};
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(floatArray61, floatArray62);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(floatArray56, floatArray62);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray52, floatArray56);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray56);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) (short) 10, 14800.0d, (-1040.0d), (double) (-1.0f), (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.5391999E7d) + "'", double6 == (-1.5391999E7d));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 100.0f, 350144.2702658434d, (double) (short) -1, 3200.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.501122702658434E7d + "'", double4 == 3.501122702658434E7d);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray8 = new int[] {};
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (byte) 10);
        int[] intArray11 = new int[] {};
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) (byte) 10);
        double double14 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray13);
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray8);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = nonMonotonicSequenceException32.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = nonMonotonicSequenceException47.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = nonMonotonicSequenceException52.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray54 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection28, orderDirection33, orderDirection38, orderDirection43, orderDirection48, orderDirection53 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException58.getDirection();
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray54, orderDirection59, false);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray7, orderDirection59, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) (short) 100, (int) 'a', orderDirection59, true);
        org.apache.commons.math3.exception.util.Localizable localizable66 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100, (byte) 10 };
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException70 = new org.apache.commons.math3.exception.MathArithmeticException(localizable66, objArray69);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext71 = mathArithmeticException70.getContext();
        java.lang.Throwable[] throwableArray72 = mathArithmeticException70.getSuppressed();
        org.apache.commons.math3.exception.util.Localizable localizable73 = null;
        org.apache.commons.math3.exception.util.Localizable localizable74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0d, (-1), (byte) -1, (byte) -1, 100.0d, 1.0f };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException82 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable74, objArray81);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException83 = new org.apache.commons.math3.exception.NullArgumentException(localizable73, objArray81);
        mathArithmeticException70.addSuppressed((java.lang.Throwable) nullArgumentException83);
        nonMonotonicSequenceException65.addSuppressed((java.lang.Throwable) mathArithmeticException70);
        java.lang.Number number86 = nonMonotonicSequenceException65.getPrevious();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray54);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100, 10]");
        org.junit.Assert.assertNotNull(exceptionContext71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals("'" + number86 + "' != '" + (short) 100 + "'", number86, (short) 100);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = mathIllegalStateException11.getContext();
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(exceptionContext12);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NotPositiveException notPositiveException3 = new org.apache.commons.math3.exception.NotPositiveException(localizable1, (java.lang.Number) 8477035.0d);
        int[] intArray5 = new int[] {};
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (byte) 10);
        int[] intArray8 = new int[] {};
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (byte) 10);
        double double11 = org.apache.commons.math3.util.MathArrays.distance(intArray5, intArray10);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        int[] intArray16 = new int[] {};
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 10);
        double double19 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray18);
        int int20 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray13);
        java.lang.Object[] objArray21 = new java.lang.Object[] { notPositiveException3, 6654464.168026618d, intArray12 };
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException22 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, objArray21);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(objArray21);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray38 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray38, doubleArray52);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        double[] doubleArray68 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray68);
        double[] doubleArray74 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray75 = new double[] {};
        double[] doubleArray82 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray82);
        double[] doubleArray88 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray74, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray68, doubleArray90);
        double double92 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray52, doubleArray90);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray52);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray52);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-100.0, -3500.0, -1.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 20.0d + "'", double92 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[-3.50101E7, -1.2253535E9, -350101.0, -3501010.0]");
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray14 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray14, doubleArray50);
        double[] doubleArray53 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray53);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray14, (double) 1.0f);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray1, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, (int) (byte) 1);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray28);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray52);
        double[] doubleArray60 = new double[] { (short) 100, 8730.0d, 1630.0d, (-1.0d), 3500.0d };
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray60, (int) (byte) 1);
        double double63 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray52, doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 8730.0, 1630.0, -1.0, 3500.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 180469.0d + "'", double63 == 180469.0d);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray3, doubleArray15);
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray32);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray43);
        double double54 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray53);
        double double55 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray15, doubleArray53);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale(3.3959797E9d, doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray0, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray2);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28, 1);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        double[] doubleArray68 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray68);
        double[] doubleArray74 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray75 = new double[] {};
        double[] doubleArray82 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray82);
        double[] doubleArray88 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray74, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray68, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray68);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray92);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray92);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray94);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.scale(1630.0d, doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray2, doubleArray94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[1.10188E10, 3.85658E11, 1.10188E8, 1.10188E9]");
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        java.lang.Class<?> wildcardClass12 = longArray5.getClass();
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 1);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray61 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray55, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray55);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray15, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale(1630.0d, doubleArray81);
        double[] doubleArray84 = new double[] {};
        double[] doubleArray91 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double92 = org.apache.commons.math3.util.MathArrays.distance(doubleArray84, doubleArray91);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray84);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection94 = null;
        double[] doubleArray95 = new double[] {};
        double[][] doubleArray96 = new double[][] { doubleArray95 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray84, orderDirection94, doubleArray96);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray83, doubleArray96);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.10188E10, 3.85658E11, 1.10188E8, 1.10188E9]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(35924.35148398954d, 8477035.0d, (double) 1L, (double) 100.0f);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.045319849820813E11d + "'", double4 == 3.045319849820813E11d);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray44);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray3, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray2);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException22 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = nonMonotonicSequenceException22.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection23, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 149850.0d, (java.lang.Number) (short) 0, (int) (byte) -1, orderDirection23, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection23, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray13, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        double[] doubleArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double81 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray77, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray27 = null;
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray29);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray40);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray40);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray29);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray29, 0);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53);
        double double55 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray2, doubleArray53);
        double[] doubleArray56 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray2, doubleArray56);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray54);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 2.3669752669971016E8d + "'", double82 == 2.3669752669971016E8d);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException13 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathInternalError mathInternalError14 = new org.apache.commons.math3.exception.MathInternalError((java.lang.Throwable) nullArgumentException13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray3 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, (int) (byte) 10);
        int[] intArray4 = new int[] {};
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) (byte) 10);
        double double7 = org.apache.commons.math3.util.MathArrays.distance(intArray1, intArray6);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, (int) (short) 0);
        int[] intArray11 = new int[] {};
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) (byte) 10);
        int[] intArray14 = new int[] {};
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (byte) 10);
        double double17 = org.apache.commons.math3.util.MathArrays.distance(intArray11, intArray16);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) (short) 0);
        int int21 = org.apache.commons.math3.util.MathArrays.distance1(intArray1, intArray11);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0]");
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 1, 0.0d, (double) (short) 0, (double) (byte) 0, 4425.0d, (double) 10L, (double) (-1), 1122.6359838746732d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 43127.36401612533d + "'", double8 == 43127.36401612533d);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException5 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathInternalError mathInternalError6 = new org.apache.commons.math3.exception.MathInternalError((java.lang.Throwable) mathIllegalArgumentException5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(3.3959797E9d, 1.088956904358433E7d, 3.501122702658434E7d, (double) (short) 1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.6980755448772024E16d + "'", double4 == 3.6980755448772024E16d);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1040.0d, 0.0d, 2.924431183474548E9d, 84770.0d, 0.0d, (double) (-1L), 3.014877405643864E7d, 90.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.479067448128025E14d + "'", double8 == 2.479067448128025E14d);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        double[] doubleArray0 = null;
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection1 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection1 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection1.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, (int) 'a');
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException46 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection47 = nonMonotonicSequenceException46.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection47, false);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray38, orderDirection47, true);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray24, orderDirection47, false);
        double[] doubleArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection47 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection47.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray41);
        double[] doubleArray54 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        double[] doubleArray68 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray68);
        double[] doubleArray74 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray75 = new double[] {};
        double[] doubleArray82 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray82);
        double[] doubleArray88 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray74, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray68, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray54, doubleArray90);
        double[] doubleArray93 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray93);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(doubleArray54, doubleArray93);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray54, (double) 1.0f);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray41, doubleArray97);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray38, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10, 2.479067448128025E14d, 1000.0d, (double) (short) -1, 0.0d, 2.479067448128025E14d, 0.0d, 1695390.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.479067448127025E15d + "'", double8 == 2.479067448127025E15d);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math3.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 1.0f, (java.lang.Number) (byte) 0, false);
        org.apache.commons.math3.exception.util.Localizable localizable5 = null;
        org.apache.commons.math3.exception.util.Localizable localizable6 = null;
        long[] longArray7 = new long[] {};
        long[] longArray8 = new long[] {};
        long[][] longArray9 = new long[][] { longArray7, longArray8 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray9);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray9);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray9);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray9);
        org.apache.commons.math3.exception.MathInternalError mathInternalError14 = new org.apache.commons.math3.exception.MathInternalError(localizable6, (java.lang.Object[]) longArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException4, localizable5, (java.lang.Object[]) longArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray9);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray39);
        double[] doubleArray50 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException9 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException9.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException19 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = nonMonotonicSequenceException19.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray31 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection5, orderDirection10, orderDirection15, orderDirection20, orderDirection25, orderDirection30 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection36, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection43, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray0, orderDirection43, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray31);
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray23, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double26 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray42 = new double[] { 3501.442702658434d, 1.254596E9d, (short) 1 };
        double[][] doubleArray43 = new double[][] { doubleArray42 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray13, doubleArray43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[3501.442702658434, 1.254596E9, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray3);
        org.apache.commons.math3.exception.util.Localizable localizable14 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException18 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable19 = null;
        double[] doubleArray20 = null;
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray22);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray40 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray33);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray33);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray20, doubleArray22);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, 0);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray46);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray55 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray55);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection58 = null;
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray48, orderDirection58, doubleArray60);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray47, doubleArray60);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException63 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException18, localizable19, (java.lang.Object[]) doubleArray60);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException64 = new org.apache.commons.math3.exception.NullArgumentException(localizable14, (java.lang.Object[]) doubleArray60);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray3, doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray60);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException49.getDirection();
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection50, false);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection50, true, false);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray64 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray57, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray57);
        double double67 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray38, doubleArray57);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 1 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException13 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray45 = null;
        double[] doubleArray47 = new double[] {};
        double[] doubleArray54 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray54);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray47);
        double[] doubleArray58 = new double[] {};
        double[] doubleArray65 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray58, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray58);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray58);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray45, doubleArray47);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47, 0);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        double[] doubleArray29 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray29);
        double[] doubleArray35 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray36 = new double[] {};
        double[] doubleArray43 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray43);
        double[] doubleArray49 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray35, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray29, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray29);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray54);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray53, doubleArray54);
        double double65 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        long[] longArray5 = new long[] {};
        long[] longArray6 = new long[] {};
        long[][] longArray7 = new long[][] { longArray5, longArray6 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable4, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException10 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray7);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray7);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray54);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray54);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray54);
        double double66 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        double double40 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray39);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 0);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        double[] doubleArray67 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray54);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3501.442702658434d + "'", double40 == 3501.442702658434d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, 1);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, 1.0d);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray79);
        double[] doubleArray83 = new double[] {};
        double[] doubleArray90 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray83, doubleArray90);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray83);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection93 = null;
        double[] doubleArray94 = new double[] {};
        double[][] doubleArray95 = new double[][] { doubleArray94 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray83, orderDirection93, doubleArray95);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray39, doubleArray95);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 1");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double double23 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray22);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = nonMonotonicSequenceException32.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = nonMonotonicSequenceException47.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = nonMonotonicSequenceException52.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray54 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection28, orderDirection33, orderDirection38, orderDirection43, orderDirection48, orderDirection53 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException58.getDirection();
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray54, orderDirection59, false);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray7, orderDirection59, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 10L, 0, orderDirection59, false);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext66 = nonMonotonicSequenceException65.getContext();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray54);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(exceptionContext66);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException6 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException8 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3.014877405643864E7d, 149850.0d, (double) (byte) 10, 3200.0d, 131.0d, 8567.364016125326d, 4425.0d, 6654464.168026618d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 4.547240950625534E12d + "'", double8 == 4.547240950625534E12d);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(2.479067448127025E15d, 58773.0d, (double) (byte) 0, 4.547240950625534E12d, (double) (byte) 0, 568773.0d, (double) 10.0f, 2.3669752669971016E8d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.4570223113113662E20d + "'", double8 == 1.4570223113113662E20d);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection3, false);
        int int6 = nonMonotonicSequenceException5.getIndex();
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray38 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32, orderDirection37 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray38, orderDirection43, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable7, (java.lang.Object[]) orderDirectionArray38);
        java.lang.Number number47 = nonMonotonicSequenceException5.getPrevious();
        java.lang.Number number48 = nonMonotonicSequenceException5.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = nonMonotonicSequenceException5.getDirection();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray38);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + number47 + "' != '" + 10.0f + "'", number47, 10.0f);
        org.junit.Assert.assertEquals("'" + number48 + "' != '" + 10.0f + "'", number48, 10.0f);
        org.junit.Assert.assertNull(orderDirection49);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray8 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) ' ');
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 35);
        int int14 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray2, intArray13);
        int[] intArray15 = new int[] {};
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (byte) 10);
        int[] intArray18 = new int[] {};
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 10);
        double double21 = org.apache.commons.math3.util.MathArrays.distance(intArray15, intArray20);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        int[] intArray29 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) ' ');
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, 35);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray29);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray2, intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException9 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException9.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException19 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = nonMonotonicSequenceException19.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray31 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection5, orderDirection10, orderDirection15, orderDirection20, orderDirection25, orderDirection30 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection36, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException39 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathInternalError mathInternalError40 = new org.apache.commons.math3.exception.MathInternalError((java.lang.Throwable) nullArgumentException39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray31);
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray0 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection11, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray0, orderDirection11, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray32 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray33 = new double[] {};
        double[] doubleArray40 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray40);
        double[] doubleArray46 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray32, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray26, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26, 1);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException62 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection63 = nonMonotonicSequenceException62.getDirection();
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray58, orderDirection63, false);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray51, orderDirection63, true, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray2, orderDirection63, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0]");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + orderDirection63 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection63.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray58 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        double[] doubleArray72 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray58, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray52, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52, 1);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException88 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = nonMonotonicSequenceException88.getDirection();
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray84, orderDirection89, false);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection89, true, false);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray13, doubleArray77);
        double[] doubleArray97 = null;
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equals(doubleArray77, doubleArray97);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[10000.0, 350000.0, 100.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        int[] intArray0 = null;
        int[] intArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { 10L, 10 };
        float[] floatArray4 = new float[] {};
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray4);
        float[] floatArray8 = new float[] { 10L, 10 };
        float[] floatArray9 = new float[] {};
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray9);
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray9);
        float[] floatArray14 = new float[] { 10L, 10 };
        float[] floatArray15 = new float[] {};
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray15);
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray14);
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray14);
        float[] floatArray21 = new float[] { 10L, 10 };
        float[] floatArray22 = new float[] {};
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(floatArray21, floatArray22);
        float[] floatArray26 = new float[] { 10L, 10 };
        float[] floatArray27 = new float[] {};
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.equals(floatArray26, floatArray27);
        float[] floatArray31 = new float[] { 10L, 10 };
        float[] floatArray32 = new float[] {};
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray32);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray26, floatArray32);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray22, floatArray26);
        float[] floatArray38 = new float[] { 10L, 10 };
        float[] floatArray39 = new float[] {};
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray39);
        float[] floatArray43 = new float[] { 10L, 10 };
        float[] floatArray44 = new float[] {};
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray44);
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray44);
        float[] floatArray49 = new float[] { 10L, 10 };
        float[] floatArray50 = new float[] {};
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(floatArray49, floatArray50);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray38, floatArray49);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray38);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray38);
        float[] floatArray57 = new float[] { 10L, 10 };
        float[] floatArray58 = new float[] {};
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray57, floatArray58);
        float[] floatArray62 = new float[] { 10L, 10 };
        float[] floatArray63 = new float[] {};
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(floatArray62, floatArray63);
        float[] floatArray67 = new float[] { 10L, 10 };
        float[] floatArray68 = new float[] {};
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(floatArray67, floatArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(floatArray62, floatArray68);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray58, floatArray62);
        float[] floatArray74 = new float[] { 10L, 10 };
        float[] floatArray75 = new float[] {};
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equals(floatArray74, floatArray75);
        float[] floatArray79 = new float[] { 10L, 10 };
        float[] floatArray80 = new float[] {};
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray79, floatArray80);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(floatArray74, floatArray80);
        float[] floatArray85 = new float[] { 10L, 10 };
        float[] floatArray86 = new float[] {};
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(floatArray85, floatArray86);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray74, floatArray85);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(floatArray58, floatArray74);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray38, floatArray74);
        java.lang.Class<?> wildcardClass91 = floatArray38.getClass();
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(568773.0d, (double) 100L, 1000.0d, 1630.0003067484374d, (double) 10.0f, (double) 1.0f, 1.771933898620068E12d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.8507310306748435E7d + "'", double8 == 5.8507310306748435E7d);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double double45 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (1,630 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1630.0003067484374d + "'", double45 == 1630.0003067484374d);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException64 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection65 = nonMonotonicSequenceException64.getDirection();
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19, orderDirection65, true, false);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection65 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection65.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray37, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray21, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray21);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray21);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray66, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-100.0, -3500.0, -1.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 20.0d + "'", double61 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-3.50101E7, -1.2253535E9, -350101.0, -3501010.0]");
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException40 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = nonMonotonicSequenceException40.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException45 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection46 = nonMonotonicSequenceException45.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = nonMonotonicSequenceException60.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = nonMonotonicSequenceException65.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray67 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection41, orderDirection46, orderDirection51, orderDirection56, orderDirection61, orderDirection66 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException71 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = nonMonotonicSequenceException71.getDirection();
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray67, orderDirection72, false);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray20, orderDirection72, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException78 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 10L, 0, orderDirection72, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray1, orderDirection72, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection46.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray67);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, 35);
        int[] intArray11 = new int[] {};
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) (byte) 10);
        int[] intArray14 = new int[] {};
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (byte) 10);
        int int17 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray11, intArray14);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int20 = org.apache.commons.math3.util.MathArrays.distance1(intArray5, intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        double[] doubleArray1 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray1, doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.scale((double) 10, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray79 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray80 = new double[] {};
        double[] doubleArray87 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double88 = org.apache.commons.math3.util.MathArrays.distance(doubleArray80, doubleArray87);
        double[] doubleArray93 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double94 = org.apache.commons.math3.util.MathArrays.distance(doubleArray80, doubleArray93);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray79, doubleArray93);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray73, doubleArray95);
        double double97 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray57, doubleArray95);
        double double98 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray38, doubleArray95);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 20.0d + "'", double97 == 20.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1040.0d + "'", double98 == 1040.0d);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException11 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (3,500 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        double[] doubleArray4 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray24 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray24, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray4, doubleArray40);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray44);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray55);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray55);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray4, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(90.0d, doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException9 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException9.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException19 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = nonMonotonicSequenceException19.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray31 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection5, orderDirection10, orderDirection15, orderDirection20, orderDirection25, orderDirection30 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection36, false);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException39 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray31);
        org.apache.commons.math3.exception.util.Localizable localizable40 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException44 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable45 = null;
        double[] doubleArray46 = null;
        double[] doubleArray48 = new double[] {};
        double[] doubleArray55 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray48);
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray59);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray48, doubleArray59);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray46, doubleArray48);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48, 0);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        double[] doubleArray74 = new double[] {};
        double[] doubleArray81 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray74, doubleArray81);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray74);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection84 = null;
        double[] doubleArray85 = new double[] {};
        double[][] doubleArray86 = new double[][] { doubleArray85 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray74, orderDirection84, doubleArray86);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray73, doubleArray86);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException89 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException44, localizable45, (java.lang.Object[]) doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException90 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException39, localizable40, (java.lang.Object[]) doubleArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray31);
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int[] intArray15 = new int[] {};
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (byte) 10);
        double double18 = org.apache.commons.math3.util.MathArrays.distance(intArray12, intArray17);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray11, intArray17);
        int[] intArray20 = new int[] {};
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, (int) (byte) 10);
        int[] intArray23 = new int[] {};
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (byte) 10);
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray23);
        int[] intArray31 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray31);
        int int33 = org.apache.commons.math3.util.MathArrays.distance1(intArray11, intArray31);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        int[] intArray37 = new int[] {};
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (byte) 10);
        double double40 = org.apache.commons.math3.util.MathArrays.distance(intArray34, intArray39);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray1, doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 52, 9701.0d, (double) (short) 10, (double) 100.0f, 84770.0d, (double) ' ', 16213.0d, 3501.442702658434d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.998698253820119E7d + "'", double8 == 5.998698253820119E7d);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 1.0d);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray37, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray21, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray21);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray21);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray21);
        double[] doubleArray67 = null;
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(doubleArray21, doubleArray67);
        double[] doubleArray70 = new double[] {};
        double[] doubleArray77 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray77);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray70);
        double[] doubleArray81 = new double[] {};
        double[] doubleArray88 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray81, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray81);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray67, doubleArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-100.0, -3500.0, -1.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 20.0d + "'", double61 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-3.50101E7, -1.2253535E9, -350101.0, -3501010.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 0, (-1040.0d), 1.0d, 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 52.0d + "'", double4 == 52.0d);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
        double[] doubleArray26 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        double[] doubleArray40 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray26, doubleArray40);
        double[] doubleArray46 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray47 = new double[] {};
        double[] doubleArray54 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray54);
        double[] doubleArray60 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray60);
        double[] doubleArray66 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray67 = new double[] {};
        double[] doubleArray74 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray74);
        double[] doubleArray80 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray80);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray66, doubleArray80);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray60, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray46, doubleArray82);
        double[] doubleArray85 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray46, doubleArray85);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray26, doubleArray46);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException92 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection93 = nonMonotonicSequenceException92.getDirection();
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray26, orderDirection93, true, false);
        double double97 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + orderDirection93 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection93.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 3502.15662128352d + "'", double97 == 3502.15662128352d);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException6 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathInternalError mathInternalError7 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext8 = mathInternalError7.getContext();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(exceptionContext8);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray50 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        double[] doubleArray64 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray50, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray44, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray66);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.1, 3499.999714285714, 2.0, 11.0]");
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((-8477003.0d), doubleArray2);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray28 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        double[] doubleArray42 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray42);
        double[] doubleArray48 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray49 = new double[] {};
        double[] doubleArray56 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray56);
        double[] doubleArray62 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray48, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray42, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray64);
        double[] doubleArray67 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray67);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray28, (double) 1.0f);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray15, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 1");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0]");
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection44, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException47 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable0, localizable1, (java.lang.Object[]) orderDirectionArray32);
        org.apache.commons.math3.exception.NotPositiveException notPositiveException49 = new org.apache.commons.math3.exception.NotPositiveException((java.lang.Number) (-1));
        java.lang.Throwable[] throwableArray50 = notPositiveException49.getSuppressed();
        mathIllegalStateException47.addSuppressed((java.lang.Throwable) notPositiveException49);
        boolean boolean52 = notPositiveException49.getBoundIsAllowed();
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(149850.0d, 350101.0d, (double) 'a', (double) (byte) 1, 1695390.0d, 4.547240950625534E12d, 3501.448701609104d, 2.479067448128025E14d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 8.5773796374885857E18d + "'", double8 == 8.5773796374885857E18d);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray27);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray27);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        double[] doubleArray52 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray53 = new double[] {};
        double[] doubleArray60 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray60);
        double[] doubleArray66 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray66);
        double[] doubleArray72 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray73 = new double[] {};
        double[] doubleArray80 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray80);
        double[] doubleArray86 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray72, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray66, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray52, doubleArray88);
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) 10);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        double double13 = org.apache.commons.math3.util.MathArrays.distance(intArray7, intArray12);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (short) 0);
        int int17 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray16);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        double[] doubleArray16 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray16);
        double[] doubleArray22 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray22, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray16, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41, orderDirection42, true, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 35924.35148398954d, (java.lang.Number) 35924.35148398954d, (int) (byte) 10, orderDirection42, false);
        java.lang.Throwable[] throwableArray48 = nonMonotonicSequenceException47.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        double[] doubleArray25 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double26 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray25);
        double[] doubleArray31 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        double[] doubleArray45 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray31, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray25, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray25, 1);
        double[] doubleArray52 = new double[] {};
        double[] doubleArray59 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray59);
        double[] doubleArray65 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray65);
        double[] doubleArray71 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray72 = new double[] {};
        double[] doubleArray79 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray79);
        double[] doubleArray85 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double86 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray71, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray65, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray65);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equals(doubleArray25, doubleArray89);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray91);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[5200.0, 182000.0, 52.0, 520.0]");
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 100, (double) 0L, 0.0d, 20.0d, 100.0d, 350144.2702658434d, (double) 100L, 131.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.502752702658434E7d + "'", double8 == 3.502752702658434E7d);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray40 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray40, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray34, doubleArray56);
        double double58 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray18, doubleArray56);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 20.0d + "'", double58 == 20.0d);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, (int) ' ');
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) 100, doubleArray13);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray13, orderDirection15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(6654464.168026618d, 4425.0d, 3501.442702658434d, 58773.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.965179423548113E10d + "'", double4 == 2.965179423548113E10d);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray40 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray40, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray34, doubleArray56);
        double double58 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray18, doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray56);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 20.0d + "'", double58 == 20.0d);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray3);
        double double16 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray15);
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(3.6980755448772024E16d, (double) '#', (double) 'a', 3501.442702658434d, (double) '4', 101.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.29432644070736563E18d + "'", double6 == 1.29432644070736563E18d);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (short) 10, 3.502752702658434E7d, 8477035.0d, 2.3669752669971016E8d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.0064935685221478E15d + "'", double4 == 2.0064935685221478E15d);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray13, doubleArray77);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray77, (double) (short) 1);
        double[] doubleArray83 = new double[] {};
        double[] doubleArray90 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray83, doubleArray90);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray83);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray83);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray83);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale((double) 10, doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double96 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray80, doubleArray83);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.027693159789531987, 0.9692605926336195, 2.7693159789531985E-4, 0.0027693159789531985]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection44, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException47 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable0, localizable1, (java.lang.Object[]) orderDirectionArray32);
        org.apache.commons.math3.exception.NotPositiveException notPositiveException49 = new org.apache.commons.math3.exception.NotPositiveException((java.lang.Number) (-1));
        java.lang.Throwable[] throwableArray50 = notPositiveException49.getSuppressed();
        mathIllegalStateException47.addSuppressed((java.lang.Throwable) notPositiveException49);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext52 = mathIllegalStateException47.getContext();
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(exceptionContext52);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray16 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray23 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray16, floatArray23);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray16);
        float[] floatArray26 = null;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray26);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, (int) 'a');
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException46 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection47 = nonMonotonicSequenceException46.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection47, false);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray38, orderDirection47, true);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray24, orderDirection47, false);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, (int) '4');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection47 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection47.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        org.apache.commons.math3.exception.util.Localizable localizable13 = null;
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException23 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection24 = nonMonotonicSequenceException23.getDirection();
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray19, orderDirection24, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException27 = new org.apache.commons.math3.exception.NullArgumentException(localizable13, (java.lang.Object[]) strArray19);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray33, orderDirection38, false);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray19, orderDirection38, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection38, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + orderDirection24 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection24.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        float[] floatArray12 = new float[] { 10L, 10 };
        float[] floatArray13 = new float[] {};
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray12, floatArray13);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray13);
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        float[] floatArray24 = new float[] { 10L, 10 };
        float[] floatArray25 = new float[] {};
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray25);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray25);
        float[] floatArray30 = new float[] { 10L, 10 };
        float[] floatArray31 = new float[] {};
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray30);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray19);
        float[] floatArray38 = new float[] { (byte) 0, 'a', 0L };
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray38);
        float[] floatArray45 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray52 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray45, floatArray52);
        float[] floatArray56 = new float[] { 10L, 10 };
        float[] floatArray57 = new float[] {};
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray56, floatArray57);
        float[] floatArray61 = new float[] { 10L, 10 };
        float[] floatArray62 = new float[] {};
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(floatArray61, floatArray62);
        float[] floatArray66 = new float[] { 10L, 10 };
        float[] floatArray67 = new float[] {};
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(floatArray66, floatArray67);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(floatArray61, floatArray67);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray57, floatArray61);
        float[] floatArray73 = new float[] { 10L, 10 };
        float[] floatArray74 = new float[] {};
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equals(floatArray73, floatArray74);
        float[] floatArray78 = new float[] { 10L, 10 };
        float[] floatArray79 = new float[] {};
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray78, floatArray79);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray73, floatArray79);
        float[] floatArray84 = new float[] { 10L, 10 };
        float[] floatArray85 = new float[] {};
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(floatArray84, floatArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray73, floatArray84);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(floatArray57, floatArray73);
        float[] floatArray92 = new float[] { (byte) 0, 'a', 0L };
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray57, floatArray92);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.equals(floatArray52, floatArray92);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray92);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 97.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(floatArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray92), "[0.0, 97.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, 20.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException10 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException11 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        long[] longArray5 = new long[] {};
        long[] longArray6 = new long[] {};
        long[][] longArray7 = new long[][] { longArray5, longArray6 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable4, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException10 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathInternalError mathInternalError13 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) longArray7);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray3, (double) 1.0f);
        double[] doubleArray49 = new double[] {};
        double[] doubleArray56 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray56);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray49);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49, 0);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray49);
        double double62 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray61);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray63);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray40 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray40, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray34, doubleArray56);
        double double58 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray18, doubleArray56);
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray59);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray59);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray56, doubleArray71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 32");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 20.0d + "'", double58 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray2);
        org.apache.commons.math3.exception.util.Localizable localizable13 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException17 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable18 = null;
        double[] doubleArray19 = null;
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray21);
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray32);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray21, doubleArray32);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray19, doubleArray21);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21, 0);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45);
        double[] doubleArray47 = new double[] {};
        double[] doubleArray54 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray54);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray47);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = null;
        double[] doubleArray58 = new double[] {};
        double[][] doubleArray59 = new double[][] { doubleArray58 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray47, orderDirection57, doubleArray59);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray46, doubleArray59);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException62 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException17, localizable18, (java.lang.Object[]) doubleArray59);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException63 = new org.apache.commons.math3.exception.NullArgumentException(localizable13, (java.lang.Object[]) doubleArray59);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray2, doubleArray59);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 3.014877405643864E7d, (double) 1, 1300.0d, 2.924431183474548E9d, (double) '#', 3.045319849820813E11d, (double) 100.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.055555359092974E13d + "'", double8 == 3.055555359092974E13d);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(4425.0d, (double) (short) 1, 0.0d, 2.479067448128025E14d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4425.0d + "'", double4 == 4425.0d);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        double[] doubleArray6 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        double[] doubleArray20 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray6, doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray20, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray20);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = nonMonotonicSequenceException65.getDirection();
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20, orderDirection66, true, false);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.scale(4425.0d, doubleArray20);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException77 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = nonMonotonicSequenceException77.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException80 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (-1L), (java.lang.Number) 350101.0d, (int) ' ', orderDirection78, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray70, orderDirection78, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (15,487,500 >= 4,425)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 20.0d + "'", double60 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[442500.0, 1.54875E7, 4425.0, 44250.0]");
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        double[] doubleArray16 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray16);
        double[] doubleArray22 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray22, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray16, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray16);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray29 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        double[] doubleArray43 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray43);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray29, doubleArray43);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray53 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray53);
        double[] doubleArray59 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray59);
        double[] doubleArray65 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray66 = new double[] {};
        double[] doubleArray73 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray73);
        double[] doubleArray79 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray65, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray59, doubleArray81);
        double double83 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray43, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray43);
        double double85 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray2, doubleArray43);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 10, doubleArray2);
        double[] doubleArray87 = new double[] {};
        double[] doubleArray94 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray87, doubleArray94);
        double double96 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray94);
        double[] doubleArray98 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray94, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 6");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 20.0d + "'", double83 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 113.16359838746733d + "'", double96 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[-0.006172839506172839, 0.006172839506172839, 0.32098765432098764, 0.06172839506172839, 0.6172839506172839, 0.0]");
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray30 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray30, doubleArray44);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 1);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = nonMonotonicSequenceException60.getDirection();
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray56, orderDirection61, false);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray49, orderDirection61, true, false);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray74 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray74);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray67);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = null;
        double[] doubleArray78 = new double[] {};
        double[][] doubleArray79 = new double[][] { doubleArray78 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray67, orderDirection77, doubleArray79);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection61, doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = new int[] {};
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (byte) 10);
        int[] intArray11 = new int[] {};
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) (byte) 10);
        double double14 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray13);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) (short) 0);
        int[] intArray18 = new int[] {};
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 10);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray21);
        int[] intArray29 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray29);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray31);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3.014877405643864E7d, 35924.35148398954d, 9701.0d, 84770.0d, 0.0d, (double) '#', 2.479067448128025E14d, (double) 1.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.4899064232258738E14d + "'", double8 == 2.4899064232258738E14d);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 100.0d, 6654464.168026618d, (double) 'a');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 6.45483024298582E8d + "'", double4 == 6.45483024298582E8d);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = mathIllegalStateException8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray27);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray27);
        double[] doubleArray42 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray62 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray63 = new double[] {};
        double[] doubleArray70 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double71 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray70);
        double[] doubleArray76 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double77 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray62, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray56, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray42, doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray38, doubleArray78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        double[] doubleArray8 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray9 = new double[] {};
        double[] doubleArray16 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray16);
        double[] doubleArray22 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray22);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray8, doubleArray22);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray44 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray44, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray38, doubleArray60);
        double double62 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray22, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray22);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray22);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-100.0, -3500.0, -1.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 20.0d + "'", double62 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(4.547240950625534E12d, 1.254596E9d, 52.0d, (double) 100, 3.045319849820813E11d, (double) 100, 1000.0d, 1630.0003067484374d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.704950338144193E21d + "'", double8 == 5.704950338144193E21d);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, (int) ' ');
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (short) 100, doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException9 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException9.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException19 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = nonMonotonicSequenceException19.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray31 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection5, orderDirection10, orderDirection15, orderDirection20, orderDirection25, orderDirection30 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray31, orderDirection36, false);
        org.apache.commons.math3.exception.MathInternalError mathInternalError39 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) orderDirectionArray31);
        java.lang.Throwable throwable40 = null;
        // The following exception was thrown during execution in test generation
        try {
            mathInternalError39.addSuppressed(throwable40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray31);
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray24);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 0);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray24);
        double double37 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection3, false);
        int int6 = nonMonotonicSequenceException5.getIndex();
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray38 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32, orderDirection37 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray38, orderDirection43, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable7, (java.lang.Object[]) orderDirectionArray38);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext47 = nonMonotonicSequenceException5.getContext();
        java.lang.Class<?> wildcardClass48 = exceptionContext47.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray38);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(exceptionContext47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray54);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray54);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray54);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException69 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext70 = nonMonotonicSequenceException69.getContext();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = nonMonotonicSequenceException69.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray54, orderDirection71, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(exceptionContext70);
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 1.0d);
        double[] doubleArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray8 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, (int) ' ');
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8);
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray8, 35);
        int int14 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray2, intArray13);
        int[] intArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = org.apache.commons.math3.util.MathArrays.distance1(intArray2, intArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray27, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray27);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray32 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray33 = new double[] {};
        double[] doubleArray40 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray40);
        double[] doubleArray46 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray32, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray26, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26, 1);
        double[] doubleArray53 = new double[] {};
        double[] doubleArray60 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray60);
        double[] doubleArray66 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray66);
        double[] doubleArray72 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray73 = new double[] {};
        double[] doubleArray80 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray80);
        double[] doubleArray86 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray72, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray66, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray66);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray92);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale(1630.0d, doubleArray92);
        double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.10188E10, 3.85658E11, 1.10188E8, 1.10188E9]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) -1, 0.0d, 20.0d, (double) 35, (double) 35, 0.0d, (double) 0.0f, 3200.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 700.0d + "'", double8 == 700.0d);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, 100);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray2);
        double[] doubleArray18 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        double[] doubleArray32 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray32);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray18, doubleArray32);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray54 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        double[] doubleArray68 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray54, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray32, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray32);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException77 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = nonMonotonicSequenceException77.getDirection();
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray32, orderDirection78, true, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection78, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 20.0d + "'", double72 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 1);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray61 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray55, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray55);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray15, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray81);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray81, 1630.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[45.13985045693714, 1579.8947659927999, 0.45139850456937136, 4.513985045693714]");
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = null;
        double[][] doubleArray26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray2, orderDirection25, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        float[] floatArray2 = new float[] { 100.0f, 10.0f };
        float[] floatArray5 = new float[] { 10L, 10 };
        float[] floatArray6 = new float[] {};
        boolean boolean7 = org.apache.commons.math3.util.MathArrays.equals(floatArray5, floatArray6);
        float[] floatArray10 = new float[] { 10L, 10 };
        float[] floatArray11 = new float[] {};
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray11);
        float[] floatArray15 = new float[] { 10L, 10 };
        float[] floatArray16 = new float[] {};
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equals(floatArray15, floatArray16);
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equals(floatArray10, floatArray16);
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray10);
        float[] floatArray22 = new float[] { 10L, 10 };
        float[] floatArray23 = new float[] {};
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray23);
        float[] floatArray27 = new float[] { 10L, 10 };
        float[] floatArray28 = new float[] {};
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(floatArray27, floatArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray28);
        float[] floatArray33 = new float[] { 10L, 10 };
        float[] floatArray34 = new float[] {};
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray33, floatArray34);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray22, floatArray33);
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.equals(floatArray6, floatArray22);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray6);
        float[] floatArray39 = null;
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray6, floatArray39);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[100.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray13, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        double[] doubleArray80 = new double[] {};
        double[] doubleArray87 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double88 = org.apache.commons.math3.util.MathArrays.distance(doubleArray80, doubleArray87);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray80);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = null;
        double[] doubleArray91 = new double[] {};
        double[][] doubleArray92 = new double[][] { doubleArray91 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray80, orderDirection90, doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray77, doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray2, 700.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(9701.0d, 5.8507310306748435E7d, 9701.0d, (double) (byte) 10);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.675795142957666E11d + "'", double4 == 5.675795142957666E11d);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 35, doubleArray1);
        double[] doubleArray17 = new double[] { 10.0f, 568773.0d, 3501.448701609104d, 1695390.0d };
        double[] doubleArray22 = new double[] { 10.0f, 568773.0d, 3501.448701609104d, 1695390.0d };
        double[][] doubleArray23 = new double[][] { doubleArray17, doubleArray22 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray1, doubleArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 568773.0, 3501.448701609104, 1695390.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 568773.0, 3501.448701609104, 1695390.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray28);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = null;
        double[] doubleArray39 = new double[] {};
        double[][] doubleArray40 = new double[][] { doubleArray39 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray28, orderDirection38, doubleArray40);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray27, doubleArray40);
        java.lang.Class<?> wildcardClass43 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4, 0);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray4);
        double double17 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray16);
        double[] doubleArray22 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray22, doubleArray58);
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray22, doubleArray61);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray22);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale((double) 52, doubleArray22);
        double[] doubleArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double67 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray22, doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 84760.0, -52.0]");
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection4 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException6 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection4, false);
        int int7 = nonMonotonicSequenceException6.getIndex();
        org.apache.commons.math3.exception.util.Localizable localizable8 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException12 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = nonMonotonicSequenceException12.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException17 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection18 = nonMonotonicSequenceException17.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException22 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = nonMonotonicSequenceException22.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = nonMonotonicSequenceException32.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray39 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection13, orderDirection18, orderDirection23, orderDirection28, orderDirection33, orderDirection38 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray39, orderDirection44, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException47 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException6, localizable8, (java.lang.Object[]) orderDirectionArray39);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException48 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) orderDirectionArray39);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext49 = mathArithmeticException48.getContext();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray39);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(exceptionContext49);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 0);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray21);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, 0);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray21);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 100);
        int[] intArray30 = new int[] {};
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (byte) 10);
        int[] intArray33 = new int[] {};
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (byte) 10);
        double double36 = org.apache.commons.math3.util.MathArrays.distance(intArray30, intArray35);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (short) 0);
        int[] intArray40 = new int[] {};
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (byte) 10);
        int[] intArray43 = new int[] {};
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 10);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray40, intArray45);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (short) 0);
        int int50 = org.apache.commons.math3.util.MathArrays.distance1(intArray30, intArray40);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, 1);
        int int53 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray40);
        int[] intArray54 = new int[] {};
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (byte) 10);
        int[] intArray57 = new int[] {};
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (byte) 10);
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray54, intArray57);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) ' ');
        int[] intArray63 = new int[] {};
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (byte) 10);
        int[] intArray66 = new int[] {};
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (byte) 10);
        double double69 = org.apache.commons.math3.util.MathArrays.distance(intArray63, intArray68);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 0);
        int[] intArray73 = new int[] {};
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (byte) 10);
        int[] intArray76 = new int[] {};
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (byte) 10);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(intArray73, intArray78);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73);
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 0);
        int int83 = org.apache.commons.math3.util.MathArrays.distance1(intArray63, intArray73);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, 1);
        double double86 = org.apache.commons.math3.util.MathArrays.distance(intArray54, intArray73);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73);
        int int88 = org.apache.commons.math3.util.MathArrays.distance1(intArray40, intArray73);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray2);
        double[] doubleArray18 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        double[] doubleArray32 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray32);
        double[] doubleArray38 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray38, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray32, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray54);
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray57);
        double double60 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray2, doubleArray18);
        double[] doubleArray66 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray67 = new double[] {};
        double[] doubleArray74 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray74);
        double[] doubleArray80 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray80);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray66, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray2, doubleArray80);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1630.0003067484374d + "'", double60 == 1630.0003067484374d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray36);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray36);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray21, doubleArray61);
        double double63 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 349.9714285714286, 99.1, 3600.999714285714, 3500.997142857143, 11.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.4177447166653994d + "'", double63 == 1.4177447166653994d);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(100.0d, 2073255.0d, 0.0d, (double) '4', 3.502752702658434E7d, (double) (byte) 10);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.576007702658434E8d + "'", double6 == 5.576007702658434E8d);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray13, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        double[] doubleArray82 = new double[] {};
        double[] doubleArray89 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray82, doubleArray89);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray82);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray79, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray58 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        double[] doubleArray72 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray58, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray52, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52, 1);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException88 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = nonMonotonicSequenceException88.getDirection();
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray84, orderDirection89, false);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection89, true, false);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray13, doubleArray77);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[10000.0, 350000.0, 100.0, 1000.0]");
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray37, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray21, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray21);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray21);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.scale((double) (short) 10, doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-100.0, -3500.0, -1.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 20.0d + "'", double61 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1000.0, -35000.0, -10.0, -100.0]");
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray7, (double) 1.0f);
        double[] doubleArray12 = null;
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray25);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray14, doubleArray25);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray12, doubleArray14);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 0);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray40);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = null;
        double[] doubleArray51 = new double[] {};
        double[][] doubleArray52 = new double[][] { doubleArray51 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray40, orderDirection50, doubleArray52);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray39, doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 113.16359838746733d + "'", double9 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-0.006172839506172839, 0.006172839506172839, 0.32098765432098764, 0.06172839506172839, 0.6172839506172839, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 1);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray80, 1.0d);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException8 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = mathArithmeticException8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable0, localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1.0f), 52.0d, 0.0d, 1300.0d, 0.0d, 9701.0d, (double) (byte) 10, 5.576007702658434E8d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 5.576007650658434E9d + "'", double8 == 5.576007650658434E9d);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray1, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20);
        double[] doubleArray22 = null;
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray24);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray35);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray24, doubleArray35);
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray22, doubleArray24);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 0);
        double[] doubleArray49 = null;
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray51);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray62);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray51, doubleArray62);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray49, doubleArray51);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51, 0);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray75);
        double double77 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray24, doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray5 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray10 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray15 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray20 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[][] longArray21 = new long[][] { longArray5, longArray10, longArray15, longArray20 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray21);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException23 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray21);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray21);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray0);
        double[] doubleArray10 = new double[] {};
        double[] doubleArray17 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray17);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray10);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray10);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray10, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray0, doubleArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 32");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray2);
        double[] doubleArray18 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        double[] doubleArray32 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray32);
        double[] doubleArray38 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray38, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray32, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray54);
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray57);
        double double60 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray2, doubleArray18);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18);
        double double63 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1630.0003067484374d + "'", double60 == 1630.0003067484374d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1630.0003067484374d + "'", double63 == 1630.0003067484374d);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 1);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray61 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray55, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray55);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray15, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale(1630.0d, doubleArray81);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray83, orderDirection84, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.10188E10, 3.85658E11, 1.10188E8, 1.10188E9]");
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 0);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray21);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, 0);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray21);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 100);
        int[] intArray30 = new int[] {};
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (byte) 10);
        int[] intArray33 = new int[] {};
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (byte) 10);
        double double36 = org.apache.commons.math3.util.MathArrays.distance(intArray30, intArray35);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (short) 0);
        int[] intArray40 = new int[] {};
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (byte) 10);
        int[] intArray43 = new int[] {};
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 10);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray40, intArray45);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (short) 0);
        int int50 = org.apache.commons.math3.util.MathArrays.distance1(intArray30, intArray40);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, 1);
        int int53 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray40);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray15);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray40);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        double[] doubleArray55 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray56 = new double[] {};
        double[] doubleArray63 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray63);
        double[] doubleArray69 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray69);
        double[] doubleArray75 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray76 = new double[] {};
        double[] doubleArray83 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray76, doubleArray83);
        double[] doubleArray89 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray76, doubleArray89);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray75, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray69, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray55, doubleArray91);
        double double94 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(3.6980755448772024E16d, (double) (-1), 2.4899064232258738E14d, (double) 1L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-3.673176480644944E16d) + "'", double4 == (-3.673176480644944E16d));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        java.lang.Class<?> wildcardClass9 = longArray3.getClass();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, 35);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection63 = null;
        double[] doubleArray64 = new double[] {};
        double[][] doubleArray65 = new double[][] { doubleArray64 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray62, orderDirection63, doubleArray65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 35");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, 35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (3,500 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(43127.36401612533d, 8730.0d, 8477035.0d, 5.675795142957666E11d, (double) 0L, (double) (short) 1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.8113914083447153E18d + "'", double6 == 4.8113914083447153E18d);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 'a', doubleArray8);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray30 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray30, doubleArray44);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 1);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        double[] doubleArray64 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray64);
        double[] doubleArray70 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray71 = new double[] {};
        double[] doubleArray78 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray78);
        double[] doubleArray84 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray70, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray64, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64, 1);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray90, 1.0d);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray90);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray90);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90, (int) '#');
        double double97 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-97.0, 97.0, 5044.0, 970.0, 9700.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 10978.208141586678d + "'", double97 == 10978.208141586678d);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray34);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray34, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray34);
        double[] doubleArray50 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        double[] doubleArray64 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray64);
        double[] doubleArray70 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray71 = new double[] {};
        double[] doubleArray78 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray78);
        double[] doubleArray84 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray70, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray64, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray50, doubleArray86);
        double[] doubleArray89 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray89);
        double double92 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray50);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray34, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(10.0d, doubleArray50);
        double double95 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray30, doubleArray50);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 16300.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1630.0003067484374d + "'", double92 == 1630.0003067484374d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double double12 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 0);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray16);
        double double29 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray2, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 52, doubleArray28);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException40 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = nonMonotonicSequenceException40.getDirection();
        java.lang.Number number42 = nonMonotonicSequenceException40.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException40.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException45 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 0L, (int) ' ', orderDirection43, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray28, orderDirection43, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number42 + "' != '" + (short) -1 + "'", number42, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray1 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray38);
        java.lang.Number number40 = null;
        java.lang.Number number41 = null;
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray51, orderDirection56, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection56, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException62 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number40, number41, 0, orderDirection56, true);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection56, false, false);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 0);
        int int20 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray10);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, 1);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        double[] doubleArray0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable6 = null;
        double[] doubleArray7 = null;
        double[] doubleArray9 = new double[] {};
        double[] doubleArray16 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray16);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray9);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray20);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray20);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray7, doubleArray9);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9, 0);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray33);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray35);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection45 = null;
        double[] doubleArray46 = new double[] {};
        double[][] doubleArray47 = new double[][] { doubleArray46 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray35, orderDirection45, doubleArray47);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray34, doubleArray47);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException50 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable6, (java.lang.Object[]) doubleArray47);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException51 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2.4899064232258738E14d, (double) ' ', 0.0d, 3.502752702658434E7d, 97.0d, 1630.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 7.967700554480906E15d + "'", double6 == 7.967700554480906E15d);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray14);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray31);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray42);
        double double53 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray14, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(3.3959797E9d, doubleArray52);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double double11 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray27);
        double[] doubleArray35 = new double[] { 3.6980755448772024E16d, 1300.0d, 1.0d, 1630.0d };
        double[] doubleArray40 = new double[] { 3.6980755448772024E16d, 1300.0d, 1.0d, 1630.0d };
        double[] doubleArray45 = new double[] { 3.6980755448772024E16d, 1300.0d, 1.0d, 1630.0d };
        double[][] doubleArray46 = new double[][] { doubleArray35, doubleArray40, doubleArray45 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray30, doubleArray46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[3.6980755448772024E16, 1300.0, 1.0, 1630.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[3.6980755448772024E16, 1300.0, 1.0, 1630.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[3.6980755448772024E16, 1300.0, 1.0, 1630.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        double[] doubleArray0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException12 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = nonMonotonicSequenceException12.getDirection();
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray8, orderDirection13, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException16 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) strArray8);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException17 = new org.apache.commons.math3.exception.MathArithmeticException(localizable1, (java.lang.Object[]) strArray8);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray8, orderDirection22, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException28 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable29 = null;
        double[] doubleArray30 = null;
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray32);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray43);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray30, doubleArray32);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray32, 0);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56);
        double[] doubleArray58 = new double[] {};
        double[] doubleArray65 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray58, doubleArray65);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray58);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection68 = null;
        double[] doubleArray69 = new double[] {};
        double[][] doubleArray70 = new double[][] { doubleArray69 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray58, orderDirection68, doubleArray70);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray57, doubleArray70);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException73 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException28, localizable29, (java.lang.Object[]) doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection22, doubleArray70);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray27 = null;
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray29);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray40);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray40);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray29);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray29, 0);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53);
        double double55 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray2, doubleArray53);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray63 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray63);
        double[] doubleArray69 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray69);
        double[] doubleArray75 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray76 = new double[] {};
        double[] doubleArray83 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray76, doubleArray83);
        double[] doubleArray89 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray76, doubleArray89);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray75, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray69, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, 1);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray53, doubleArray94);
        java.lang.Class<?> wildcardClass96 = doubleArray53.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 'a', doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 2 and 3 are not strictly increasing (5,044 >= 970)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-97.0, 97.0, 5044.0, 970.0, 9700.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(4.547240950625534E12d, (double) 0L, 3200.0d, 0.0d, (double) 10, (double) (short) 0, 4.547240950625534E12d, (double) ' ');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.455117104200171E14d + "'", double8 == 1.455117104200171E14d);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray2);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) -1, doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        long[] longArray5 = new long[] { ' ', (-1), (-1L), (-1), (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, -1, -1, -1, -1]");
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException6 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext7 = mathArithmeticException6.getContext();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(exceptionContext7);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray14);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable36 = null;
        double[] doubleArray37 = null;
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray39);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray57 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray50);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray50);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray37, doubleArray39);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, 0);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray63);
        double[] doubleArray65 = new double[] {};
        double[] doubleArray72 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray72);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray65);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = null;
        double[] doubleArray76 = new double[] {};
        double[][] doubleArray77 = new double[][] { doubleArray76 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray65, orderDirection75, doubleArray77);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray64, doubleArray77);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException80 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException35, localizable36, (java.lang.Object[]) doubleArray77);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray2, doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.MathInternalError mathInternalError40 = new org.apache.commons.math3.exception.MathInternalError(localizable1, (java.lang.Object[]) orderDirectionArray32);
        java.lang.Number number41 = null;
        java.lang.Number number42 = null;
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException56 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = nonMonotonicSequenceException56.getDirection();
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray52, orderDirection57, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException61 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection57, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number41, number42, 0, orderDirection57, true);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection57, false);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException66 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = mathIllegalArgumentException66.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection57.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray27, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray27);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray51);
        double[] doubleArray59 = new double[] { (short) 100, 8730.0d, 1630.0d, (-1.0d), 3500.0d };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, (int) (byte) 1);
        double double62 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray51, doubleArray59);
        double[] doubleArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 8730.0, 1630.0, -1.0, 3500.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 180469.0d + "'", double62 == 180469.0d);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray34);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray34, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray34);
        double[] doubleArray50 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        double[] doubleArray64 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray64);
        double[] doubleArray70 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray71 = new double[] {};
        double[] doubleArray78 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray78);
        double[] doubleArray84 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray70, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray64, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray50, doubleArray86);
        double[] doubleArray89 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray89);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray50, doubleArray89);
        double double92 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray50);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray34, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(10.0d, doubleArray50);
        double double95 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray30, doubleArray50);
        double[][] doubleArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray30, doubleArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 16300.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1630.0003067484374d + "'", double92 == 1630.0003067484374d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException18 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int19 = nonMonotonicSequenceException18.getIndex();
        int int20 = nonMonotonicSequenceException18.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException18.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection21, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.scale(3.6980755448772024E16d, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1000.0d, (double) 32, 568773.0d, 0.0d, 0.0d, 1.4570223113113662E20d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 32000.0d + "'", double6 == 32000.0d);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, (int) (short) 100);
        double[] doubleArray46 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray47 = new double[] {};
        double[] doubleArray54 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray54);
        double[] doubleArray60 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray46, doubleArray60);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray60);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray39, doubleArray60);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray60, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10000.0, 350000.0, 100.0, 1000.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double double23 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray22);
        double[] doubleArray24 = null;
        double[] doubleArray26 = new double[] {};
        double[] doubleArray33 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray33);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray26);
        double[] doubleArray37 = new double[] {};
        double[] doubleArray44 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray44);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray37);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray26, doubleArray37);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray24, doubleArray26);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26, 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray22, doubleArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        double double25 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray24);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray24);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray28);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray28);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale(568773.0d, doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        long[] longArray2 = new long[] { (-1L), 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1, 0]");
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        double double25 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray24);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray24);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray28);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray28);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale(568773.0d, doubleArray24);
        double double41 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(9701.0d, (-1040.0d), 7002072.0d, 0.0d, (-1.0d), 3500.0d, 8.5773796374885857E18d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.009254E7d) + "'", double8 == (-1.009254E7d));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException2 = new org.apache.commons.math3.exception.NullArgumentException();
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        org.apache.commons.math3.exception.util.Localizable localizable5 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { 100.0d, (-1), (byte) -1, (byte) -1, 100.0d, 1.0f };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable5, objArray12);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException14 = new org.apache.commons.math3.exception.NullArgumentException(localizable4, objArray12);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext15 = nullArgumentException14.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext16 = nullArgumentException14.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext17 = nullArgumentException14.getContext();
        java.lang.Number number18 = null;
        org.apache.commons.math3.exception.NotPositiveException notPositiveException19 = new org.apache.commons.math3.exception.NotPositiveException(number18);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        java.lang.Object[] objArray36 = new java.lang.Object[] { nullArgumentException2, true, nullArgumentException14, notPositiveException19, 35, doubleArray21 };
        org.apache.commons.math3.exception.MathInternalError mathInternalError37 = new org.apache.commons.math3.exception.MathInternalError(localizable1, objArray36);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException38 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, objArray36);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext39 = mathIllegalStateException38.getContext();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(exceptionContext15);
        org.junit.Assert.assertNotNull(exceptionContext16);
        org.junit.Assert.assertNotNull(exceptionContext17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(exceptionContext39);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = nonMonotonicSequenceException32.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection33, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray23, orderDirection36, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        double[] doubleArray1 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        double[] doubleArray16 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray16);
        double[] doubleArray22 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray22, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray16, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 1);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray62 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray63 = new double[] {};
        double[] doubleArray70 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double71 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray70);
        double[] doubleArray76 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double77 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray62, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray56, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray56);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray80);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray82);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray82);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray82, (int) (short) 100);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray82, orderDirection88, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray27, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray27);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray51);
        double[] doubleArray59 = new double[] { (short) 100, 8730.0d, 1630.0d, (-1.0d), 3500.0d };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, (int) (byte) 1);
        double double62 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray51, doubleArray59);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 8730.0, 1630.0, -1.0, 3500.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 180469.0d + "'", double62 == 180469.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 1);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray80, 1.0d);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray80);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray80);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.scale((double) 32, doubleArray80);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException89 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = nonMonotonicSequenceException89.getDirection();
        java.lang.Number number91 = nonMonotonicSequenceException89.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection92 = nonMonotonicSequenceException89.getDirection();
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray80, orderDirection92, true, false);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[3200.0]");
        org.junit.Assert.assertTrue("'" + orderDirection90 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection90.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number91 + "' != '" + (short) -1 + "'", number91, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection92 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection92.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = mathIllegalStateException11.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        double double25 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray24);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray24);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray28);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray28);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, 1);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(20.0d, doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[2000.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (-1.0f), 6654464.168026618d, 0.0d, (double) 100L, (double) 0.0f, 0.0d, 5.675795142957666E11d, 13500.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 7.662323436338385E15d + "'", double8 == 7.662323436338385E15d);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray25 = null;
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 100.0f, (double) 100.0f, 0.0d, 13500.0d, (double) '#', 3501.448701609104d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 132550.70455631864d + "'", double6 == 132550.70455631864d);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray28 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        double[] doubleArray42 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray28, doubleArray42);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray64 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray65 = new double[] {};
        double[] doubleArray72 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray72);
        double[] doubleArray78 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray64, doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray58, doubleArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray42, doubleArray80);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray42);
        double double84 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray1, doubleArray42);
        double[] doubleArray85 = null;
        double double86 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray1, doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 20.0d + "'", double82 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray31 = null;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray1, doubleArray31);
        double[] doubleArray37 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray38 = new double[] {};
        double[] doubleArray45 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray45);
        double[] doubleArray51 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray37, doubleArray51);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException57 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection58 = nonMonotonicSequenceException57.getDirection();
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray51, orderDirection58, false, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray1, orderDirection58, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection58 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection58.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 1);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray55 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray48);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48, 0);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray42, doubleArray48);
        double[] doubleArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray42, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        double[] doubleArray0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.MathInternalError mathInternalError40 = new org.apache.commons.math3.exception.MathInternalError(localizable1, (java.lang.Object[]) orderDirectionArray32);
        java.lang.Number number41 = null;
        java.lang.Number number42 = null;
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException56 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = nonMonotonicSequenceException56.getDirection();
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray52, orderDirection57, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException61 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection57, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number41, number42, 0, orderDirection57, true);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection57, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection57, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection57.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException40 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) orderDirectionArray32);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException41 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray14);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray31);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray42);
        double double53 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray14, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (byte) -1, doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { 100.0d, (-1), (byte) -1, (byte) -1, 100.0d, 1.0f };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, objArray9);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException11 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, objArray9);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = nullArgumentException11.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext13 = nullArgumentException11.getContext();
        double[] doubleArray18 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        double[] doubleArray32 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray32);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray18, doubleArray32);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException38 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        java.lang.Class<?> wildcardClass39 = nonMonotonicSequenceException38.getClass();
        java.lang.Object[] objArray40 = new java.lang.Object[] { exceptionContext13, doubleArray18, nonMonotonicSequenceException38 };
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException41 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, objArray40);
        java.lang.Throwable[] throwableArray42 = nullArgumentException41.getSuppressed();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(exceptionContext12);
        org.junit.Assert.assertNotNull(exceptionContext13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray46, orderDirection51, false);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection51, true, false);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale((double) 0L, doubleArray39);
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray59);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, 0);
        double[] doubleArray71 = new double[] {};
        double[] doubleArray78 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray78);
        double[] doubleArray84 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray71);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equals(doubleArray39, doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) 'a');
        int[] intArray15 = null;
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray15);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray23);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.scale(5100.0d, doubleArray23);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException29 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = nonMonotonicSequenceException29.getDirection();
        java.lang.Number number31 = nonMonotonicSequenceException29.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException29.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray25, orderDirection32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection30 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection30.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + (short) -1 + "'", number31, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) -1, (double) 10, (double) 10L, 3501.448701609104d, 3501.442702658434d, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35004.487016091036d + "'", double6 == 35004.487016091036d);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(6.45483024298582E8d, 1.771933898620068E12d, 7.662323436338385E15d, 131.0d, 1.4177447166653994d, (double) 'a');
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.1447570161086189E21d + "'", double6 == 1.1447570161086189E21d);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray36);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray36);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray21, doubleArray61);
        double[] doubleArray64 = new double[] {};
        double[] doubleArray71 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray64, doubleArray71);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray64);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray61, doubleArray75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 349.9714285714286, 99.1, 3600.999714285714, 3500.997142857143, 11.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(132550.70455631864d, 4.547240950625534E12d, (double) 32, 52.0d, (double) (byte) 10, 1000.0d, 10.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.027399917927703E17d + "'", double8 == 6.027399917927703E17d);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray3);
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathInternalError mathInternalError9 = new org.apache.commons.math3.exception.MathInternalError(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException10 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(16213.0d, (double) (byte) 100, 4.8113914083447153E18d, 5.704950338144193E21d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.7448749041980247E40d + "'", double4 == 2.7448749041980247E40d);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray39);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray57 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray57);
        double[] doubleArray63 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray63);
        double[] doubleArray69 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray70 = new double[] {};
        double[] doubleArray77 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray77);
        double[] doubleArray83 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray69, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray63, doubleArray85);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray63, 1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray88);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray88);
        java.lang.Class<?> wildcardClass91 = doubleArray88.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        java.lang.Class<?> wildcardClass8 = mathIllegalStateException7.getClass();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException3 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection4 = nonMonotonicSequenceException3.getDirection();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext5 = nonMonotonicSequenceException3.getContext();
        org.apache.commons.math3.exception.util.Localizable localizable6 = null;
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.util.Localizable localizable8 = null;
        org.apache.commons.math3.exception.util.Localizable localizable9 = null;
        long[] longArray10 = new long[] {};
        long[] longArray11 = new long[] {};
        long[][] longArray12 = new long[][] { longArray10, longArray11 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray12);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException14 = new org.apache.commons.math3.exception.NullArgumentException(localizable9, (java.lang.Object[]) longArray12);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException15 = new org.apache.commons.math3.exception.NullArgumentException(localizable8, (java.lang.Object[]) longArray12);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException16 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable7, (java.lang.Object[]) longArray12);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray12);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray12);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException19 = new org.apache.commons.math3.exception.NullArgumentException(localizable6, (java.lang.Object[]) longArray12);
        nonMonotonicSequenceException3.addSuppressed((java.lang.Throwable) nullArgumentException19);
        org.junit.Assert.assertTrue("'" + orderDirection4 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection4.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(exceptionContext5);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray5 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray10 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray15 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray20 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[][] longArray21 = new long[][] { longArray5, longArray10, longArray15, longArray20 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray21);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray21);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray21);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException25 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray21);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray21);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray21);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 1);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray80, 1.0d);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray80);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException10 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException11 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray11);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray11);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray35, 1);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray60);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException71 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = nonMonotonicSequenceException71.getDirection();
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray67, orderDirection72, false);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray60, orderDirection72, true, false);
        double[] doubleArray78 = new double[] {};
        double[] doubleArray85 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double86 = org.apache.commons.math3.util.MathArrays.distance(doubleArray78, doubleArray85);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray78);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = null;
        double[] doubleArray89 = new double[] {};
        double[][] doubleArray90 = new double[][] { doubleArray89 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray78, orderDirection88, doubleArray90);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray11, orderDirection72, doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection72, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray21);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray37, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray37);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray22, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.scale(7.662323436338385E15d, doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, 349.9714285714286, 99.1, 3600.999714285714, 3500.997142857143, 11.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[7.662323436338385E14, -2.189235267525253E12, 7.662323436338385E15, 7.662323436338385E15]");
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        java.lang.Class<?> wildcardClass11 = doubleArray0.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray3);
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        java.lang.Number number23 = nonMonotonicSequenceException21.getPrevious();
        int int24 = nonMonotonicSequenceException21.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException21.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray17, orderDirection25, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (short) -1 + "'", number23, (short) -1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = null;
        double[] doubleArray12 = new double[] {};
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray1, orderDirection11, doubleArray13);
        double[] doubleArray15 = null;
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.scale(1.771933898620068E12d, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(35924.35148398954d, 8477035.0d, 4.547240950625534E12d, 9700.0d, (double) 32, 180469.0d, 5.8507310306748435E7d, 1.771933898620068E12d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0371519499136968E20d + "'", double8 == 1.0371519499136968E20d);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.0d), 3.045319849820813E11d, (double) 10.0f, 1630.0d, 5.675795142957666E11d, (-1.0d), 180469.0d, (double) ' ');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-8.721057079698479E11d) + "'", double8 == (-8.721057079698479E11d));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray13 = new float[] { 10L, 10 };
        float[] floatArray14 = new float[] {};
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray13, floatArray14);
        float[] floatArray18 = new float[] { 10L, 10 };
        float[] floatArray19 = new float[] {};
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray19);
        float[] floatArray23 = new float[] { 10L, 10 };
        float[] floatArray24 = new float[] {};
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equals(floatArray23, floatArray24);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray24);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray18);
        float[] floatArray31 = new float[] { 10L, 10 };
        float[] floatArray32 = new float[] {};
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray32);
        float[] floatArray36 = new float[] { 10L, 10 };
        float[] floatArray37 = new float[] {};
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(floatArray36, floatArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray37);
        float[] floatArray40 = null;
        float[] floatArray43 = new float[] { 10L, 10 };
        float[] floatArray44 = new float[] {};
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray44);
        float[] floatArray48 = new float[] { 10L, 10 };
        float[] floatArray49 = new float[] {};
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equals(floatArray48, floatArray49);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(floatArray43, floatArray49);
        float[] floatArray54 = new float[] { 10L, 10 };
        float[] floatArray55 = new float[] {};
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray54, floatArray55);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray43, floatArray54);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray40, floatArray54);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray40);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray31);
        float[] floatArray63 = new float[] { 10L, 10 };
        float[] floatArray64 = new float[] {};
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(floatArray63, floatArray64);
        float[] floatArray68 = new float[] { 10L, 10 };
        float[] floatArray69 = new float[] {};
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(floatArray68, floatArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equals(floatArray63, floatArray69);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray31, floatArray69);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection3, false);
        java.lang.Number number6 = nonMonotonicSequenceException5.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = nonMonotonicSequenceException5.getDirection();
        java.lang.Number number8 = nonMonotonicSequenceException5.getPrevious();
        org.apache.commons.math3.exception.util.Localizable localizable9 = null;
        org.apache.commons.math3.exception.util.Localizable localizable10 = null;
        org.apache.commons.math3.exception.util.Localizable localizable11 = null;
        org.apache.commons.math3.exception.util.Localizable localizable12 = null;
        org.apache.commons.math3.exception.util.Localizable localizable13 = null;
        long[] longArray14 = new long[] {};
        long[] longArray15 = new long[] {};
        long[][] longArray16 = new long[][] { longArray14, longArray15 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray16);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray16);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray16);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable13, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray16);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException23 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable12, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException24 = new org.apache.commons.math3.exception.NullArgumentException(localizable11, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException25 = new org.apache.commons.math3.exception.MathArithmeticException(localizable10, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException26 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable9, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException5.getDirection();
        boolean boolean28 = nonMonotonicSequenceException5.getStrict();
        org.junit.Assert.assertEquals("'" + number6 + "' != '" + 10.0f + "'", number6, 10.0f);
        org.junit.Assert.assertNull(orderDirection7);
        org.junit.Assert.assertEquals("'" + number8 + "' != '" + 10.0f + "'", number8, 10.0f);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNull(orderDirection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = mathIllegalStateException8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException13 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathInternalError mathInternalError15 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext16 = mathInternalError15.getContext();
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(exceptionContext16);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray77);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5100.0d + "'", double79 == 5100.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException9 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray15);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray40);
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray39, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray0, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext9 = nullArgumentException8.getContext();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(exceptionContext9);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        java.lang.String[] strArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        double[] doubleArray25 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double26 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray25);
        double[] doubleArray31 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        double[] doubleArray45 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray31, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray25, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray25, 1);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray50);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException61 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = nonMonotonicSequenceException61.getDirection();
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray57, orderDirection62, false);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray50, orderDirection62, true, false);
        double[] doubleArray68 = new double[] {};
        double[] doubleArray75 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray75);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray68);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = null;
        double[] doubleArray79 = new double[] {};
        double[][] doubleArray80 = new double[][] { doubleArray79 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray68, orderDirection78, doubleArray80);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray1, orderDirection62, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray0, orderDirection62, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray23);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray12, doubleArray23);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray33, (int) 'a');
        double[] doubleArray36 = new double[] {};
        double[] doubleArray43 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray43);
        double[] doubleArray49 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray49);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException57 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection58 = nonMonotonicSequenceException57.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection58, false);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray49, orderDirection58, true);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray35, orderDirection58, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray1, orderDirection58, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection58 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection58.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) (byte) 1);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException72 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection73 = nonMonotonicSequenceException72.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException75 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection73, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection76 = nonMonotonicSequenceException75.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException78 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) 1630.0d, (int) 'a', orderDirection76, true);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray62, orderDirection76, true);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection73.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection76 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection76.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 1, (double) (-1), 568773.0d, (double) (byte) -1, 101.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-568774.0d) + "'", double6 == (-568774.0d));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = null;
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray44);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray55);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray55);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray44);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray68);
        double[] doubleArray72 = new double[] {};
        double[] doubleArray79 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray79);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray72);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray72);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray3, 2.0064935685221478E15d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (2,007,725,301,836,157.5 >= -1,231,733,314,009.913)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 2.0077253018361575E15, -1.2317333140099126E12]");
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection42, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double double11 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray27);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray53 = new double[] {};
        double[] doubleArray60 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray60);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray53);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray42, doubleArray53);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.scale((double) (short) -1, doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double double65 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray14, doubleArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = null;
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray44);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray55);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray55);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray44);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray68);
        double[] doubleArray72 = new double[] {};
        double[] doubleArray79 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray79);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray72);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray72);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray3, 10.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.006138735420503, -0.006138735420503376]");
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        double[] doubleArray6 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        double[] doubleArray20 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray6, doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray20, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray20);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(350101.0d, doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[3.50101E7, 1.2253535E9, 350101.0, 3501010.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 20.0d + "'", double60 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray38);
        java.lang.Number number40 = null;
        java.lang.Number number41 = null;
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray51, orderDirection56, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection56, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException62 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number40, number41, 0, orderDirection56, true);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection56, false, false);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 113.16359838746733d);
        double[] doubleArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray38, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[113.16359838746733]");
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray54);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray54);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray54);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray73 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray73);
        double double75 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray66);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray66);
        double[] doubleArray77 = new double[] {};
        double[] doubleArray84 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray77, doubleArray84);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray66, doubleArray77);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray66, 9701.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray28);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray1);
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray1, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray2);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale((double) 10, doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }
}

