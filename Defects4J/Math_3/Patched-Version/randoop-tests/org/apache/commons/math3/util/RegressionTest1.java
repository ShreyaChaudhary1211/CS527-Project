package org.apache.commons.math3.util;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, (int) 'a');
        double[] doubleArray32 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray33 = new double[] {};
        double[] doubleArray40 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray40);
        double[] doubleArray46 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray32, doubleArray46);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = nonMonotonicSequenceException52.getDirection();
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray46, orderDirection53, false, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 52.0d, 1, orderDirection53, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray22, orderDirection53, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray27);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray27);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray27, (int) (short) 10);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray42);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray27, doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        double[] doubleArray4 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray24 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray24, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray4, doubleArray40);
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray4, doubleArray43);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray4, (double) 1.0f);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray47);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray57 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray57);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray50);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray50);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, 1);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, 1.0d);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray79);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray79);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79, (int) '#');
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79, 10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3.6980755448772024E16d, 7002072.0d, (double) (short) 10, 9701.0d, 568773.0d, 0.0d, 568773.0d, 1.4570223113113662E20d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 8.313043701941666E25d + "'", double8 == 8.313043701941666E25d);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray28 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        double[] doubleArray42 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray28, doubleArray42);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray64 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray65 = new double[] {};
        double[] doubleArray72 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray72);
        double[] doubleArray78 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray64, doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray58, doubleArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray42, doubleArray80);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray42);
        double double84 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray1, doubleArray42);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException91 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext92 = nonMonotonicSequenceException91.getContext();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection93 = nonMonotonicSequenceException91.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException95 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 3501.442702658434d, (java.lang.Number) 1.771933898620068E12d, (int) (byte) 100, orderDirection93, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray1, orderDirection93, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 20.0d + "'", double82 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(exceptionContext92);
        org.junit.Assert.assertTrue("'" + orderDirection93 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection93.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double double12 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 0);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray16);
        double double29 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray2, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 52, doubleArray28);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray33, doubleArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        int[] intArray3 = new int[] { 0, (byte) 10, 10 };
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) '4');
        int[] intArray8 = new int[] { 1, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            int int9 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, -1]");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        float[] floatArray12 = new float[] { 10L, 10 };
        float[] floatArray13 = new float[] {};
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray12, floatArray13);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray13);
        float[] floatArray16 = null;
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        float[] floatArray24 = new float[] { 10L, 10 };
        float[] floatArray25 = new float[] {};
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray25);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray25);
        float[] floatArray30 = new float[] { 10L, 10 };
        float[] floatArray31 = new float[] {};
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray30);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray30);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray16);
        float[] floatArray36 = null;
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray36);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray7);
        float[] floatArray44 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray51 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray44, floatArray51);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray51);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = nonMonotonicSequenceException32.getDirection();
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray28, orderDirection33, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection33, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.4570223113113662E20d, 5.576007650658434E9d, (double) 52, 1630.0003067484374d, 8730.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 8.124367555052212E29d + "'", double6 == 8.124367555052212E29d);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(43127.36401612533d, 0.0d, 3.014877405643864E7d, (double) (byte) 1, (double) '#', 3.501122702658434E7d, 0.0d, (double) 100.0f);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.2555417199868906E9d + "'", double8 == 1.2555417199868906E9d);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1.0d, (double) (-1), (double) 100.0f, (double) (short) 0, 3502.15662128352d, 1122.6359838746732d, 4425.0d, 35004.487016091036d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.5882650109042066E8d + "'", double8 == 1.5882650109042066E8d);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        double[] doubleArray0 = null;
        double[] doubleArray6 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        double[] doubleArray20 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray6, doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray20, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray20);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 35);
        java.lang.Number number65 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException73 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = nonMonotonicSequenceException73.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException76 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (-1L), (java.lang.Number) 350101.0d, (int) ' ', orderDirection74, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException78 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 43127.36401612533d, number65, (int) 'a', orderDirection74, false);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray63, orderDirection74, true);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 20.0d + "'", double60 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(43127.36401612533d, 0.0d, 7.967700554480906E15d, 8567.364016125326d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 6.826219102172153E19d + "'", double4 == 6.826219102172153E19d);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, 35);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        int[] intArray16 = new int[] {};
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 10);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray13, intArray16);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) ' ');
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        int[] intArray25 = new int[] {};
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (byte) 10);
        double double28 = org.apache.commons.math3.util.MathArrays.distance(intArray22, intArray27);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 0);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (byte) 0);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray34);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, 0);
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray13, intArray34);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (short) 100);
        int[] intArray43 = new int[] {};
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 10);
        int[] intArray46 = new int[] {};
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (byte) 10);
        double double49 = org.apache.commons.math3.util.MathArrays.distance(intArray43, intArray48);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 0);
        int[] intArray53 = new int[] {};
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (byte) 10);
        int[] intArray56 = new int[] {};
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (byte) 10);
        double double59 = org.apache.commons.math3.util.MathArrays.distance(intArray53, intArray58);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 0);
        int int63 = org.apache.commons.math3.util.MathArrays.distance1(intArray43, intArray53);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, 1);
        int int66 = org.apache.commons.math3.util.MathArrays.distance1(intArray13, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException3 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        double[] doubleArray5 = null;
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray7);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray25 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double26 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray25);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray18);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray7, doubleArray18);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray5, doubleArray7);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray7, 0);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray40 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray40);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray33);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = null;
        double[] doubleArray44 = new double[] {};
        double[][] doubleArray45 = new double[][] { doubleArray44 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray33, orderDirection43, doubleArray45);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray32, doubleArray45);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException48 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException3, localizable4, (java.lang.Object[]) doubleArray45);
        org.apache.commons.math3.exception.util.Localizable localizable49 = null;
        org.apache.commons.math3.exception.util.Localizable localizable50 = null;
        org.apache.commons.math3.exception.util.Localizable localizable51 = null;
        org.apache.commons.math3.exception.util.Localizable localizable52 = null;
        org.apache.commons.math3.exception.util.Localizable localizable53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { 100.0d, (-1), (byte) -1, (byte) -1, 100.0d, 1.0f };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException61 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable53, objArray60);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException62 = new org.apache.commons.math3.exception.NullArgumentException(localizable52, objArray60);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext63 = nullArgumentException62.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext64 = nullArgumentException62.getContext();
        java.lang.Object[] objArray65 = new java.lang.Object[] { exceptionContext64 };
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException66 = new org.apache.commons.math3.exception.MathArithmeticException(localizable51, objArray65);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException67 = new org.apache.commons.math3.exception.MathArithmeticException(localizable50, objArray65);
        java.lang.Throwable[] throwableArray68 = mathArithmeticException67.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException69 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException3, localizable49, (java.lang.Object[]) throwableArray68);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(exceptionContext63);
        org.junit.Assert.assertNotNull(exceptionContext64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray1);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray32 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray33 = new double[] {};
        double[] doubleArray40 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray40);
        double[] doubleArray46 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray32, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray26, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26, 1);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(doubleArray12, doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray30 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray30, doubleArray44);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 1);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = nonMonotonicSequenceException60.getDirection();
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray56, orderDirection61, false);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray49, orderDirection61, true, false);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray74 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray74);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray67);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = null;
        double[] doubleArray78 = new double[] {};
        double[][] doubleArray79 = new double[][] { doubleArray78 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray67, orderDirection77, doubleArray79);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection61, doubleArray79);
        double[] doubleArray82 = new double[] {};
        double[] doubleArray89 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray82, doubleArray89);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray82);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection92 = null;
        double[] doubleArray93 = new double[] {};
        double[][] doubleArray94 = new double[][] { doubleArray93 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray82, orderDirection92, doubleArray94);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray38);
        java.lang.Number number40 = null;
        java.lang.Number number41 = null;
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray51, orderDirection56, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection56, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException62 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number40, number41, 0, orderDirection56, true);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection56, false, false);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray38, 113.16359838746733d);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[113.16359838746733]");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(3501.448701609104d, 5.675795142957666E11d, (-568774.0d), 0.0d, 3.3959797E9d, 6654464.168026618d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.458577578238662E16d + "'", double6 == 2.458577578238662E16d);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException6 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(3.502752702658434E7d, 2073255.0d, 1630.0003067484374d, 2.0064935685221478E15d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.2706577531754132E18d + "'", double4 == 3.2706577531754132E18d);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.scale((double) (short) -1, doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray27);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray45 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray38);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray38);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double double50 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray24, doubleArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray7, (double) 1.0f);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7, orderDirection12, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 113.16359838746733d + "'", double9 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-0.006172839506172839, 0.006172839506172839, 0.32098765432098764, 0.06172839506172839, 0.6172839506172839, 0.0]");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection40, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[5200.0, 182000.0, 52.0, 520.0]");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray5 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray10 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray15 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray20 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[][] longArray21 = new long[][] { longArray5, longArray10, longArray15, longArray20 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray21);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException23 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray21);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext24 = mathArithmeticException23.getContext();
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(exceptionContext24);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray7, (double) 1.0f);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        double double21 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray12);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray7, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 113.16359838746733d + "'", double9 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-0.006172839506172839, 0.006172839506172839, 0.32098765432098764, 0.06172839506172839, 0.6172839506172839, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) 'a');
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, 100);
        int[] intArray17 = new int[] {};
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) 10);
        int[] intArray20 = new int[] {};
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, (int) (byte) 10);
        int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray17, intArray20);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray29);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 0);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (byte) 0);
        int[] intArray36 = new int[] {};
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 10);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray36);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, 0);
        int int42 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray36);
        int[] intArray43 = null;
        int int44 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray43);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray16, intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray3 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, (int) (byte) 10);
        int[] intArray4 = new int[] {};
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) (byte) 10);
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray4);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, (int) ' ');
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 0);
        int[] intArray20 = new int[] {};
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, (int) (byte) 10);
        int[] intArray23 = new int[] {};
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (byte) 10);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray25);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, (int) (short) 0);
        int int30 = org.apache.commons.math3.util.MathArrays.distance1(intArray10, intArray20);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, 1);
        double double33 = org.apache.commons.math3.util.MathArrays.distance(intArray1, intArray20);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 1L, doubleArray13);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray45 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray45);
        double[] doubleArray51 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray51);
        double[] doubleArray57 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray58 = new double[] {};
        double[] doubleArray65 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray58, doubleArray65);
        double[] doubleArray71 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray58, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray57, doubleArray71);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray51, doubleArray73);
        double double75 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray35, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray35);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException80 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection81 = nonMonotonicSequenceException80.getDirection();
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray35, orderDirection81, true, false);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.scale(4425.0d, doubleArray35);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray13, doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 20.0d + "'", double75 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection81 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection81.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[442500.0, 1.54875E7, 4425.0, 44250.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable0, localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.util.Localizable localizable8 = null;
        org.apache.commons.math3.exception.util.Localizable localizable9 = null;
        org.apache.commons.math3.exception.util.Localizable localizable10 = null;
        long[] longArray11 = new long[] {};
        long[] longArray12 = new long[] {};
        long[][] longArray13 = new long[][] { longArray11, longArray12 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray13);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException15 = new org.apache.commons.math3.exception.NullArgumentException(localizable10, (java.lang.Object[]) longArray13);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException16 = new org.apache.commons.math3.exception.NullArgumentException(localizable9, (java.lang.Object[]) longArray13);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray13);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable0, localizable8, (java.lang.Object[]) longArray13);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(longArray13);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray3, (double) 1.0f);
        double[] doubleArray47 = null;
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray46, doubleArray47);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray57 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray50);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray50, 0);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray50, doubleArray62);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray50, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray46, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray54);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray54);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray54);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray73 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray73);
        double double75 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray66);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray66);
        double[] doubleArray77 = new double[] {};
        double[] doubleArray84 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray77, doubleArray84);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray66, doubleArray77);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray66, 700.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2073255.0d, (double) 35, 7222.0d, 1.0d, 2073255.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 7.2571147E7d + "'", double6 == 7.2571147E7d);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        double[] doubleArray0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        java.lang.Number number6 = nonMonotonicSequenceException4.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext8 = nonMonotonicSequenceException4.getContext();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection9 = nonMonotonicSequenceException4.getDirection();
        org.apache.commons.math3.exception.util.Localizable localizable10 = null;
        double[] doubleArray11 = null;
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray24);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray24);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray11, doubleArray13);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 0);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = null;
        double[] doubleArray50 = new double[] {};
        double[][] doubleArray51 = new double[][] { doubleArray50 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray39, orderDirection49, doubleArray51);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray38, doubleArray51);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException54 = new org.apache.commons.math3.exception.NullArgumentException(localizable10, (java.lang.Object[]) doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection9, doubleArray51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number6 + "' != '" + (short) -1 + "'", number6, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(exceptionContext8);
        org.junit.Assert.assertTrue("'" + orderDirection9 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection9.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        float[] floatArray12 = new float[] { 10L, 10 };
        float[] floatArray13 = new float[] {};
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray12, floatArray13);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray13);
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        float[] floatArray24 = new float[] { 10L, 10 };
        float[] floatArray25 = new float[] {};
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray25);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray25);
        float[] floatArray30 = new float[] { 10L, 10 };
        float[] floatArray31 = new float[] {};
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray30);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray19);
        float[] floatArray38 = new float[] { (byte) 0, 'a', 0L };
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray38);
        java.lang.Class<?> wildcardClass40 = floatArray38.getClass();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 97.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray4 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 35);
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(8477035.0d, 5.8507310306748435E7d, (double) 10L, 3501.448701609104d, 13500.0d, (double) 1.0f, 1.1447570161086189E21d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 4.959685172746817E14d + "'", double8 == 4.959685172746817E14d);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        int[] intArray0 = null;
        int[] intArray1 = new int[] {};
        int[] intArray3 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, (int) (byte) 10);
        int[] intArray4 = new int[] {};
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) (byte) 10);
        int int7 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray1, intArray4);
        int[] intArray12 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(intArray1, intArray12);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, 52);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double double11 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray27);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        long[] longArray1 = new long[] { 52 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray1);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[52]");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException22 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = nonMonotonicSequenceException22.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection23, false);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection23, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection23, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double double11 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray1, 2.0064935685221478E15d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray3, (double) 1.0f);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (-1L), (java.lang.Number) 4.547240950625534E12d, (int) '4', orderDirection50, false);
        double[][] doubleArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray3, orderDirection50, doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) 'a');
        int[] intArray15 = null;
        int int16 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray15);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 1.0d);
        double[] doubleArray46 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray47 = new double[] {};
        double[] doubleArray54 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray54);
        double[] doubleArray60 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray46, doubleArray60);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray41, doubleArray60);
        double[] doubleArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray60, doubleArray64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray5 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray10 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray15 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray20 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[][] longArray21 = new long[][] { longArray5, longArray10, longArray15, longArray20 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray21);
        org.apache.commons.math3.exception.MathInternalError mathInternalError23 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) longArray21);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext24 = mathInternalError23.getContext();
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(exceptionContext24);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray23);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) (short) 1, 0);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray23, orderDirection31, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray3);
        double[] doubleArray19 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray39 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray39, doubleArray53);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray33, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray19, doubleArray55);
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(doubleArray19, doubleArray58);
        double double61 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray19);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(10.0d, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (16,300 >= -10)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 16300.0, -10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1630.0003067484374d + "'", double61 == 1630.0003067484374d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        double[] doubleArray16 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray16);
        double[] doubleArray22 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray22, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray16, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41, orderDirection42, true, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 35924.35148398954d, (java.lang.Number) 35924.35148398954d, (int) (byte) 10, orderDirection42, false);
        int int48 = nonMonotonicSequenceException47.getIndex();
        java.lang.Number number49 = nonMonotonicSequenceException47.getPrevious();
        java.lang.Number number50 = nonMonotonicSequenceException47.getPrevious();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertEquals("'" + number49 + "' != '" + 35924.35148398954d + "'", number49, 35924.35148398954d);
        org.junit.Assert.assertEquals("'" + number50 + "' != '" + 35924.35148398954d + "'", number50, 35924.35148398954d);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, 1630.0003067484374d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray40 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray40, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray34, doubleArray56);
        double double58 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray18, doubleArray56);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException62 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext63 = nonMonotonicSequenceException62.getContext();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection64 = nonMonotonicSequenceException62.getDirection();
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection64, false, false);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 20.0d + "'", double58 == 20.0d);
        org.junit.Assert.assertNotNull(exceptionContext63);
        org.junit.Assert.assertTrue("'" + orderDirection64 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection64.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(4425.0d, 52.0d, 3200.0d, 113.16359838746733d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 592223.5148398954d + "'", double4 == 592223.5148398954d);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 0);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray21);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, 0);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray21);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 100);
        int[] intArray30 = new int[] {};
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (byte) 10);
        int[] intArray33 = new int[] {};
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (byte) 10);
        double double36 = org.apache.commons.math3.util.MathArrays.distance(intArray30, intArray35);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (short) 0);
        int[] intArray40 = new int[] {};
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (byte) 10);
        int[] intArray43 = new int[] {};
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 10);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray40, intArray45);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (short) 0);
        int int50 = org.apache.commons.math3.util.MathArrays.distance1(intArray30, intArray40);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, 1);
        int int53 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray40);
        int[] intArray54 = new int[] {};
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (byte) 10);
        int[] intArray57 = new int[] {};
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (byte) 10);
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray54, intArray57);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) ' ');
        int[] intArray63 = new int[] {};
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (byte) 10);
        int[] intArray66 = new int[] {};
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (byte) 10);
        double double69 = org.apache.commons.math3.util.MathArrays.distance(intArray63, intArray68);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 0);
        int[] intArray73 = new int[] {};
        int[] intArray75 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (byte) 10);
        int[] intArray76 = new int[] {};
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (byte) 10);
        double double79 = org.apache.commons.math3.util.MathArrays.distance(intArray73, intArray78);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73);
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (short) 0);
        int int83 = org.apache.commons.math3.util.MathArrays.distance1(intArray63, intArray73);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, 1);
        double double86 = org.apache.commons.math3.util.MathArrays.distance(intArray54, intArray73);
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray73, (int) (byte) 1);
        double double89 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray73);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) '#');
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3.3959797E9d, 4.959685172746817E14d, (double) '4', 43127.36401612533d, 3502020.0d, 32000.0d, (-8.721057079698479E11d), (-8.721057079698479E11d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.44486738237762E24d + "'", double8 == 2.44486738237762E24d);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, (int) (short) 100);
        java.lang.String[] strArray44 = new java.lang.String[] { "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 34 and 35 are not strictly increasing (-1 >= 0)", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection45 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray44, orderDirection45, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException51 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int52 = nonMonotonicSequenceException51.getIndex();
        java.lang.Number number53 = nonMonotonicSequenceException51.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = nonMonotonicSequenceException51.getDirection();
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray44, orderDirection54, false);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray64 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray57, doubleArray64);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray57);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection67 = null;
        double[] doubleArray68 = new double[] {};
        double[][] doubleArray69 = new double[][] { doubleArray68 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray57, orderDirection67, doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray39, orderDirection54, doubleArray69);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 1");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + orderDirection45 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection45.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + (short) -1 + "'", number53, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection54 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection54.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray3);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray19);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, 0);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray19);
        double double32 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray31);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        long[] longArray3 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray7 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray11 = new long[] { 1L, '#', (byte) -1 };
        long[][] longArray12 = new long[][] { longArray3, longArray7, longArray11 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray12);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        double[] doubleArray0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection15, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException18 = new org.apache.commons.math3.exception.NullArgumentException(localizable4, (java.lang.Object[]) strArray10);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException28 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = nonMonotonicSequenceException28.getDirection();
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray24, orderDirection29, false);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection29, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 131.0d, (java.lang.Number) (-1040.0d), (int) ' ', orderDirection29, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection29, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        double[] doubleArray0 = null;
        java.lang.String[] strArray3 = new java.lang.String[] { "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 34 and 35 are not strictly increasing (-1 >= 0)", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection4 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean6 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection4, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int11 = nonMonotonicSequenceException10.getIndex();
        java.lang.Number number12 = nonMonotonicSequenceException10.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = nonMonotonicSequenceException10.getDirection();
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection13, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + orderDirection4 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection4.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertEquals("'" + number12 + "' != '" + (short) -1 + "'", number12, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.MathInternalError mathInternalError8 = new org.apache.commons.math3.exception.MathInternalError(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException10 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray32 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray33 = new double[] {};
        double[] doubleArray40 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray40);
        double[] doubleArray46 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray46);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray32, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray26, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray26, 1);
        double[] doubleArray53 = new double[] {};
        double[] doubleArray60 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray60);
        double[] doubleArray66 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray66);
        double[] doubleArray72 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray73 = new double[] {};
        double[] doubleArray80 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray80);
        double[] doubleArray86 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray72, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray66, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray66);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray1, doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 0);
        int int20 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray10);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, 1);
        int[] intArray23 = new int[] {};
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (byte) 10);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = org.apache.commons.math3.util.MathArrays.distance(intArray22, intArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.lang.String[] strArray0 = null;
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray44 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray44, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray38, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection64 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray63, orderDirection64, true, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException69 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1630.0003067484374d, (java.lang.Number) 3.014877405643864E7d, 0, orderDirection64, true);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray21, orderDirection64, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray0, orderDirection64, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection64 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection64.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        long[] longArray2 = new long[] { 10L, (short) 1 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[10, 1]");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection47 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray42, orderDirection47, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0]");
        org.junit.Assert.assertTrue("'" + orderDirection47 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection47.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        int[] intArray1 = new int[] { (byte) 1 };
        int[] intArray3 = org.apache.commons.math3.util.MathArrays.copyOf(intArray1, 100);
        int[] intArray4 = new int[] {};
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = org.apache.commons.math3.util.MathArrays.distance(intArray3, intArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[1]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.lang.Number number3 = null;
        java.lang.Number number4 = null;
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException18 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = nonMonotonicSequenceException18.getDirection();
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray14, orderDirection19, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException23 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection19, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number3, number4, 0, orderDirection19, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 6654464.168026618d, (java.lang.Number) 1.0371519499136968E20d, (int) '4', orderDirection19, true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + orderDirection19 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection19.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale(3.6980755448772024E16d, doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[3.7017736204220795E18, 1.2943263350477195E20, 7.3961510897544048E16, 4.0678830993649229E17]");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException9 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection10 = nonMonotonicSequenceException9.getDirection();
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray5, orderDirection10, false);
        java.lang.Number number14 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException22 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = nonMonotonicSequenceException22.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (-1L), (java.lang.Number) 350101.0d, (int) ' ', orderDirection23, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 43127.36401612533d, number14, (int) 'a', orderDirection23, false);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray5, orderDirection23, true);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double double10 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(8730.0d, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray14);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray14);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 35, doubleArray14);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(doubleArray12, doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 113.16359838746733d + "'", double10 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray10 = null;
        int int11 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray10);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) '4');
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int[] intArray6 = new int[] {};
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (byte) 10);
        int int9 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray3, intArray6);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 0);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 0);
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        int int25 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray22);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, 0);
        int int28 = org.apache.commons.math3.util.MathArrays.distance1(intArray6, intArray22);
        int[] intArray29 = new int[] {};
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 10);
        int[] intArray32 = new int[] {};
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (byte) 10);
        double double35 = org.apache.commons.math3.util.MathArrays.distance(intArray29, intArray34);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34);
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray6, intArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = org.apache.commons.math3.util.MathArrays.distance(intArray2, intArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException6 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathInternalError mathInternalError7 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.math3.exception.util.Localizable localizable6 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray37 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31, orderDirection36 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException41 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = nonMonotonicSequenceException41.getDirection();
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray37, orderDirection42, false);
        org.apache.commons.math3.exception.MathInternalError mathInternalError45 = new org.apache.commons.math3.exception.MathInternalError(localizable6, (java.lang.Object[]) orderDirectionArray37);
        java.lang.Number number46 = null;
        java.lang.Number number47 = null;
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException61 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = nonMonotonicSequenceException61.getDirection();
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray57, orderDirection62, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException66 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection62, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException68 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number46, number47, 0, orderDirection62, true);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray37, orderDirection62, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException72 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1L, (java.lang.Number) 32, 0, orderDirection62, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException74 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 7002072.0d, (java.lang.Number) 7002072.0d, (int) (short) -1, orderDirection62, false);
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray37);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray30 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray30, doubleArray44);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 1);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = nonMonotonicSequenceException60.getDirection();
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray56, orderDirection61, false);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray49, orderDirection61, true, false);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray74 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray74);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray67);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = null;
        double[] doubleArray78 = new double[] {};
        double[][] doubleArray79 = new double[][] { doubleArray78 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray67, orderDirection77, doubleArray79);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection61, doubleArray79);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException85 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection86 = nonMonotonicSequenceException85.getDirection();
        java.lang.Number number87 = nonMonotonicSequenceException85.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = nonMonotonicSequenceException85.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection88, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + orderDirection86 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection86.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number87 + "' != '" + (short) -1 + "'", number87, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) 100, 8730.0d, 14800.0d, (double) (-1.0f), 6.826219102172153E19d, (double) (-1.0f), (double) (short) -1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-6.826219102159232E19d) + "'", double8 == (-6.826219102159232E19d));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray24 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray24, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray4, doubleArray40);
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray4, doubleArray43);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray43, 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray0, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0]");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.scale((double) (short) -1, doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray27);
        double[] doubleArray38 = new double[] {};
        double[] doubleArray45 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray38, doubleArray45);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray38);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray27, doubleArray38);
        double double49 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray48);
        double double51 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray23, doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray8 = new int[] { (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            int int9 = org.apache.commons.math3.util.MathArrays.distance1(intArray5, intArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10]");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray28);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException6 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = nonMonotonicSequenceException6.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray33 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection7, orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection38, false);
        org.apache.commons.math3.exception.MathInternalError mathInternalError41 = new org.apache.commons.math3.exception.MathInternalError(localizable2, (java.lang.Object[]) orderDirectionArray33);
        java.lang.Number number42 = null;
        java.lang.Number number43 = null;
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException57 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection58 = nonMonotonicSequenceException57.getDirection();
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray53, orderDirection58, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException62 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection58, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException64 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number42, number43, 0, orderDirection58, true);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection58, false);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException67 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) orderDirectionArray33);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException68 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray33);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray33);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + orderDirection58 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection58.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) 10);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        double double13 = org.apache.commons.math3.util.MathArrays.distance(intArray7, intArray12);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (short) 0);
        int int17 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray16);
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10L, 5.576007650658434E9d, 5.675795142957666E11d, 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 6.23339590802351E11d + "'", double4 == 6.23339590802351E11d);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 0L, 1.4570223113113662E20d, 592223.5148398954d, 2.7448749041980247E40d, 132550.70455631864d, 113.16359838746733d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.6255794635599754E46d + "'", double6 == 1.6255794635599754E46d);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) '4');
        int[] intArray3 = org.apache.commons.math3.util.MathArrays.copyOf(intArray2);
        int[] intArray4 = new int[] {};
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) (byte) 10);
        int[] intArray7 = new int[] {};
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) 10);
        int int10 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray4, intArray7);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) ' ');
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        int[] intArray16 = new int[] {};
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 10);
        double double19 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray18);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (short) 0);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 0);
        int[] intArray25 = new int[] {};
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (byte) 10);
        int int28 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray22, intArray25);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, 0);
        int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray4, intArray25);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) (short) 100);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        int[] intArray37 = new int[] {};
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (byte) 10);
        double double40 = org.apache.commons.math3.util.MathArrays.distance(intArray34, intArray39);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 0);
        int[] intArray44 = new int[] {};
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (byte) 10);
        int[] intArray47 = new int[] {};
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (byte) 10);
        double double50 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray49);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44);
        int[] intArray53 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 0);
        int int54 = org.apache.commons.math3.util.MathArrays.distance1(intArray34, intArray44);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, 1);
        int int57 = org.apache.commons.math3.util.MathArrays.distance1(intArray4, intArray44);
        int[] intArray58 = new int[] {};
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (byte) 10);
        int[] intArray61 = new int[] {};
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, (int) (byte) 10);
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray61);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) ' ');
        int[] intArray67 = new int[] {};
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray67, (int) (byte) 10);
        int[] intArray70 = new int[] {};
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) (byte) 10);
        double double73 = org.apache.commons.math3.util.MathArrays.distance(intArray67, intArray72);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray67);
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray67, (int) (short) 0);
        int[] intArray77 = new int[] {};
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) (byte) 10);
        int[] intArray80 = new int[] {};
        int[] intArray82 = org.apache.commons.math3.util.MathArrays.copyOf(intArray80, (int) (byte) 10);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(intArray77, intArray82);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) (short) 0);
        int int87 = org.apache.commons.math3.util.MathArrays.distance1(intArray67, intArray77);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, 1);
        double double90 = org.apache.commons.math3.util.MathArrays.distance(intArray58, intArray77);
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) (byte) 1);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(intArray4, intArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = org.apache.commons.math3.util.MathArrays.distance(intArray3, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 0);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray21);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, 0);
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray21);
        int[] intArray28 = null;
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray28);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        double[] doubleArray6 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        double[] doubleArray20 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray6, doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray20, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray20);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale(6654464.168026618d, doubleArray20);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 20.0d + "'", double60 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[6.654464168026618E8, 2.3290624588093163E10, 6654464.168026618, 6.654464168026618E7]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0]");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (182,000 >= 52)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[5200.0, 182000.0, 52.0, 520.0]");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray37 = new double[] {};
        double[] doubleArray44 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray44);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray44);
        double[] doubleArray53 = new double[] { (short) 100, 8730.0d, 1630.0d, (-1.0d), 3500.0d };
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray44, doubleArray53);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 6 != 5");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 113.16359838746733d + "'", double46 == 113.16359838746733d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 8730.0, 1630.0, -1.0, 3500.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray12);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, 0);
        int[] intArray18 = new int[] {};
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 10);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray21);
        int[] intArray29 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray29);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) 'a');
        double double33 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray18);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray1, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        float[] floatArray12 = new float[] { 10L, 10 };
        float[] floatArray13 = new float[] {};
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray12, floatArray13);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray13);
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        float[] floatArray24 = new float[] { 10L, 10 };
        float[] floatArray25 = new float[] {};
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray25);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray25);
        float[] floatArray30 = new float[] { 10L, 10 };
        float[] floatArray31 = new float[] {};
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray30);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray19);
        float[] floatArray38 = new float[] { (byte) 0, 'a', 0L };
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray38);
        float[] floatArray45 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray52 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray45, floatArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray52);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 97.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        double[] doubleArray0 = null;
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19, orderDirection26, false, false);
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        double[] doubleArray43 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray43);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException51 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection52 = nonMonotonicSequenceException51.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException54 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection52, false);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray43, orderDirection52, true);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray19, orderDirection52, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection52 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection52.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray4 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray8 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray12 = new long[] { 1L, '#', (byte) -1 };
        long[][] longArray13 = new long[][] { longArray4, longArray8, longArray12 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray13);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray13);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray13);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray13);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray13);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray13);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3502.15662128352d, 2.0064935685221478E15d, 10978.208141586678d, 5100.0d, 0.0d, 0.0d, 3.3959797E9d, 2.7448749041980247E40d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.321539453695937E49d + "'", double8 == 9.321539453695937E49d);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((-8477003.0d), doubleArray2);
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double double10 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(8730.0d, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8);
        double[] doubleArray16 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray17 = new double[] {};
        double[] doubleArray24 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray17, doubleArray24);
        double[] doubleArray30 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray17, doubleArray30);
        double[] doubleArray36 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray37 = new double[] {};
        double[] doubleArray44 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray44);
        double[] doubleArray50 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray36, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray30, doubleArray52);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray16, doubleArray52);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray63 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray56);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray74 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray74);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray67);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray56, doubleArray67);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray16, doubleArray67);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray67);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67, 0);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(doubleArray8, doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 113.16359838746733d + "'", double10 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(131.0d, 2073255.0d, 3501.448701609104d, 3501.448701609104d, 5100.0d, (double) 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.8385654801000005E8d + "'", double6 == 2.8385654801000005E8d);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray3);
        double double16 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray15);
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray15);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray21);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray21);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.scale(14800.0d, doubleArray31);
        double double33 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray17, doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.apache.commons.math3.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math3.exception.NotPositiveException((java.lang.Number) 3.502752702658434E7d);
        java.lang.Throwable[] throwableArray2 = notPositiveException1.getSuppressed();
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        long[] longArray5 = new long[] {};
        long[] longArray6 = new long[] {};
        long[][] longArray7 = new long[][] { longArray5, longArray6 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray7);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable4, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException13 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) notPositiveException1, localizable3, (java.lang.Object[]) longArray7);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, (-1.009254E7d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1040.0d, 97.0d, 100.0d, 2.8385654801000005E8d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.8385755681000004E10d + "'", double4 == 2.8385755681000004E10d);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double double11 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray36);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray36);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray21, doubleArray61);
        java.lang.String[] strArray66 = new java.lang.String[] { "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 34 and 35 are not strictly increasing (-1 >= 0)", "org.apache.commons.math3.exception.NonMonotonicSequenceException: points -2 and -1 are not strictly increasing (10 >= 10)", "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 96 and 97 are not strictly increasing (1,630 >= 0)" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException70 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext71 = nonMonotonicSequenceException70.getContext();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = nonMonotonicSequenceException70.getDirection();
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray66, orderDirection72, true);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray21, orderDirection72, true);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 349.9714285714286, 99.1, 3600.999714285714, 3500.997142857143, 11.0, 10.0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(exceptionContext71);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext9 = mathIllegalStateException8.getContext();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(exceptionContext9);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray3, (double) 1.0f);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray46, 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray19 = new int[] {};
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 10);
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        double double25 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray24);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (short) 0);
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray9, intArray19);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, 1);
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray19);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        int[] intArray37 = new int[] {};
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (byte) 10);
        double double40 = org.apache.commons.math3.util.MathArrays.distance(intArray34, intArray39);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 0);
        int[] intArray44 = new int[] {};
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (byte) 10);
        int[] intArray47 = new int[] {};
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (byte) 10);
        double double50 = org.apache.commons.math3.util.MathArrays.distance(intArray44, intArray49);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44);
        int[] intArray53 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (short) 0);
        int int54 = org.apache.commons.math3.util.MathArrays.distance1(intArray34, intArray44);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, 1);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44);
        int[] intArray58 = new int[] {};
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (byte) 10);
        int[] intArray61 = new int[] {};
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, (int) (byte) 10);
        int int64 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray58, intArray61);
        int[] intArray69 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(intArray58, intArray69);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) 'a');
        int int73 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray72);
        int int74 = org.apache.commons.math3.util.MathArrays.distance1(intArray33, intArray57);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        java.lang.Number number41 = null;
        java.lang.Number number42 = null;
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException56 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = nonMonotonicSequenceException56.getDirection();
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray52, orderDirection57, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException61 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection57, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number41, number42, 0, orderDirection57, true);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection57, false, false);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 113.16359838746733d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection57.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[113.16359838746733]");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext9 = mathIllegalStateException8.getContext();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(exceptionContext9);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double double12 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 0);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray16);
        double double29 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray2, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 52, doubleArray28);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray35);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray35, 0);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray55 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray55);
        double[] doubleArray61 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray61);
        double[] doubleArray67 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray68 = new double[] {};
        double[] doubleArray75 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray75);
        double[] doubleArray81 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray67, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray61, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray61);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray85, 4.547240950625534E12d);
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray85);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray85, 10.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.2592747024717624E11, 4.407461458651168E12, 1.2592747024717624E9, 1.2592747024717627E10]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.27693159789531985, 9.692605926336196, 0.0027693159789531985, 0.027693159789531987]");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(4.547240950625534E12d, 113.16359838746733d, 0.0d, 1.4177447166653994d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.145821487076331E14d + "'", double4 == 5.145821487076331E14d);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double double10 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(8730.0d, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double double22 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray13);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray13);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray24);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray13, doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 113.16359838746733d + "'", double10 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray2);
        double double13 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray38);
        double[] doubleArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray38, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException40 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = nonMonotonicSequenceException40.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException45 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection46 = nonMonotonicSequenceException45.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray52 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection26, orderDirection31, orderDirection36, orderDirection41, orderDirection46, orderDirection51 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException56 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = nonMonotonicSequenceException56.getDirection();
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray52, orderDirection57, false);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray5, orderDirection57, false);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray5);
        org.apache.commons.math3.exception.util.Localizable localizable63 = null;
        org.apache.commons.math3.exception.util.Localizable localizable64 = null;
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException74 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection75 = nonMonotonicSequenceException74.getDirection();
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray70, orderDirection75, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException78 = new org.apache.commons.math3.exception.NullArgumentException(localizable64, (java.lang.Object[]) strArray70);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException79 = new org.apache.commons.math3.exception.MathArithmeticException(localizable63, (java.lang.Object[]) strArray70);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException83 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection84 = nonMonotonicSequenceException83.getDirection();
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray70, orderDirection84, true);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray5, orderDirection84, false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, -0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection46.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray52);
        org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection57.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + orderDirection75 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection75.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + orderDirection84 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection84.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1300.0d, 5.145821487076331E14d, 1630.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 6.6895679331992307E17d + "'", double4 == 6.6895679331992307E17d);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection3, false);
        int int6 = nonMonotonicSequenceException5.getIndex();
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray38 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32, orderDirection37 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray38, orderDirection43, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable7, (java.lang.Object[]) orderDirectionArray38);
        boolean boolean47 = nonMonotonicSequenceException5.getStrict();
        java.lang.Class<?> wildcardClass48 = nonMonotonicSequenceException5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray38);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray24);
        double[] doubleArray29 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        double[] doubleArray43 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray43);
        double[] doubleArray49 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray50 = new double[] {};
        double[] doubleArray57 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray57);
        double[] doubleArray63 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray49, doubleArray63);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray43, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray65);
        double[] doubleArray69 = new double[] {};
        double[] doubleArray76 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double77 = org.apache.commons.math3.util.MathArrays.distance(doubleArray69, doubleArray76);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray69);
        double[] doubleArray80 = new double[] {};
        double[] doubleArray87 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double88 = org.apache.commons.math3.util.MathArrays.distance(doubleArray80, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray80);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray80);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray29, doubleArray80);
        double double92 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray24, doubleArray80);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) 1, doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray15 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        double[] doubleArray29 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray29);
        double[] doubleArray35 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray36 = new double[] {};
        double[] doubleArray43 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray43);
        double[] doubleArray49 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray35, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray29, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray15, doubleArray51);
        double[] doubleArray54 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray54);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(doubleArray15, doubleArray54);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray15, (double) 1.0f);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray1, doubleArray58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, -0.0]");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.apache.commons.math3.exception.MathInternalError mathInternalError10 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
        double[] doubleArray23 = null;
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray25);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray43 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray43);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray36);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray25, doubleArray36);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray23, doubleArray25);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray25, 0);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(6.6895679331992307E17d, 8.313043701941666E25d, (-1040.0d), 101.0d, (-6.826219102159232E19d), 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.56106705757928E43d + "'", double6 == 5.56106705757928E43d);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, 1.771933898620068E12d);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, 1);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, 1.0d);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray79);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray79);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0]");
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        double double25 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray24);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray24);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray28);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray28);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, 1);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray28, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray27);
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray32);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray32);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.scale((-8477003.0d), doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray1, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int[] intArray15 = new int[] {};
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (byte) 10);
        double double18 = org.apache.commons.math3.util.MathArrays.distance(intArray12, intArray17);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray11, intArray17);
        int[] intArray20 = new int[] {};
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, (int) (byte) 10);
        int[] intArray23 = new int[] {};
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (byte) 10);
        int int26 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray20, intArray23);
        int[] intArray31 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray31);
        int int33 = org.apache.commons.math3.util.MathArrays.distance1(intArray11, intArray31);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11);
        int[] intArray35 = new int[] {};
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (byte) 10);
        int[] intArray43 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) ' ');
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, 35);
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) '4');
        int int52 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray11, intArray51);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1122.6359838746732d, 20.0d, (double) 1L, 3.045319849820813E11d, 1.0d, 52.0d, (double) 0.0f, 4.547240950625534E12d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.0453200748680096E11d + "'", double8 == 3.0453200748680096E11d);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray17 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray18 = new double[] {};
        double[] doubleArray25 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double26 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray25);
        double[] doubleArray31 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray31);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray17, doubleArray31);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException15 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray6);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray27);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray27);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray27, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray40, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = null;
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray44);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray55);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray55);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray44);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray68);
        double[] doubleArray72 = new double[] {};
        double[] doubleArray79 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray72, doubleArray79);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray72);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray72);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray72);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray3, 2.0064935685221478E15d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (1,630 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 2.0077253018361575E15, -1.2317333140099126E12]");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray23);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.scale(5100.0d, doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray23, 3501.448701609104d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray23);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray28);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray28);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale(14800.0d, doubleArray38);
        double[] doubleArray44 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray44, doubleArray58);
        double double61 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray39, doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray23, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.lang.String[] strArray3 = new java.lang.String[] { "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 34 and 35 are not strictly increasing (-1 >= 0)", "org.apache.commons.math3.exception.NonMonotonicSequenceException: points -2 and -1 are not strictly increasing (10 >= 10)", "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 96 and 97 are not strictly increasing (1,630 >= 0)" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException7 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext8 = nonMonotonicSequenceException7.getContext();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection9 = nonMonotonicSequenceException7.getDirection();
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection9, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        java.lang.Number number17 = nonMonotonicSequenceException15.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection18 = nonMonotonicSequenceException15.getDirection();
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray3, orderDirection18, false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(exceptionContext8);
        org.junit.Assert.assertTrue("'" + orderDirection9 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection9.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number17 + "' != '" + (short) -1 + "'", number17, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        double[] doubleArray0 = null;
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray0, orderDirection1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 1);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray80, 1.0d);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math3.util.MathArrays.distance(intArray5, intArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException4 = new org.apache.commons.math3.exception.NullArgumentException();
        org.apache.commons.math3.exception.util.Localizable localizable6 = null;
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0d, (-1), (byte) -1, (byte) -1, 100.0d, 1.0f };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException15 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable7, objArray14);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException16 = new org.apache.commons.math3.exception.NullArgumentException(localizable6, objArray14);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext17 = nullArgumentException16.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext18 = nullArgumentException16.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext19 = nullArgumentException16.getContext();
        java.lang.Number number20 = null;
        org.apache.commons.math3.exception.NotPositiveException notPositiveException21 = new org.apache.commons.math3.exception.NotPositiveException(number20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        java.lang.Object[] objArray38 = new java.lang.Object[] { nullArgumentException4, true, nullArgumentException16, notPositiveException21, 35, doubleArray23 };
        org.apache.commons.math3.exception.MathInternalError mathInternalError39 = new org.apache.commons.math3.exception.MathInternalError(localizable3, objArray38);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException40 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable2, objArray38);
        org.apache.commons.math3.exception.MathInternalError mathInternalError41 = new org.apache.commons.math3.exception.MathInternalError(localizable1, objArray38);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException42 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, objArray38);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(exceptionContext17);
        org.junit.Assert.assertNotNull(exceptionContext18);
        org.junit.Assert.assertNotNull(exceptionContext19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(objArray38);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double double11 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(8730.0d, doubleArray9);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1040.0d, doubleArray9);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 113.16359838746733d + "'", double11 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-9079200.0, 9079200.0, 4.721184E8, 9.0792E7, 9.0792E8, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.scale(3.055555359092974E13d, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray53);
        double[] doubleArray78 = new double[] {};
        double[] doubleArray85 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double86 = org.apache.commons.math3.util.MathArrays.distance(doubleArray78, doubleArray85);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray78);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray77, doubleArray78);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray14, doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        long[] longArray4 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray9 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray14 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray19 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[][] longArray20 = new long[][] { longArray4, longArray9, longArray14, longArray19 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray20);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray20);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray20);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray20);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray20);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray14 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray14, doubleArray50);
        double[] doubleArray53 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray53);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray14, (double) 1.0f);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray1, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, (int) (byte) 1);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0]");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(14800.0d, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double double36 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray14, doubleArray35);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray14);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray58 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        double[] doubleArray72 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray58, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray52, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray52);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray14, doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double double11 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(8730.0d, doubleArray9);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1040.0d, doubleArray9);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28, 1);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        double[] doubleArray68 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray68);
        double[] doubleArray74 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray75 = new double[] {};
        double[] doubleArray82 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray82);
        double[] doubleArray88 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray88);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray74, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray68, doubleArray90);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray68);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray92);
        double double94 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double double95 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray9, doubleArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 113.16359838746733d + "'", double11 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-9079200.0, 9079200.0, 4.721184E8, 9.0792E7, 9.0792E8, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 5100.0d + "'", double94 == 5100.0d);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray12);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, 0);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12);
        int[] intArray20 = new int[] {};
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, (int) (byte) 10);
        int[] intArray23 = new int[] {};
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (byte) 10);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray25);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        int[] intArray30 = new int[] {};
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (byte) 10);
        double double33 = org.apache.commons.math3.util.MathArrays.distance(intArray27, intArray32);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 0);
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray36);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray20);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray4 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray8 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray12 = new long[] { 1L, '#', (byte) -1 };
        long[][] longArray13 = new long[][] { longArray4, longArray8, longArray12 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray13);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray13);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray13);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException17 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray13);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray13);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        double[] doubleArray4 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray24 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray24, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray4, doubleArray40);
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray4, doubleArray43);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray4, (double) 1.0f);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray47);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException58.getDirection();
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray54, orderDirection59, false);
        double[][] doubleArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray48, orderDirection59, doubleArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException39 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = nonMonotonicSequenceException39.getDirection();
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray33, orderDirection40, false, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray14, orderDirection40, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 100, (double) 100L, 1.6255794635599754E46d, 5.8507310306748435E7d, 4.959685172746817E14d, 3.502752702658434E7d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 9.510828210278114E53d + "'", double6 == 9.510828210278114E53d);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double double12 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 0);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray16);
        double double29 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray2, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 52, doubleArray28);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray35);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray35, 0);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray55 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray55);
        double[] doubleArray61 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray61);
        double[] doubleArray67 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray68 = new double[] {};
        double[] doubleArray75 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray75);
        double[] doubleArray81 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray67, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray61, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray61);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85);
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray85);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray85, 4.547240950625534E12d);
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray85);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (182,000 >= 52)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.2592747024717624E11, 4.407461458651168E12, 1.2592747024717624E9, 1.2592747024717627E10]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray12);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, 0);
        int[] intArray18 = new int[] {};
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 10);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        double double24 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray23);
        int int25 = org.apache.commons.math3.util.MathArrays.distance1(intArray12, intArray23);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, 1);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, 1.0d);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray79);
        double[] doubleArray83 = new double[] {};
        double[] doubleArray90 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray83, doubleArray90);
        double[] doubleArray96 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double97 = org.apache.commons.math3.util.MathArrays.distance(doubleArray83, doubleArray96);
        boolean boolean98 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray79, doubleArray83);
        double double99 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 1.0d);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException45 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection46 = nonMonotonicSequenceException45.getDirection();
        java.lang.Number number47 = nonMonotonicSequenceException45.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = nonMonotonicSequenceException45.getDirection();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext49 = nonMonotonicSequenceException45.getContext();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException45.getDirection();
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41, orderDirection50, false, false);
        double double54 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection46.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number47 + "' != '" + (short) -1 + "'", number47, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(exceptionContext49);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray28 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        double[] doubleArray42 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray28, doubleArray42);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray64 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray65 = new double[] {};
        double[] doubleArray72 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray72);
        double[] doubleArray78 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray64, doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray58, doubleArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray42, doubleArray80);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray42);
        double double84 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray1, doubleArray42);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 20.0d + "'", double82 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 3500.0, 1.0, 10.0]");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        float[] floatArray5 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray12 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray12);
        float[] floatArray16 = new float[] { 10L, 10 };
        float[] floatArray17 = new float[] {};
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray17);
        float[] floatArray21 = new float[] { 10L, 10 };
        float[] floatArray22 = new float[] {};
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(floatArray21, floatArray22);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray22);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray16);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        long[] longArray3 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray7 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray11 = new long[] { 1L, '#', (byte) -1 };
        long[][] longArray12 = new long[][] { longArray3, longArray7, longArray11 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray12);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathInternalError mathInternalError14 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray35 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray36 = new double[] {};
        double[] doubleArray43 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray43);
        double[] doubleArray49 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray35, doubleArray49);
        double[] doubleArray55 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray56 = new double[] {};
        double[] doubleArray63 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray63);
        double[] doubleArray69 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray69);
        double[] doubleArray75 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray76 = new double[] {};
        double[] doubleArray83 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray76, doubleArray83);
        double[] doubleArray89 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray76, doubleArray89);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray75, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray69, doubleArray91);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray55, doubleArray91);
        double[] doubleArray94 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray94);
        boolean boolean96 = org.apache.commons.math3.util.MathArrays.equals(doubleArray55, doubleArray94);
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray35, doubleArray55);
        double double98 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray1, doubleArray35);
        double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray99), "[10.0, -1.0, 1.0, 10.0]");
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray28 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        double[] doubleArray42 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray28, doubleArray42);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray64 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray65 = new double[] {};
        double[] doubleArray72 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray72);
        double[] doubleArray78 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray64, doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray58, doubleArray80);
        double double82 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray42, doubleArray80);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray42);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray42);
        double double87 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray19, doubleArray42);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale(1.29432644070736563E18d, doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-100.0, -3500.0, -1.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 20.0d + "'", double82 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 7222.0d + "'", double87 == 7222.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.2943264407073656E20, 4.5301425424757796E21, 1.29432644070736563E18, 1.2943264407073657E19]");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray27);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray27);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray37);
        double[] doubleArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray37, doubleArray40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double double15 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray14);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray14, orderDirection16, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, 35);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        int[] intArray16 = new int[] {};
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 10);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray13, intArray16);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) ' ');
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        int[] intArray25 = new int[] {};
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (byte) 10);
        double double28 = org.apache.commons.math3.util.MathArrays.distance(intArray22, intArray27);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 0);
        int[] intArray32 = new int[] {};
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (byte) 10);
        int[] intArray35 = new int[] {};
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (byte) 10);
        double double38 = org.apache.commons.math3.util.MathArrays.distance(intArray32, intArray37);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (short) 0);
        int int42 = org.apache.commons.math3.util.MathArrays.distance1(intArray22, intArray32);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, 1);
        double double45 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray32);
        int[] intArray49 = new int[] { 0, (byte) 10, 10 };
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) '4');
        double double52 = org.apache.commons.math3.util.MathArrays.distance(intArray32, intArray49);
        int[] intArray53 = new int[] {};
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (byte) 10);
        int[] intArray56 = new int[] {};
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (byte) 10);
        double double59 = org.apache.commons.math3.util.MathArrays.distance(intArray53, intArray58);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 0);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) (byte) 0);
        int[] intArray65 = new int[] {};
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (byte) 10);
        int int68 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray62, intArray65);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, 0);
        int int71 = org.apache.commons.math3.util.MathArrays.distance1(intArray32, intArray70);
        int[] intArray77 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) ' ');
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77);
        int int81 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray77);
        int[] intArray82 = new int[] {};
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray82, (int) (byte) 10);
        int[] intArray90 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray92 = org.apache.commons.math3.util.MathArrays.copyOf(intArray90, (int) ' ');
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray90);
        int[] intArray95 = org.apache.commons.math3.util.MathArrays.copyOf(intArray90, 35);
        int int96 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray84, intArray95);
        int int97 = org.apache.commons.math3.util.MathArrays.distance1(intArray70, intArray95);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = org.apache.commons.math3.util.MathArrays.distance(intArray12, intArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 52 + "'", int96 == 52);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.scale(1040.0d, doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, (int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray10 = new double[] {};
        double[] doubleArray17 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray17);
        double[] doubleArray23 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray10, doubleArray23);
        double[] doubleArray29 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        double[] doubleArray43 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray43);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray29, doubleArray43);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray45);
        double[] doubleArray48 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray23, 1);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray57 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray57);
        double[] doubleArray63 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray63);
        double[] doubleArray69 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray70 = new double[] {};
        double[] doubleArray77 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray77);
        double[] doubleArray83 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray83);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray69, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray63, doubleArray85);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray63);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equals(doubleArray23, doubleArray87);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray89);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException94 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection95 = nonMonotonicSequenceException94.getDirection();
        boolean boolean97 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray89, orderDirection95, false);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray0, doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertTrue("'" + orderDirection95 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection95.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray29 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        double[] doubleArray43 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray43);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray29, doubleArray43);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray53 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray53);
        double[] doubleArray59 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray59);
        double[] doubleArray65 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray66 = new double[] {};
        double[] doubleArray73 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray73);
        double[] doubleArray79 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray65, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray59, doubleArray81);
        double double83 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray43, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray43);
        double double85 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray2, doubleArray43);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 10, doubleArray2);
        double[] doubleArray87 = new double[] {};
        double[] doubleArray94 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray87, doubleArray94);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray87);
        double[] doubleArray97 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray86, doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 20.0d + "'", double83 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[]");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException4 = new org.apache.commons.math3.exception.NullArgumentException();
        org.apache.commons.math3.exception.util.Localizable localizable6 = null;
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { 100.0d, (-1), (byte) -1, (byte) -1, 100.0d, 1.0f };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException15 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable7, objArray14);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException16 = new org.apache.commons.math3.exception.NullArgumentException(localizable6, objArray14);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext17 = nullArgumentException16.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext18 = nullArgumentException16.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext19 = nullArgumentException16.getContext();
        java.lang.Number number20 = null;
        org.apache.commons.math3.exception.NotPositiveException notPositiveException21 = new org.apache.commons.math3.exception.NotPositiveException(number20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        java.lang.Object[] objArray38 = new java.lang.Object[] { nullArgumentException4, true, nullArgumentException16, notPositiveException21, 35, doubleArray23 };
        org.apache.commons.math3.exception.MathInternalError mathInternalError39 = new org.apache.commons.math3.exception.MathInternalError(localizable3, objArray38);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException40 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable2, objArray38);
        org.apache.commons.math3.exception.MathInternalError mathInternalError41 = new org.apache.commons.math3.exception.MathInternalError(localizable1, objArray38);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException42 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, objArray38);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(exceptionContext17);
        org.junit.Assert.assertNotNull(exceptionContext18);
        org.junit.Assert.assertNotNull(exceptionContext19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(objArray38);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(9.321539453695937E49d, (double) (-1.0f), 35004.487016091036d, 6.23339590802351E11d, 2.4899064232258738E14d, 52.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-9.321539453695937E49d) + "'", double6 == (-9.321539453695937E49d));
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray33 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray26);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        double[] doubleArray4 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray24 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray24, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray4, doubleArray40);
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equals(doubleArray4, doubleArray43);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.scale((-8.721057079698479E11d), doubleArray43);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        java.lang.Number number52 = nonMonotonicSequenceException50.getPrevious();
        int int53 = nonMonotonicSequenceException50.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = nonMonotonicSequenceException50.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray43, orderDirection54, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number52 + "' != '" + (short) -1 + "'", number52, (short) -1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertTrue("'" + orderDirection54 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection54.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray27 = null;
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray29);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray40);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray40);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray27, doubleArray29);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray29, 0);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53);
        double double55 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray2, doubleArray53);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray63 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray63);
        double[] doubleArray69 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray69);
        double[] doubleArray75 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray76 = new double[] {};
        double[] doubleArray83 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray76, doubleArray83);
        double[] doubleArray89 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray76, doubleArray89);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray75, doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray69, doubleArray91);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, 1);
        double double95 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray53, doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray27);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray23);
        double double40 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection3, false);
        int int6 = nonMonotonicSequenceException5.getIndex();
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray38 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32, orderDirection37 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray38, orderDirection43, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable7, (java.lang.Object[]) orderDirectionArray38);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection47 = nonMonotonicSequenceException5.getDirection();
        java.lang.Number number48 = nonMonotonicSequenceException5.getPrevious();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray38);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(orderDirection47);
        org.junit.Assert.assertEquals("'" + number48 + "' != '" + 10.0f + "'", number48, 10.0f);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray54);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray78);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 0.0d);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(132550.70455631864d, doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.3255070455631863E7]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 5100.0d + "'", double80 == 5100.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0]");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(3.3959797E9d, 7.2571147E7d, 32000.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.46450142017715904E17d + "'", double4 == 2.46450142017715904E17d);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray14);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray31);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray42);
        double double53 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray14, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(3.3959797E9d, doubleArray52);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray58 = new double[] {};
        double[] doubleArray59 = new double[] {};
        double[] doubleArray60 = new double[] {};
        double[] doubleArray61 = new double[] {};
        double[][] doubleArray62 = new double[][] { doubleArray57, doubleArray58, doubleArray59, doubleArray60, doubleArray61 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray56, doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20, orderDirection21, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray26);
        double[] doubleArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray26, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { 10L, 10 };
        float[] floatArray4 = new float[] {};
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray4);
        float[] floatArray8 = new float[] { 10L, 10 };
        float[] floatArray9 = new float[] {};
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray9);
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray9);
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray9);
        float[] floatArray18 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray25 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray25);
        float[] floatArray29 = new float[] { 10L, 10 };
        float[] floatArray30 = new float[] {};
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray30);
        float[] floatArray34 = new float[] { 10L, 10 };
        float[] floatArray35 = new float[] {};
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray35);
        float[] floatArray39 = new float[] { 10L, 10 };
        float[] floatArray40 = new float[] {};
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray40);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray30, floatArray34);
        float[] floatArray46 = new float[] { 10L, 10 };
        float[] floatArray47 = new float[] {};
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray47);
        float[] floatArray51 = new float[] { 10L, 10 };
        float[] floatArray52 = new float[] {};
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray52);
        float[] floatArray57 = new float[] { 10L, 10 };
        float[] floatArray58 = new float[] {};
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray57, floatArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray46, floatArray57);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray46);
        float[] floatArray65 = new float[] { (byte) 0, 'a', 0L };
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray30, floatArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray65);
        float[] floatArray68 = null;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray65, floatArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(floatArray9, floatArray68);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[0.0, 97.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray11);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray11);
        double[] doubleArray22 = null;
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray22);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray37, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37, 1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray62);
        java.lang.Number number64 = null;
        java.lang.Number number65 = null;
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException79 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection80 = nonMonotonicSequenceException79.getDirection();
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray75, orderDirection80, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException84 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection80, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException86 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number64, number65, 0, orderDirection80, true);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray62, orderDirection80, false, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray22, orderDirection80, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + orderDirection80 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection80.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-568774.0d), 1040.0d, 2.8385755681000004E10d, 20.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.671235886600001E11d + "'", double4 == 5.671235886600001E11d);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(6654464.168026618d, 97.0d, 113.16359838746733d, (double) (-1.0f), 113.16359838746733d, (double) (short) 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 6.454829111349835E8d + "'", double6 == 6.454829111349835E8d);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray13 = new float[] { 10L, 10 };
        float[] floatArray14 = new float[] {};
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray13, floatArray14);
        float[] floatArray18 = new float[] { 10L, 10 };
        float[] floatArray19 = new float[] {};
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray19);
        float[] floatArray23 = new float[] { 10L, 10 };
        float[] floatArray24 = new float[] {};
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equals(floatArray23, floatArray24);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray24);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray18);
        float[] floatArray31 = new float[] { 10L, 10 };
        float[] floatArray32 = new float[] {};
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray32);
        float[] floatArray34 = null;
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray32, floatArray34);
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray34);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53, 1);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, 1.0d);
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray79);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, 7002072.0d);
        double[] doubleArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double86 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray79, doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[7002072.0]");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray2);
        double[] doubleArray18 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        double[] doubleArray32 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray32);
        double[] doubleArray38 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray38, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray32, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray54);
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray57);
        double double60 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray2, doubleArray18);
        double[] doubleArray67 = new double[] { (short) 100, 8730.0d, 1630.0d, (-1.0d), 3500.0d };
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray67, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray2, doubleArray67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 5");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1630.0003067484374d + "'", double60 == 1630.0003067484374d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 8730.0, 1630.0, -1.0, 3500.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0]");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = nonMonotonicSequenceException32.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = nonMonotonicSequenceException47.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = nonMonotonicSequenceException52.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray54 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection28, orderDirection33, orderDirection38, orderDirection43, orderDirection48, orderDirection53 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException58.getDirection();
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray54, orderDirection59, false);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray7, orderDirection59, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) (short) 100, (int) 'a', orderDirection59, true);
        org.apache.commons.math3.exception.util.Localizable localizable66 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { 100, (byte) 10 };
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException70 = new org.apache.commons.math3.exception.MathArithmeticException(localizable66, objArray69);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext71 = mathArithmeticException70.getContext();
        java.lang.Throwable[] throwableArray72 = mathArithmeticException70.getSuppressed();
        org.apache.commons.math3.exception.util.Localizable localizable73 = null;
        org.apache.commons.math3.exception.util.Localizable localizable74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { 100.0d, (-1), (byte) -1, (byte) -1, 100.0d, 1.0f };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException82 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable74, objArray81);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException83 = new org.apache.commons.math3.exception.NullArgumentException(localizable73, objArray81);
        mathArithmeticException70.addSuppressed((java.lang.Throwable) nullArgumentException83);
        nonMonotonicSequenceException65.addSuppressed((java.lang.Throwable) mathArithmeticException70);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext86 = mathArithmeticException70.getContext();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray54);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[100, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[100, 10]");
        org.junit.Assert.assertNotNull(exceptionContext71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertNotNull(exceptionContext86);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException66 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection67 = nonMonotonicSequenceException66.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException69 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection67, false);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray58, orderDirection67, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray3, orderDirection67, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (1,630 >= -1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection67 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection67.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray27);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray27);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, 35);
        int[] intArray11 = new int[] {};
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray11, (int) (byte) 10);
        int[] intArray14 = new int[] {};
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (byte) 10);
        int int17 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray11, intArray14);
        int[] intArray18 = new int[] {};
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 10);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        double double24 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray23);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (short) 0);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 0);
        int[] intArray30 = new int[] {};
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (byte) 10);
        int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray30);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, 0);
        int int36 = org.apache.commons.math3.util.MathArrays.distance1(intArray14, intArray30);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray5, intArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        long[] longArray5 = new long[] {};
        long[] longArray6 = new long[] {};
        long[][] longArray7 = new long[][] { longArray5, longArray6 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable4, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException10 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray7);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray7);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray7);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 0.0f, 3501.448701609104d, 43127.36401612533d, (-1040.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-4.485245857677034E7d) + "'", double4 == (-4.485245857677034E7d));
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException6 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext7 = mathIllegalStateException6.getContext();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(exceptionContext7);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection11, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException14 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) strArray6);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray20, orderDirection25, false);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection25, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException33 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = nonMonotonicSequenceException33.getDirection();
        java.lang.Number number35 = nonMonotonicSequenceException33.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException33.getDirection();
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection36, false);
        org.apache.commons.math3.exception.util.Localizable localizable39 = null;
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException49.getDirection();
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection50, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException53 = new org.apache.commons.math3.exception.NullArgumentException(localizable39, (java.lang.Object[]) strArray45);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection64 = nonMonotonicSequenceException63.getDirection();
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray59, orderDirection64, false);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray45, orderDirection64, true);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection64, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException74 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int75 = nonMonotonicSequenceException74.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection76 = nonMonotonicSequenceException74.getDirection();
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray6, orderDirection76, true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number35 + "' != '" + (short) -1 + "'", number35, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + orderDirection64 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection64.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + orderDirection76 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection76.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray15);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray41, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, 1.771933898620068E12d);
        double[] doubleArray26 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        double[] doubleArray40 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray40);
        double[] doubleArray46 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray47 = new double[] {};
        double[] doubleArray54 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray54);
        double[] doubleArray60 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray46, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray40, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray26, doubleArray62);
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(doubleArray26, doubleArray65);
        double double68 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray22, doubleArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 3");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1630.0003067484374d + "'", double68 == 1630.0003067484374d);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int[] intArray15 = new int[] {};
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (byte) 10);
        double double18 = org.apache.commons.math3.util.MathArrays.distance(intArray12, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (short) 0);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 0);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray29);
        int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray29);
        int[] intArray32 = new int[] {};
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (byte) 10);
        int[] intArray35 = new int[] {};
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (byte) 10);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray35);
        int[] intArray43 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(intArray32, intArray43);
        int int45 = org.apache.commons.math3.util.MathArrays.distance1(intArray23, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23);
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray23);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3.0453200748680096E11d, 10.0d, 1300.0d, 8.5773796374885857E18d, 2.458577578238662E16d, (-8.721057079698479E11d), 2.4899064232258738E14d, 9.510828210278114E53d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.368107225096932E68d + "'", double8 == 2.368107225096932E68d);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException3 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection4 = nonMonotonicSequenceException3.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException8 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection9 = nonMonotonicSequenceException8.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException13 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = nonMonotonicSequenceException13.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException18 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = nonMonotonicSequenceException18.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException23 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection24 = nonMonotonicSequenceException23.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException28 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = nonMonotonicSequenceException28.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray30 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection4, orderDirection9, orderDirection14, orderDirection19, orderDirection24, orderDirection29 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException34 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection35 = nonMonotonicSequenceException34.getDirection();
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray30, orderDirection35, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException41 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = nonMonotonicSequenceException41.getDirection();
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray30, orderDirection42, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException48 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = nonMonotonicSequenceException48.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException53 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = nonMonotonicSequenceException53.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException58.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection64 = nonMonotonicSequenceException63.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException68 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = nonMonotonicSequenceException68.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException73 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = nonMonotonicSequenceException73.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray75 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection49, orderDirection54, orderDirection59, orderDirection64, orderDirection69, orderDirection74 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException79 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection80 = nonMonotonicSequenceException79.getDirection();
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray75, orderDirection80, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException86 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection87 = nonMonotonicSequenceException86.getDirection();
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray75, orderDirection87, false);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray30, orderDirection87, true);
        org.junit.Assert.assertTrue("'" + orderDirection4 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection4.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection9 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection9.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection14 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection14.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection19 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection19.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection24 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection24.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray30);
        org.junit.Assert.assertTrue("'" + orderDirection35 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection35.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection54 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection54.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection64 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection64.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray75);
        org.junit.Assert.assertTrue("'" + orderDirection80 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection80.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + orderDirection87 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection87.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 1);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray80, 1.0d);
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray80);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray80);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.scale((double) 32, doubleArray80);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray85, (int) '#');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[3200.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[3200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray2);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray43 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray43);
        double[] doubleArray49 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray49);
        double[] doubleArray55 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray56 = new double[] {};
        double[] doubleArray63 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray63);
        double[] doubleArray69 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray55, doubleArray69);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray49, doubleArray71);
        double double73 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray33, doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray2, doubleArray33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 20.0d + "'", double73 == 20.0d);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.009254E7d), 6.826219102172153E19d, (double) (-1), 3501.448701609104d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-6.889388933743654E26d) + "'", double4 == (-6.889388933743654E26d));
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, (int) (byte) 1);
        double[] doubleArray65 = new double[] {};
        double[] doubleArray72 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray72);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray65);
        double[] doubleArray76 = new double[] {};
        double[] doubleArray83 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double84 = org.apache.commons.math3.util.MathArrays.distance(doubleArray76, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray76);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray76);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray62, doubleArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray2);
        double[] doubleArray18 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        double[] doubleArray32 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray32);
        double[] doubleArray38 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray38, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray32, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray18, doubleArray54);
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(doubleArray18, doubleArray57);
        double double60 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray2, doubleArray18);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (int) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1630.0003067484374d + "'", double60 == 1630.0003067484374d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 1630.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.009254E7d), 2.8385654801000005E8d, (-568774.0d), 5100.0d, 1.0d, 3.014877405643864E7d, 1.29432644070736563E18d, 5.8507310306748435E7d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 7.572755870183024E25d + "'", double8 == 7.572755870183024E25d);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { 10L, 10 };
        float[] floatArray4 = new float[] {};
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray4);
        float[] floatArray8 = new float[] { 10L, 10 };
        float[] floatArray9 = new float[] {};
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray9);
        float[] floatArray13 = new float[] { 10L, 10 };
        float[] floatArray14 = new float[] {};
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray13, floatArray14);
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray14);
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray4, floatArray8);
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray8);
        float[] floatArray21 = new float[] { 100.0f, 10.0f };
        float[] floatArray24 = new float[] { 10L, 10 };
        float[] floatArray25 = new float[] {};
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray25);
        float[] floatArray29 = new float[] { 10L, 10 };
        float[] floatArray30 = new float[] {};
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray30);
        float[] floatArray34 = new float[] { 10L, 10 };
        float[] floatArray35 = new float[] {};
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray35);
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray35);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray25, floatArray29);
        float[] floatArray41 = new float[] { 10L, 10 };
        float[] floatArray42 = new float[] {};
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray42);
        float[] floatArray46 = new float[] { 10L, 10 };
        float[] floatArray47 = new float[] {};
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray47);
        float[] floatArray52 = new float[] { 10L, 10 };
        float[] floatArray53 = new float[] {};
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(floatArray52, floatArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray41, floatArray52);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equals(floatArray25, floatArray41);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(floatArray21, floatArray25);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray25);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double double15 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray14);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        double[] doubleArray29 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray29);
        double[] doubleArray35 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray36 = new double[] {};
        double[] doubleArray43 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray43);
        double[] doubleArray49 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray35, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray29, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray29, 1);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55, (int) (short) 100);
        double[] doubleArray62 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray63 = new double[] {};
        double[] doubleArray70 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double71 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray70);
        double[] doubleArray76 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double77 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray62, doubleArray76);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray76);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray55, doubleArray76);
        double double81 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray14, doubleArray55);
        double double82 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10000.0, 350000.0, 100.0, 1000.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4, 0);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray4);
        double double17 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray16);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1630.0d, doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray19 = new int[] {};
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 10);
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        double double25 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray24);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (short) 0);
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray9, intArray19);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, 1);
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray19);
        int[] intArray36 = new int[] { 0, (byte) 10, 10 };
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) '4');
        double double39 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray36);
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40);
        int[] intArray47 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) ' ');
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, 35);
        int[] intArray54 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = org.apache.commons.math3.util.MathArrays.distance(intArray41, intArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1]");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray2);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale((double) 10, doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 0);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        double[] doubleArray41 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray16, doubleArray28);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 1);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray40);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray62 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray63 = new double[] {};
        double[] doubleArray70 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double71 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray70);
        double[] doubleArray76 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double77 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray62, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray56, doubleArray78);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray40, doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.29432644070736563E18d, (double) 100L, (double) (short) 1, 9700.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.2943264407073658E20d + "'", double4 == 1.2943264407073658E20d);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(3.3959797E9d, 9700.0d, (-1.009254E7d), 1.4177447166653994d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.294098878135474E13d + "'", double4 == 3.294098878135474E13d);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1122.6359838746732d, 1.6255794635599754E46d, 0.0d, 2.8385654801000005E8d, 6654464.168026618d, 2.46450142017715904E17d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.8249340004401165E49d + "'", double6 == 1.8249340004401165E49d);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray29 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        double[] doubleArray43 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray43);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray29, doubleArray43);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray53 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray53);
        double[] doubleArray59 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray59);
        double[] doubleArray65 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray66 = new double[] {};
        double[] doubleArray73 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray73);
        double[] doubleArray79 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray65, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray59, doubleArray81);
        double double83 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray43, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray43);
        double double85 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray2, doubleArray43);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 10, doubleArray2);
        double double87 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 20.0d + "'", double83 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 1);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray61 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray55, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray55);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray15, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray79, (double) (short) 1);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.scale(9700.0d, doubleArray82);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray82);
        double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.scale(1040.0d, doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.027693159789531987, 0.9692605926336195, 2.7693159789531985E-4, 0.0027693159789531985]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[268.62364995846025, 9401.82774854611, 2.6862364995846026, 26.862364995846026]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.027693159789531987, 0.9692605926336195, 2.7693159789531985E-4, 0.0027693159789531985]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[28.800886181113267, 1008.0310163389643, 0.28800886181113267, 2.8800886181113263]");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4, 0);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray4);
        double double17 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray16);
        double[] doubleArray22 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray22, doubleArray58);
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray22, doubleArray61);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray22);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale((double) 52, doubleArray22);
        java.lang.Class<?> wildcardClass66 = doubleArray22.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 84760.0, -52.0]");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection44, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException47 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) orderDirectionArray32);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException48 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray23);
        double[][] doubleArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray23, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException6 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = nonMonotonicSequenceException6.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray33 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection7, orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection38, false);
        org.apache.commons.math3.exception.MathInternalError mathInternalError41 = new org.apache.commons.math3.exception.MathInternalError(localizable2, (java.lang.Object[]) orderDirectionArray33);
        java.lang.Number number42 = null;
        java.lang.Number number43 = null;
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException57 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection58 = nonMonotonicSequenceException57.getDirection();
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray53, orderDirection58, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException62 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection58, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException64 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number42, number43, 0, orderDirection58, true);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection58, false);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException67 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) orderDirectionArray33);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException68 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) orderDirectionArray33);
        org.apache.commons.math3.exception.util.Localizable localizable69 = null;
        org.apache.commons.math3.exception.util.Localizable localizable70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { 100.0d, (-1), (byte) -1, (byte) -1, 100.0d, 1.0f };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException78 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable70, objArray77);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException79 = new org.apache.commons.math3.exception.NullArgumentException(localizable69, objArray77);
        org.apache.commons.math3.exception.util.Localizable localizable80 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException84 = new org.apache.commons.math3.exception.NumberIsTooSmallException(localizable80, (java.lang.Number) 0.0d, (java.lang.Number) 0.0d, false);
        java.lang.Number number85 = numberIsTooSmallException84.getMin();
        nullArgumentException79.addSuppressed((java.lang.Throwable) numberIsTooSmallException84);
        boolean boolean87 = numberIsTooSmallException84.getBoundIsAllowed();
        java.lang.Number number88 = numberIsTooSmallException84.getArgument();
        mathArithmeticException68.addSuppressed((java.lang.Throwable) numberIsTooSmallException84);
        java.lang.Number number90 = numberIsTooSmallException84.getMin();
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray33);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + orderDirection58 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection58.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[100.0, -1, -1, -1, 100.0, 1.0]");
        org.junit.Assert.assertEquals("'" + number85 + "' != '" + 0.0d + "'", number85, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + number88 + "' != '" + 0.0d + "'", number88, 0.0d);
        org.junit.Assert.assertEquals("'" + number90 + "' != '" + 0.0d + "'", number90, 0.0d);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray11);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray11);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray35, 1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray60);
        java.lang.Number number62 = null;
        java.lang.Number number63 = null;
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException77 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = nonMonotonicSequenceException77.getDirection();
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray73, orderDirection78, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException82 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection78, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException84 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number62, number63, 0, orderDirection78, true);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray60, orderDirection78, false, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray11, orderDirection78, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0]");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        double[] doubleArray6 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        double[] doubleArray20 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray6, doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray20, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray20);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 35);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.scale(3.502752702658434E7d, doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 20.0d + "'", double60 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[3.5027527026584344E9, 1.225963445930452E11, 3.502752702658434E7, 3.502752702658434E8]");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext9 = nullArgumentException8.getContext();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(exceptionContext9);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection3, false);
        java.lang.Number number6 = nonMonotonicSequenceException5.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = nonMonotonicSequenceException5.getDirection();
        java.lang.Number number8 = nonMonotonicSequenceException5.getPrevious();
        org.apache.commons.math3.exception.util.Localizable localizable9 = null;
        org.apache.commons.math3.exception.util.Localizable localizable10 = null;
        org.apache.commons.math3.exception.util.Localizable localizable11 = null;
        org.apache.commons.math3.exception.util.Localizable localizable12 = null;
        org.apache.commons.math3.exception.util.Localizable localizable13 = null;
        long[] longArray14 = new long[] {};
        long[] longArray15 = new long[] {};
        long[][] longArray16 = new long[][] { longArray14, longArray15 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray16);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray16);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray16);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable13, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray16);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException23 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable12, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException24 = new org.apache.commons.math3.exception.NullArgumentException(localizable11, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException25 = new org.apache.commons.math3.exception.MathArithmeticException(localizable10, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException26 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable9, (java.lang.Object[]) longArray16);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException5.getDirection();
        int int28 = nonMonotonicSequenceException5.getIndex();
        org.junit.Assert.assertEquals("'" + number6 + "' != '" + 10.0f + "'", number6, 10.0f);
        org.junit.Assert.assertNull(orderDirection7);
        org.junit.Assert.assertEquals("'" + number8 + "' != '" + 10.0f + "'", number8, 10.0f);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNull(orderDirection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(3.055555359092974E13d, 1.088956904358433E7d, 5100.0d, 3.0453200748680096E11d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.3273836360660864E20d + "'", double4 == 3.3273836360660864E20d);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray19 = new int[] {};
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 10);
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        double double25 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray24);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (short) 0);
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray9, intArray19);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, 1);
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray19);
        int[] intArray36 = new int[] { 0, (byte) 10, 10 };
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) '4');
        double double39 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (byte) 10);
        int[] intArray43 = new int[] {};
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 10);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray40, intArray45);
        int[] intArray47 = new int[] {};
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (byte) 10);
        int[] intArray50 = new int[] {};
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (byte) 10);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(intArray47, intArray52);
        int[] intArray54 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 0);
        int int57 = org.apache.commons.math3.util.MathArrays.distance1(intArray40, intArray56);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40);
        int[] intArray59 = new int[] {};
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59, (int) (byte) 10);
        int[] intArray62 = new int[] {};
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) (byte) 10);
        double double65 = org.apache.commons.math3.util.MathArrays.distance(intArray59, intArray64);
        int[] intArray66 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59, (int) (short) 0);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray68, (int) (byte) 0);
        int[] intArray71 = new int[] {};
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray71, (int) (byte) 10);
        int[] intArray74 = new int[] {};
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (byte) 10);
        double double77 = org.apache.commons.math3.util.MathArrays.distance(intArray71, intArray76);
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray70, intArray76);
        int[] intArray79 = new int[] {};
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray79, (int) (byte) 10);
        int[] intArray82 = new int[] {};
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray82, (int) (byte) 10);
        int int85 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray79, intArray82);
        int[] intArray90 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double91 = org.apache.commons.math3.util.MathArrays.distance(intArray79, intArray90);
        int int92 = org.apache.commons.math3.util.MathArrays.distance1(intArray70, intArray90);
        int[] intArray93 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70);
        double double94 = org.apache.commons.math3.util.MathArrays.distance(intArray58, intArray93);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray36, intArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray13);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray13);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.scale((-8477003.0d), doubleArray13);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray10, doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        float[] floatArray12 = new float[] { 10L, 10 };
        float[] floatArray13 = new float[] {};
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray12, floatArray13);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray13);
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        float[] floatArray24 = new float[] { 10L, 10 };
        float[] floatArray25 = new float[] {};
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray25);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray25);
        float[] floatArray30 = new float[] { 10L, 10 };
        float[] floatArray31 = new float[] {};
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray30);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray19);
        float[] floatArray38 = new float[] { (byte) 0, 'a', 0L };
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray38);
        float[] floatArray42 = new float[] { 10L, 10 };
        float[] floatArray43 = new float[] {};
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(floatArray42, floatArray43);
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray43);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[0.0, 97.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(100.0d, 3.055555359092974E13d, 2.8385755681000004E10d, (-6.826219102159232E19d), 1.6255794635599754E46d, 5100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 8.290455264155874E49d + "'", double6 == 8.290455264155874E49d);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray54);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray54);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray54);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 100);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((-8477003.0d), doubleArray2);
        org.apache.commons.math3.exception.util.Localizable localizable14 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException18 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable19 = null;
        double[] doubleArray20 = null;
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray22);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray40 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray33, doubleArray40);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray33);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray22, doubleArray33);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray20, doubleArray22);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, 0);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray46);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray55 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray55);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection58 = null;
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray48, orderDirection58, doubleArray60);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray47, doubleArray60);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException63 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException18, localizable19, (java.lang.Object[]) doubleArray60);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException64 = new org.apache.commons.math3.exception.NullArgumentException(localizable14, (java.lang.Object[]) doubleArray60);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray13, doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.apache.commons.math3.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math3.exception.NotPositiveException((java.lang.Number) 9700.0d);
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray6 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray10 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray14 = new long[] { 1L, '#', (byte) -1 };
        long[][] longArray15 = new long[][] { longArray6, longArray10, longArray14 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException19 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) notPositiveException1, localizable2, (java.lang.Object[]) longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray15);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray14);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray31);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray42);
        double double53 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray14, doubleArray52);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(3.3959797E9d, doubleArray52);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException62 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection63 = nonMonotonicSequenceException62.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection63, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray52, orderDirection63, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection63 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection63.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray27);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray16, doubleArray27);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray2, doubleArray37);
        double[] doubleArray50 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        double[] doubleArray64 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray50, doubleArray64);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException70 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection71 = nonMonotonicSequenceException70.getDirection();
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray64, orderDirection71, false, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException76 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 52.0d, 1, orderDirection71, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException78 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.6255794635599754E46d, (java.lang.Number) 2.479067448127025E15d, 100, orderDirection71, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray2, orderDirection71, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection71.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray27);
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        double[] doubleArray43 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray43);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException51 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection52 = nonMonotonicSequenceException51.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException54 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection52, false);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray43, orderDirection52, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray1, orderDirection52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection52 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection52.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        double[] doubleArray2 = null;
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray17, 1);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray63 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray64 = new double[] {};
        double[] doubleArray71 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray64, doubleArray71);
        double[] doubleArray77 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray64, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray63, doubleArray77);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray57, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray57);
        boolean boolean82 = org.apache.commons.math3.util.MathArrays.equals(doubleArray17, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray83);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray2, doubleArray83);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray83);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray83, (int) (short) 100);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-8477003.0d), doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.scaleInPlace(8.290455264155874E49d, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray27);
        double[] doubleArray36 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray37 = new double[] {};
        double[] doubleArray44 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray44);
        double[] doubleArray50 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray36, doubleArray50);
        double[] doubleArray53 = new double[] {};
        double[] doubleArray60 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray60);
        double[] doubleArray66 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray53, doubleArray66);
        double[] doubleArray72 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray73 = new double[] {};
        double[] doubleArray80 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray80);
        double[] doubleArray86 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray72, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray66, doubleArray88);
        double double90 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray50, doubleArray88);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray50);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray50, (int) (byte) 1);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 20.0d + "'", double90 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        double[] doubleArray0 = null;
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray37, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray21, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray21);
        double[] doubleArray64 = new double[] {};
        double[] doubleArray71 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray64, doubleArray71);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray64);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray21, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale(2.0064935685221478E15d, doubleArray73);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 20.0d + "'", double61 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = null;
        double[] doubleArray12 = new double[] {};
        double[][] doubleArray13 = new double[][] { doubleArray12 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray1, orderDirection11, doubleArray13);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1.771933898620068E12d, doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray19 = new int[] {};
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 10);
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        double double25 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray24);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (short) 0);
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray9, intArray19);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, 1);
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray19);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        int[] intArray37 = new int[] {};
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (byte) 10);
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray37);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) ' ');
        int[] intArray43 = new int[] {};
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 10);
        int[] intArray46 = new int[] {};
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (byte) 10);
        double double49 = org.apache.commons.math3.util.MathArrays.distance(intArray43, intArray48);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 0);
        int[] intArray53 = new int[] {};
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (byte) 10);
        int[] intArray56 = new int[] {};
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (byte) 10);
        double double59 = org.apache.commons.math3.util.MathArrays.distance(intArray53, intArray58);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 0);
        int int63 = org.apache.commons.math3.util.MathArrays.distance1(intArray43, intArray53);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, 1);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(intArray34, intArray53);
        int[] intArray70 = new int[] { 0, (byte) 10, 10 };
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) '4');
        double double73 = org.apache.commons.math3.util.MathArrays.distance(intArray53, intArray70);
        int[] intArray74 = new int[] {};
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (byte) 10);
        int[] intArray77 = new int[] {};
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) (byte) 10);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(intArray74, intArray79);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (short) 0);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray83, (int) (byte) 0);
        int[] intArray86 = new int[] {};
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray86, (int) (byte) 10);
        int int89 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray83, intArray86);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray86, 0);
        int int92 = org.apache.commons.math3.util.MathArrays.distance1(intArray53, intArray91);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91, (int) '4');
        int int95 = org.apache.commons.math3.util.MathArrays.distance1(intArray19, intArray94);
        int[] intArray97 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, 1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0]");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(1.5882650109042066E8d, 8.313043701941666E25d, 2.965179423548113E10d, 1.2555417199868906E9d, 2.8385654801000005E8d, 6.45483024298582E8d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.3203316445911565E34d + "'", double6 == 1.3203316445911565E34d);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.NotStrictlyPositiveException notStrictlyPositiveException2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException(localizable0, (java.lang.Number) 10.0f);
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        long[] longArray9 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray14 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray19 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray24 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[][] longArray25 = new long[][] { longArray9, longArray14, longArray19, longArray24 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray25);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException27 = new org.apache.commons.math3.exception.NullArgumentException(localizable4, (java.lang.Object[]) longArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException28 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) notStrictlyPositiveException2, localizable3, (java.lang.Object[]) longArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray25);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.math3.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math3.exception.DimensionMismatchException(35, (int) (short) 10);
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        org.apache.commons.math3.exception.util.Localizable localizable5 = null;
        long[] longArray6 = new long[] {};
        long[] longArray7 = new long[] {};
        long[][] longArray8 = new long[][] { longArray6, longArray7 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray8);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray8);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable5, (java.lang.Object[]) longArray8);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable4, (java.lang.Object[]) longArray8);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException13 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) dimensionMismatchException2, localizable3, (java.lang.Object[]) longArray8);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray8);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        double[] doubleArray0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection5, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 0.0d, (double) 10, (double) 0.0f);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException11 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = mathArithmeticException11.getContext();
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(exceptionContext12);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        double[] doubleArray0 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray24);
        double[] doubleArray26 = null;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(doubleArray24, doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        double[] doubleArray0 = null;
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        double[] doubleArray3 = null;
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray5);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray5, doubleArray16);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray5);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5, 0);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray29);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray31);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = null;
        double[] doubleArray42 = new double[] {};
        double[][] doubleArray43 = new double[][] { doubleArray42 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray31, orderDirection41, doubleArray43);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray30, doubleArray43);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException46 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection1, doubleArray43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray25);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(3.6980755448772024E16d, doubleArray25);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale(2.44486738237762E24d, doubleArray25);
        java.lang.String[] strArray31 = new java.lang.String[] { "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 34 and 35 are not strictly increasing (-1 >= 0)", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray31, orderDirection32, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException38 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int39 = nonMonotonicSequenceException38.getIndex();
        java.lang.Number number40 = nonMonotonicSequenceException38.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = nonMonotonicSequenceException38.getDirection();
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray31, orderDirection41, false);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray44);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = null;
        double[] doubleArray55 = new double[] {};
        double[][] doubleArray56 = new double[][] { doubleArray55 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray44, orderDirection54, doubleArray56);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray28, orderDirection41, doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertEquals("'" + number40 + "' != '" + (short) -1 + "'", number40, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.5882650109042066E8d, 35004.487016091036d, 1.771933898620068E12d, 5.8507310306748435E7d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0367109200925105E20d + "'", double4 == 1.0367109200925105E20d);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray24);
        double[] doubleArray29 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        double[] doubleArray43 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray43);
        double[] doubleArray49 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray50 = new double[] {};
        double[] doubleArray57 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray57);
        double[] doubleArray63 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray63);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray49, doubleArray63);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray43, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray29, doubleArray65);
        double[] doubleArray69 = new double[] {};
        double[] doubleArray76 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double77 = org.apache.commons.math3.util.MathArrays.distance(doubleArray69, doubleArray76);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray69);
        double[] doubleArray80 = new double[] {};
        double[] doubleArray87 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double88 = org.apache.commons.math3.util.MathArrays.distance(doubleArray80, doubleArray87);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray80);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray69, doubleArray80);
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray29, doubleArray80);
        double double92 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray24, doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray54);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray54);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray54);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray54);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray68, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(1000.0d, 131.0d, 2.965179423548113E10d, 3.014877405643864E7d, 149850.0d, 6.027399917927703E17d, (double) 100, 592223.5148398954d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.032148173539147E22d + "'", double8 == 9.032148173539147E22d);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        int[] intArray16 = new int[] {};
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 10);
        int int19 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray13, intArray16);
        int[] intArray24 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray24);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray13);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        int[] intArray30 = new int[] {};
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (byte) 10);
        int int33 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray27, intArray30);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        int[] intArray37 = new int[] {};
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (byte) 10);
        double double40 = org.apache.commons.math3.util.MathArrays.distance(intArray34, intArray39);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 0);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 0);
        int[] intArray46 = new int[] {};
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (byte) 10);
        int int49 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray43, intArray46);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, 0);
        int int52 = org.apache.commons.math3.util.MathArrays.distance1(intArray30, intArray46);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray46);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray14 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray14, doubleArray50);
        double[] doubleArray53 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray53);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray53);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray14, (double) 1.0f);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray1, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, (int) (byte) 1);
        double[] doubleArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray60, doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 0);
        int int20 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray10);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray23 = new int[] {};
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (byte) 10);
        int[] intArray26 = new int[] {};
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (byte) 10);
        int int29 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray26);
        int[] intArray34 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(intArray23, intArray34);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) 'a');
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray23);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((-4.485245857677034E7d), 0.0d, 3.294098878135474E13d, 9700.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.1952759117914099E17d + "'", double4 == 3.1952759117914099E17d);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray28);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52);
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray52);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52, 0);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale(1.1447570161086189E21d, doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.lang.String[] strArray0 = null;
        double[] doubleArray8 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray9 = new double[] {};
        double[] doubleArray16 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray16);
        double[] doubleArray22 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray22);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray8, doubleArray22);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException28 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = nonMonotonicSequenceException28.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException33 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = nonMonotonicSequenceException33.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException38 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = nonMonotonicSequenceException38.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException48 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = nonMonotonicSequenceException48.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException53 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = nonMonotonicSequenceException53.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray55 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection29, orderDirection34, orderDirection39, orderDirection44, orderDirection49, orderDirection54 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException59 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = nonMonotonicSequenceException59.getDirection();
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray55, orderDirection60, false);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray8, orderDirection60, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException66 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) (short) 100, (int) 'a', orderDirection60, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray0, orderDirection60, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection54 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection54.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray55);
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        long[][] longArray0 = new long[][] {};
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray0);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((-1.5391999E7d), 8.124367555052212E29d, 14800.0d, 7.662323436338385E15d, 3502.15662128352d, 3200.0d, 2.46450142017715904E17d, 9701.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.2505025728299607E37d) + "'", double8 == (-1.2505025728299607E37d));
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException40 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = nonMonotonicSequenceException40.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException45 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection46 = nonMonotonicSequenceException45.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = nonMonotonicSequenceException60.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = nonMonotonicSequenceException65.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray67 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection41, orderDirection46, orderDirection51, orderDirection56, orderDirection61, orderDirection66 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException71 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = nonMonotonicSequenceException71.getDirection();
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray67, orderDirection72, false);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray20, orderDirection72, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException78 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 10L, 0, orderDirection72, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException80 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 3.3959797E9d, (java.lang.Number) 1122.6359838746732d, (int) (byte) 0, orderDirection72, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection72, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection46.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray67);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double double10 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(8730.0d, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8);
        double[] doubleArray18 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        double[] doubleArray32 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray32);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray18, doubleArray32);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray54 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        double[] doubleArray68 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray54, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray32, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray32);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException77 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = nonMonotonicSequenceException77.getDirection();
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray32, orderDirection78, true, false);
        double[] doubleArray83 = new double[] { (-6.826219102159232E19d) };
        double[] doubleArray85 = new double[] { (-6.826219102159232E19d) };
        double[] doubleArray87 = new double[] { (-6.826219102159232E19d) };
        double[][] doubleArray88 = new double[][] { doubleArray83, doubleArray85, doubleArray87 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray12, orderDirection78, doubleArray88);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 1 != 6");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 113.16359838746733d + "'", double10 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 20.0d + "'", double72 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-6.826219102159232E19]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-6.826219102159232E19]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-6.826219102159232E19]");
        org.junit.Assert.assertNotNull(doubleArray88);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection44, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException47 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable0, localizable1, (java.lang.Object[]) orderDirectionArray32);
        org.apache.commons.math3.exception.NotPositiveException notPositiveException49 = new org.apache.commons.math3.exception.NotPositiveException((java.lang.Number) (-1));
        java.lang.Throwable[] throwableArray50 = notPositiveException49.getSuppressed();
        mathIllegalStateException47.addSuppressed((java.lang.Throwable) notPositiveException49);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection55 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException57 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection55, false);
        int int58 = nonMonotonicSequenceException57.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException57.getDirection();
        java.lang.Number number60 = nonMonotonicSequenceException57.getPrevious();
        notPositiveException49.addSuppressed((java.lang.Throwable) nonMonotonicSequenceException57);
        boolean boolean62 = notPositiveException49.getBoundIsAllowed();
        org.apache.commons.math3.exception.MathInternalError mathInternalError63 = new org.apache.commons.math3.exception.MathInternalError((java.lang.Throwable) notPositiveException49);
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(orderDirection59);
        org.junit.Assert.assertEquals("'" + number60 + "' != '" + 10.0f + "'", number60, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        double[] doubleArray0 = null;
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection1 = null;
        double[] doubleArray3 = new double[] { 9700.0d };
        double[] doubleArray5 = new double[] { 9700.0d };
        double[] doubleArray7 = new double[] { 9700.0d };
        double[][] doubleArray8 = new double[][] { doubleArray3, doubleArray5, doubleArray7 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection1, doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[9700.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[9700.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[9700.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, 52);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15);
        int[] intArray17 = new int[] {};
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) 10);
        int[] intArray20 = new int[] {};
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, (int) (byte) 10);
        double double23 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray22);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (short) 0);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (byte) 0);
        int[] intArray29 = new int[] {};
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 10);
        int[] intArray32 = new int[] {};
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (byte) 10);
        double double35 = org.apache.commons.math3.util.MathArrays.distance(intArray29, intArray34);
        int int36 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray28, intArray34);
        int[] intArray37 = new int[] {};
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (byte) 10);
        int[] intArray40 = new int[] {};
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (byte) 10);
        int int43 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray37, intArray40);
        int[] intArray48 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(intArray37, intArray48);
        int int50 = org.apache.commons.math3.util.MathArrays.distance1(intArray28, intArray48);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51);
        int[] intArray53 = new int[] {};
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (byte) 10);
        int[] intArray56 = new int[] {};
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (byte) 10);
        int int59 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray53, intArray56);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) ' ');
        int[] intArray62 = new int[] {};
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) (byte) 10);
        int[] intArray65 = new int[] {};
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (byte) 10);
        double double68 = org.apache.commons.math3.util.MathArrays.distance(intArray62, intArray67);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) (short) 0);
        int[] intArray72 = new int[] {};
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (byte) 10);
        int[] intArray75 = new int[] {};
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (byte) 10);
        double double78 = org.apache.commons.math3.util.MathArrays.distance(intArray72, intArray77);
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (short) 0);
        int int82 = org.apache.commons.math3.util.MathArrays.distance1(intArray62, intArray72);
        int[] intArray84 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, 1);
        double double85 = org.apache.commons.math3.util.MathArrays.distance(intArray53, intArray72);
        int[] intArray86 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72);
        int int87 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray52, intArray86);
        int[] intArray89 = org.apache.commons.math3.util.MathArrays.copyOf(intArray86, 52);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = org.apache.commons.math3.util.MathArrays.distance(intArray15, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        double[] doubleArray0 = null;
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray37, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray21, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray21);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException66 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection67 = nonMonotonicSequenceException66.getDirection();
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray21, orderDirection67, true, false);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.scale(4425.0d, doubleArray21);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 20.0d + "'", double61 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection67 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection67.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[442500.0, 1.54875E7, 4425.0, 44250.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[442500.0, 1.54875E7, 4425.0, 44250.0]");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(149850.0d, doubleArray3);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray15);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray15);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray4, 0.0d);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray25);
        double double35 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray25);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray39);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, 0);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray39);
        double double52 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray51);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray25, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 52, doubleArray51);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray22, doubleArray51);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -0.0, 0.0, 0.0]");
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = null;
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray44);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray55);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray55);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray42, doubleArray44);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double double72 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1630.0003067484374d + "'", double72 == 1630.0003067484374d);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 3.6980755448772024E16d, 3502020.0d, 0.0d, 0.0d, 1.2943264407073658E20d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, 1.771933898620068E12d);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, (int) (short) 100);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray22, 6.45483024298582E8d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.787546453333099E7, 6.256412586665846E8, 178754.6453333099, 1787546.453333099]");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        double[] doubleArray6 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        double[] doubleArray20 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray6, doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray20, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray20);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = nonMonotonicSequenceException65.getDirection();
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20, orderDirection66, true, false);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.scale(4425.0d, doubleArray20);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray70);
        double[] doubleArray72 = null;
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray71, doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 20.0d + "'", double60 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[442500.0, 1.54875E7, 4425.0, 44250.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[442500.0, 1.54875E7, 4425.0, 44250.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException13 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = nonMonotonicSequenceException13.getDirection();
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection14, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException17 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) strArray9);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray23, orderDirection28, false);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection28, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException34 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 131.0d, (java.lang.Number) (-1040.0d), (int) ' ', orderDirection28, false);
        boolean boolean35 = nonMonotonicSequenceException34.getStrict();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + orderDirection14 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection14.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection22, false);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray13, orderDirection22, true);
        double[] doubleArray31 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        double[] doubleArray45 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray31, doubleArray45);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray45, 1.771933898620068E12d);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray13, doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[4.907044859097392E12, 3.434931401368174E14, 6.011228093291486E15, 4.416340373187652E12, 3.434980471816765E13, 9.814089718194782E9, 4.907044859097391E10]");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(100.0d, 1.8249340004401165E49d, 1.5882650109042066E8d, (double) 35, 1.0d, 700.0d, 3500.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.8249340004401166E51d + "'", double8 == 1.8249340004401166E51d);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        double[] doubleArray4 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray24 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray24, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray4, doubleArray40);
        double[] doubleArray43 = null;
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray45);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray63 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray56);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray56);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray43, doubleArray45);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray4, doubleArray69);
        double[] doubleArray73 = new double[] {};
        double[] doubleArray80 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray80);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray73);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray73);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray4, doubleArray73);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray4, 2.0064935685221478E15d);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale(5.576007702658434E8d, doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 2.0077253018361575E15, -1.2317333140099126E12]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 1.1195091747860643E24, -6.868154446540272E20]");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        long[] longArray6 = new long[] { 35, '4', 97, 10, 97, ' ' };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[35, 52, 97, 10, 97, 32]");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray15);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray25);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(5100.0d, doubleArray25);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((-1.5391999E7d), doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) 'a');
        int[] intArray15 = new int[] {};
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (byte) 10);
        int[] intArray18 = new int[] {};
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 10);
        int int21 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray15, intArray18);
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        int[] intArray25 = new int[] {};
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (byte) 10);
        double double28 = org.apache.commons.math3.util.MathArrays.distance(intArray22, intArray27);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 0);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (byte) 0);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        int int37 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray34);
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, 0);
        int int40 = org.apache.commons.math3.util.MathArrays.distance1(intArray18, intArray34);
        int[] intArray41 = new int[] {};
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41, (int) (byte) 10);
        int[] intArray44 = new int[] {};
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (byte) 10);
        double double47 = org.apache.commons.math3.util.MathArrays.distance(intArray41, intArray46);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        int int51 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray41);
        int int52 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray41);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        float[] floatArray12 = new float[] { 10L, 10 };
        float[] floatArray13 = new float[] {};
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray12, floatArray13);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray13);
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray20);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray12);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, 0);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12);
        int[] intArray20 = new int[] {};
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray20, (int) (byte) 10);
        int[] intArray23 = new int[] {};
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (byte) 10);
        double double26 = org.apache.commons.math3.util.MathArrays.distance(intArray20, intArray25);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        int[] intArray30 = new int[] {};
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray30, (int) (byte) 10);
        double double33 = org.apache.commons.math3.util.MathArrays.distance(intArray27, intArray32);
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (short) 0);
        int int37 = org.apache.commons.math3.util.MathArrays.distance1(intArray20, intArray36);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray19, intArray36);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException12 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = nonMonotonicSequenceException12.getDirection();
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray8, orderDirection13, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException16 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) strArray8);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException17 = new org.apache.commons.math3.exception.MathArithmeticException(localizable1, (java.lang.Object[]) strArray8);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException18 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) strArray8);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        double[] doubleArray6 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        double[] doubleArray20 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray20);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray6, doubleArray20);
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double double60 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray20, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray20);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale(6654464.168026618d, doubleArray20);
        double double63 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray20);
        java.lang.Number number68 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException76 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = nonMonotonicSequenceException76.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException79 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (-1L), (java.lang.Number) 350101.0d, (int) ' ', orderDirection77, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException81 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 43127.36401612533d, number68, (int) 'a', orderDirection77, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException83 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 0, (java.lang.Number) (byte) -1, 52, orderDirection77, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray20, orderDirection77, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (3,500 >= 1)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 20.0d + "'", double60 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[6.654464168026618E8, 2.3290624588093163E10, 6654464.168026618, 6.654464168026618E7]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3501.442702658434d + "'", double63 == 3501.442702658434d);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray15);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15);
        double double41 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.scale(3500.0d, doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3501.442702658434d + "'", double41 == 3501.442702658434d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[350000.0, 1.225E7, 3500.0, 35000.0]");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        long[] longArray3 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray7 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray11 = new long[] { 1L, '#', (byte) -1 };
        long[][] longArray12 = new long[][] { longArray3, longArray7, longArray11 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: -1 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray12);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray30 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray30, doubleArray44);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 1);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = nonMonotonicSequenceException60.getDirection();
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray56, orderDirection61, false);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray49, orderDirection61, true, false);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray74 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray74);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray67);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = null;
        double[] doubleArray78 = new double[] {};
        double[][] doubleArray79 = new double[][] { doubleArray78 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray67, orderDirection77, doubleArray79);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection61, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray82);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException87 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = nonMonotonicSequenceException87.getDirection();
        java.lang.Number number89 = nonMonotonicSequenceException87.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = nonMonotonicSequenceException87.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray82, orderDirection90, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection88 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection88.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number89 + "' != '" + (short) -1 + "'", number89, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection90 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection90.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException3 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1, number1, 1);
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        org.apache.commons.math3.exception.util.Localizable localizable5 = null;
        org.apache.commons.math3.exception.util.Localizable localizable6 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray12, orderDirection17, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException20 = new org.apache.commons.math3.exception.NullArgumentException(localizable6, (java.lang.Object[]) strArray12);
        org.apache.commons.math3.exception.MathInternalError mathInternalError21 = new org.apache.commons.math3.exception.MathInternalError(localizable5, (java.lang.Object[]) strArray12);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException22 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException3, localizable4, (java.lang.Object[]) strArray12);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext23 = mathIllegalStateException22.getContext();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionContext23);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3.055555359092974E13d, 9701.0d, 3.1952759117914099E17d, 5.704950338144193E21d, 1630.0003067484374d, 5100.0d, 3502.15662128352d, 3501.442702658434d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.8228890393438397E39d + "'", double8 == 1.8228890393438397E39d);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.455117104200171E14d, 3502020.0d, 14800.0d, 2.458577578238662E16d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 8.734544017044303E20d + "'", double4 == 8.734544017044303E20d);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        double[] doubleArray5 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray5, doubleArray19);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double double59 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray19, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray19);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray62);
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray19, doubleArray71);
        double[] doubleArray75 = new double[] {};
        double[] doubleArray82 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double83 = org.apache.commons.math3.util.MathArrays.distance(doubleArray75, doubleArray82);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray75);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray75);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray75);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.scale((double) 10, doubleArray75);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray87);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 4 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 20.0d + "'", double59 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double double45 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1630.0003067484374d + "'", double45 == 1630.0003067484374d);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int[] intArray15 = new int[] {};
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray15, (int) (byte) 10);
        double double18 = org.apache.commons.math3.util.MathArrays.distance(intArray12, intArray17);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12);
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (short) 0);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 0);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray29);
        int int31 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray29);
        int[] intArray32 = new int[] {};
        int[] intArray34 = org.apache.commons.math3.util.MathArrays.copyOf(intArray32, (int) (byte) 10);
        int[] intArray35 = new int[] {};
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (byte) 10);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray32, intArray35);
        int[] intArray43 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(intArray32, intArray43);
        int int45 = org.apache.commons.math3.util.MathArrays.distance1(intArray23, intArray43);
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23);
        int int47 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray23);
        int[] intArray48 = new int[] {};
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48, (int) (byte) 10);
        int[] intArray51 = new int[] {};
        int[] intArray53 = org.apache.commons.math3.util.MathArrays.copyOf(intArray51, (int) (byte) 10);
        int int54 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray48, intArray51);
        int[] intArray59 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(intArray48, intArray59);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray48);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) '#');
        int int65 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray64);
        int[] intArray66 = new int[] {};
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (byte) 10);
        int[] intArray69 = new int[] {};
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray69, (int) (byte) 10);
        double double72 = org.apache.commons.math3.util.MathArrays.distance(intArray66, intArray71);
        int[] intArray73 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66);
        int int75 = org.apache.commons.math3.util.MathArrays.distance1(intArray9, intArray66);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(350101.0d, 9700.0d, 4.547240950625534E12d, 101.0d, (-9.321539453695937E49d), (-6.826219102159232E19d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 6.3630870680350135E69d + "'", double6 == 6.3630870680350135E69d);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray4);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(149850.0d, doubleArray4);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray36);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(doubleArray4, doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray0, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(2.8385755681000004E10d, 3.501122702658434E7d, 2.3669752669971016E8d, (double) (-1.0f), 2.7448749041980247E40d, 5.8507310306748435E7d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.605952477731202E48d + "'", double6 == 1.605952477731202E48d);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray54);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray43, doubleArray54);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray3, doubleArray54);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray54);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, 0);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = nonMonotonicSequenceException32.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection48 = nonMonotonicSequenceException47.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = nonMonotonicSequenceException52.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray54 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection28, orderDirection33, orderDirection38, orderDirection43, orderDirection48, orderDirection53 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException58.getDirection();
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray54, orderDirection59, false);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray7, orderDirection59, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) (short) 100, (int) 'a', orderDirection59, true);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext66 = nonMonotonicSequenceException65.getContext();
        org.apache.commons.math3.exception.util.Localizable localizable67 = null;
        org.apache.commons.math3.exception.util.Localizable localizable68 = null;
        org.apache.commons.math3.exception.util.Localizable localizable69 = null;
        long[] longArray70 = new long[] {};
        long[] longArray71 = new long[] {};
        long[][] longArray72 = new long[][] { longArray70, longArray71 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray72);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray72);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException75 = new org.apache.commons.math3.exception.NullArgumentException(localizable69, (java.lang.Object[]) longArray72);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException76 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable68, (java.lang.Object[]) longArray72);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException77 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException65, localizable67, (java.lang.Object[]) longArray72);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection48 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection48.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray54);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(exceptionContext66);
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[]");
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[]");
        org.junit.Assert.assertNotNull(longArray72);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 'a', doubleArray8);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException41 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = nonMonotonicSequenceException41.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray35, orderDirection42, false, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 52.0d, 1, orderDirection42, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 2.46450142017715904E17d, (java.lang.Number) 100, (int) (short) 1, orderDirection42, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray8, orderDirection42, false, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 2 and 3 are not increasing (5,044 > 970)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-97.0, 97.0, 5044.0, 970.0, 9700.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        double[] doubleArray0 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException4 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) (short) 1, 0);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection5 = nonMonotonicSequenceException4.getDirection();
        double[] doubleArray7 = new double[] {};
        double[] doubleArray14 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray7, doubleArray14);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray7);
        org.apache.commons.math3.exception.util.Localizable localizable17 = null;
        double[] doubleArray18 = null;
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray20);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray31);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray20, doubleArray31);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray18, doubleArray20);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray20, 0);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray44);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray53 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray53);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray46);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = null;
        double[] doubleArray57 = new double[] {};
        double[][] doubleArray58 = new double[][] { doubleArray57 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray46, orderDirection56, doubleArray58);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray45, doubleArray58);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException61 = new org.apache.commons.math3.exception.NullArgumentException(localizable17, (java.lang.Object[]) doubleArray58);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray7, doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection5, doubleArray58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.scale((double) (short) -1, doubleArray23);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException28 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        int int29 = nonMonotonicSequenceException28.getIndex();
        java.lang.Throwable[] throwableArray30 = nonMonotonicSequenceException28.getSuppressed();
        java.lang.Number number31 = nonMonotonicSequenceException28.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException28.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray24, orderDirection32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + 10 + "'", number31, 10);
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray23);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray28);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray39);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray39);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale(3.6980755448772024E16d, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray51);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        double[] doubleArray1 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        double[] doubleArray16 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray16);
        double[] doubleArray22 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray22, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray16, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 1);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray62 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray63 = new double[] {};
        double[] doubleArray70 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double71 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray70);
        double[] doubleArray76 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double77 = org.apache.commons.math3.util.MathArrays.distance(doubleArray63, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray62, doubleArray76);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray56, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray56);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray80);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray82);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray82);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray82);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException89 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection90 = nonMonotonicSequenceException89.getDirection();
        java.lang.Number number91 = nonMonotonicSequenceException89.getPrevious();
        int int92 = nonMonotonicSequenceException89.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection93 = nonMonotonicSequenceException89.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray82, orderDirection93, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not strictly increasing (0 >= 0)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + orderDirection90 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection90.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number91 + "' != '" + (short) -1 + "'", number91, (short) -1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + orderDirection93 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection93.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 0);
        int int20 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray10);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, 1);
        int[] intArray23 = new int[] {};
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (byte) 10);
        int[] intArray26 = new int[] {};
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (byte) 10);
        int int29 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray26);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray22, intArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray27);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(149850.0d, doubleArray27);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray2, doubleArray27);
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4, 0);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray4);
        double double17 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray16);
        double[] doubleArray22 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray42 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        double[] doubleArray56 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray42, doubleArray56);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray36, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray22, doubleArray58);
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray61);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray22, doubleArray61);
        double double64 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray22);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.scale(8.313043701941666E25d, doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        double[] doubleArray28 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray28);
        double[] doubleArray34 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray34, doubleArray48);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray28, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28, 1);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray53);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54, (int) (short) 100);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray54);
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray59);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray59);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray54, doubleArray70);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        java.lang.Number number5 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException7 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 3502020.0d, number5, true);
        double[] doubleArray9 = new double[] {};
        double[] doubleArray16 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray16);
        double[] doubleArray22 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray22);
        double[] doubleArray28 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        double[] doubleArray42 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray42);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray28, doubleArray42);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray22, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray22);
        double[] doubleArray47 = new double[] {};
        double[] doubleArray54 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray54);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray47);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray46, doubleArray47);
        org.apache.commons.math3.exception.util.Localizable localizable58 = null;
        long[] longArray59 = new long[] {};
        long[] longArray60 = new long[] {};
        long[][] longArray61 = new long[][] { longArray59, longArray60 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray61);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray61);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray61);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException65 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable58, (java.lang.Object[]) longArray61);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException71 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection69, false);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext72 = nonMonotonicSequenceException71.getContext();
        mathIllegalArgumentException65.addSuppressed((java.lang.Throwable) nonMonotonicSequenceException71);
        boolean boolean74 = nonMonotonicSequenceException71.getStrict();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException78 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        java.lang.Object[] objArray79 = new java.lang.Object[] { true, boolean57, nonMonotonicSequenceException71, (short) 0 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException80 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable3, objArray79);
        org.apache.commons.math3.exception.MathInternalError mathInternalError81 = new org.apache.commons.math3.exception.MathInternalError(localizable2, objArray79);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException82 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, objArray79);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException83 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, objArray79);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertNotNull(exceptionContext72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[true, false, org.apache.commons.math3.exception.NonMonotonicSequenceException: points -1 and 0 are not decreasing (10 < 10), 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[true, false, org.apache.commons.math3.exception.NonMonotonicSequenceException: points -1 and 0 are not decreasing (10 < 10), 0]");
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray30 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray30, doubleArray44);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 1);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = nonMonotonicSequenceException60.getDirection();
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray56, orderDirection61, false);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray49, orderDirection61, true, false);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray74 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray67, doubleArray74);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray67);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = null;
        double[] doubleArray78 = new double[] {};
        double[][] doubleArray79 = new double[][] { doubleArray78 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray67, orderDirection77, doubleArray79);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray0, orderDirection61, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray82, 0);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray82, orderDirection85, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection61.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double double15 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray14);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        double[] doubleArray53 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray53);
        double[] doubleArray59 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray60 = new double[] {};
        double[] doubleArray67 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray67);
        double[] doubleArray73 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray60, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray59, doubleArray73);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray53, doubleArray75);
        double double77 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray37, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray37);
        double[] doubleArray79 = null;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray37, doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 20.0d + "'", double77 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        int[] intArray3 = new int[] { 0, (byte) 10, 10 };
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) '4');
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) 10);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int int13 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray10);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) ' ');
        int[] intArray16 = new int[] {};
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 10);
        int[] intArray19 = new int[] {};
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 10);
        double double22 = org.apache.commons.math3.util.MathArrays.distance(intArray16, intArray21);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (short) 0);
        int[] intArray26 = new int[] {};
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (byte) 10);
        int[] intArray29 = new int[] {};
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray29, (int) (byte) 10);
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray26, intArray31);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (short) 0);
        int int36 = org.apache.commons.math3.util.MathArrays.distance1(intArray16, intArray26);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, 1);
        double double39 = org.apache.commons.math3.util.MathArrays.distance(intArray7, intArray26);
        int[] intArray43 = new int[] { 0, (byte) 10, 10 };
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) '4');
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray26, intArray43);
        int[] intArray47 = new int[] {};
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (byte) 10);
        int[] intArray50 = new int[] {};
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (byte) 10);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(intArray47, intArray52);
        int[] intArray54 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray47, (int) (short) 0);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (byte) 0);
        int[] intArray59 = new int[] {};
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59, (int) (byte) 10);
        int int62 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray56, intArray59);
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray59, 0);
        int int65 = org.apache.commons.math3.util.MathArrays.distance1(intArray26, intArray64);
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64, (int) '4');
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray64, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int70 = org.apache.commons.math3.util.MathArrays.distance1(intArray5, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.math3.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math3.exception.NotPositiveException((java.lang.Number) 9700.0d);
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray6 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray10 = new long[] { 1L, '#', (byte) -1 };
        long[] longArray14 = new long[] { 1L, '#', (byte) -1 };
        long[][] longArray15 = new long[][] { longArray6, longArray10, longArray14 };
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray15);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException19 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) notPositiveException1, localizable2, (java.lang.Object[]) longArray15);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext20 = mathIllegalStateException19.getContext();
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1, 35, -1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(exceptionContext20);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        float[] floatArray12 = new float[] { 10L, 10 };
        float[] floatArray13 = new float[] {};
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray12, floatArray13);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray13);
        float[] floatArray16 = null;
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        float[] floatArray24 = new float[] { 10L, 10 };
        float[] floatArray25 = new float[] {};
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray25);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray25);
        float[] floatArray30 = new float[] { 10L, 10 };
        float[] floatArray31 = new float[] {};
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray30);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray30);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray16);
        float[] floatArray36 = null;
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray36);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray7);
        float[] floatArray41 = new float[] { 10L, 10 };
        float[] floatArray42 = new float[] {};
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray42);
        float[] floatArray46 = new float[] { 10L, 10 };
        float[] floatArray47 = new float[] {};
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray47);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray47);
        float[] floatArray50 = null;
        float[] floatArray53 = new float[] { 10L, 10 };
        float[] floatArray54 = new float[] {};
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray53, floatArray54);
        float[] floatArray58 = new float[] { 10L, 10 };
        float[] floatArray59 = new float[] {};
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(floatArray58, floatArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(floatArray53, floatArray59);
        float[] floatArray64 = new float[] { 10L, 10 };
        float[] floatArray65 = new float[] {};
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray53, floatArray64);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(floatArray50, floatArray64);
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray50);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray41);
        float[] floatArray73 = new float[] { 10L, 10 };
        float[] floatArray74 = new float[] {};
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equals(floatArray73, floatArray74);
        float[] floatArray78 = new float[] { 10L, 10 };
        float[] floatArray79 = new float[] {};
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray78, floatArray79);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray73, floatArray79);
        float[] floatArray84 = new float[] { 10L, 10 };
        float[] floatArray85 = new float[] {};
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(floatArray84, floatArray85);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray73, floatArray84);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray73);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray11);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray11);
        double[] doubleArray22 = null;
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(doubleArray11, doubleArray22);
        double[] doubleArray31 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        double[] doubleArray45 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray45);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray31, doubleArray45);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray55 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray55);
        double[] doubleArray61 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray61);
        double[] doubleArray67 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray68 = new double[] {};
        double[] doubleArray75 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray75);
        double[] doubleArray81 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray67, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray61, doubleArray83);
        double double85 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray45, doubleArray83);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray45);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException90 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = nonMonotonicSequenceException90.getDirection();
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray45, orderDirection91, true, false);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.scale(4425.0d, doubleArray45);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray95);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 97, doubleArray95);
        double double98 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 20.0d + "'", double85 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection91 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection91.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[4.29225E7, 1.5022875E9, 429225.0, 4292250.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[442500.0, 1.54875E7, 4425.0, 44250.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray3);
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray25 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double26 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray25);
        double double27 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray18);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray29);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray18, doubleArray29);
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray37 = new double[] {};
        double[] doubleArray44 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray44);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray44);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray55 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray55);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection58 = null;
        double[] doubleArray59 = new double[] {};
        double[][] doubleArray60 = new double[][] { doubleArray59 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray48, orderDirection58, doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray44, doubleArray60);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 6");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 113.16359838746733d + "'", double46 == 113.16359838746733d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray7, orderDirection12, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException15 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) strArray7);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException16 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) strArray7);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray7, orderDirection21, true);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray28);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray39);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray28, doubleArray39);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49, (int) 'a');
        double[] doubleArray52 = new double[] {};
        double[] doubleArray59 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray59);
        double[] doubleArray65 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray65);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException73 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection74 = nonMonotonicSequenceException73.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException76 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection74, false);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray65, orderDirection74, true);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray51, orderDirection74, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException82 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 100, (java.lang.Number) 2.479067448127025E15d, (int) (byte) 100, orderDirection74, false);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray7, orderDirection74, false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection74.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray40, (int) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray4 = new int[] {};
        int[] intArray6 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) (byte) 10);
        int[] intArray7 = new int[] {};
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) 10);
        int int10 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray4, intArray7);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray4, (int) ' ');
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        int[] intArray16 = new int[] {};
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 10);
        double double19 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray18);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (short) 0);
        int[] intArray23 = new int[] {};
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (byte) 10);
        int[] intArray26 = new int[] {};
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray26, (int) (byte) 10);
        double double29 = org.apache.commons.math3.util.MathArrays.distance(intArray23, intArray28);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, (int) (short) 0);
        int int33 = org.apache.commons.math3.util.MathArrays.distance1(intArray13, intArray23);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, 1);
        double double36 = org.apache.commons.math3.util.MathArrays.distance(intArray4, intArray23);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23);
        int int38 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray37);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double double15 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray14);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        java.lang.Number number22 = nonMonotonicSequenceException20.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = nonMonotonicSequenceException20.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray14, orderDirection23, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number22 + "' != '" + (short) -1 + "'", number22, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray47 = new double[] { (-9.321539453695937E49d), 52, ' ', 20.0d, (-1.2505025728299607E37d), (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double double48 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray38, doubleArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 1 != 6");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-9.321539453695937E49, 52.0, 32.0, 20.0, -1.2505025728299607E37, 10.0]");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(6.027399917927703E17d, 592223.5148398954d, 1.5882650109042066E8d, 58773.0d, 6.45483024298582E8d, 1.5882650109042066E8d, 1.254596E9d, (-1.009254E7d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.569568863411688E23d + "'", double8 == 3.569568863411688E23d);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.0371519499136968E20d, 0.0d, 3.0453200748680096E11d, 1.4570223113113662E20d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4.43709929416709E31d + "'", double4 == 4.43709929416709E31d);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray10 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, 35);
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) (short) 1);
        int[] intArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = org.apache.commons.math3.util.MathArrays.distance1(intArray5, intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1]");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray15 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        double[] doubleArray29 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray15, doubleArray29);
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        double[] doubleArray45 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double46 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray45);
        double[] doubleArray51 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray52 = new double[] {};
        double[] doubleArray59 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray59);
        double[] doubleArray65 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray52, doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray51, doubleArray65);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray45, doubleArray67);
        double double69 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray29, doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray0, doubleArray67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 20.0d + "'", double69 == 20.0d);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        double[] doubleArray40 = null;
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray14, doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.scale((double) (short) -1, doubleArray23);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray25);
        double[] doubleArray38 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray58 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        double[] doubleArray72 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray58, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray52, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray38, doubleArray74);
        double double77 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(doubleArray24, doubleArray38);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 1630.0, -1.0]");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException7 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection8 = nonMonotonicSequenceException7.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException12 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = nonMonotonicSequenceException12.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException17 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection18 = nonMonotonicSequenceException17.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException22 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = nonMonotonicSequenceException22.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = nonMonotonicSequenceException32.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray34 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection8, orderDirection13, orderDirection18, orderDirection23, orderDirection28, orderDirection33 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException38 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = nonMonotonicSequenceException38.getDirection();
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray34, orderDirection39, false);
        org.apache.commons.math3.exception.MathInternalError mathInternalError42 = new org.apache.commons.math3.exception.MathInternalError(localizable3, (java.lang.Object[]) orderDirectionArray34);
        java.lang.Number number43 = null;
        java.lang.Number number44 = null;
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException58.getDirection();
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray54, orderDirection59, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection59, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException65 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number43, number44, 0, orderDirection59, true);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray34, orderDirection59, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException69 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1L, (java.lang.Number) 32, 0, orderDirection59, true);
        boolean boolean70 = nonMonotonicSequenceException69.getStrict();
        java.lang.Number number71 = nonMonotonicSequenceException69.getPrevious();
        java.lang.Number number72 = nonMonotonicSequenceException69.getArgument();
        org.junit.Assert.assertTrue("'" + orderDirection8 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection8.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray34);
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + orderDirection59 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection59.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + number71 + "' != '" + 32 + "'", number71, 32);
        org.junit.Assert.assertEquals("'" + number72 + "' != '" + 1L + "'", number72, 1L);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 1);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray61 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray55, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray55);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray15, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray81);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException86 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection87 = nonMonotonicSequenceException86.getDirection();
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray81, orderDirection87, false);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray81);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale(2.458577578238662E16d, doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertTrue("'" + orderDirection87 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection87.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.6619984428893354E23, 5.816994550112674E24, 1.6619984428893355E21, 1.6619984428893355E22]");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale(3.3959797E9d, doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[3.3959797E11, 1.188592895E13, 3.3959797E9, 3.3959797E10]");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { 10L, 10 };
        float[] floatArray4 = new float[] {};
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray4);
        float[] floatArray8 = new float[] { 10L, 10 };
        float[] floatArray9 = new float[] {};
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray9);
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray9);
        boolean boolean12 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray9);
        float[] floatArray18 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray25 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray25);
        float[] floatArray29 = new float[] { 10L, 10 };
        float[] floatArray30 = new float[] {};
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray30);
        float[] floatArray34 = new float[] { 10L, 10 };
        float[] floatArray35 = new float[] {};
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray35);
        float[] floatArray39 = new float[] { 10L, 10 };
        float[] floatArray40 = new float[] {};
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray40);
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray30, floatArray34);
        float[] floatArray46 = new float[] { 10L, 10 };
        float[] floatArray47 = new float[] {};
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray47);
        float[] floatArray51 = new float[] { 10L, 10 };
        float[] floatArray52 = new float[] {};
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray52);
        float[] floatArray57 = new float[] { 10L, 10 };
        float[] floatArray58 = new float[] {};
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray57, floatArray58);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray46, floatArray57);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray46);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray30);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray30);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 0);
        int int20 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray10);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, 1);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray29);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 0);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (byte) 0);
        int[] intArray36 = new int[] {};
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 10);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray36);
        int int40 = org.apache.commons.math3.util.MathArrays.distance1(intArray10, intArray36);
        int[] intArray41 = new int[] {};
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41, (int) (byte) 10);
        int[] intArray44 = new int[] {};
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (byte) 10);
        double double47 = org.apache.commons.math3.util.MathArrays.distance(intArray41, intArray46);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41, (int) (short) 0);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (byte) 0);
        int[] intArray53 = new int[] {};
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (byte) 10);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray53);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, 0);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        double double60 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray11);
        double[] doubleArray21 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray0, doubleArray11);
        double double22 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray13 = new float[] { 10L, 10 };
        float[] floatArray14 = new float[] {};
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray13, floatArray14);
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray13);
        float[] floatArray17 = null;
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray2, floatArray17);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection4 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException6 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection4, false);
        int int7 = nonMonotonicSequenceException6.getIndex();
        org.apache.commons.math3.exception.util.Localizable localizable8 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException12 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = nonMonotonicSequenceException12.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException17 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection18 = nonMonotonicSequenceException17.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException22 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = nonMonotonicSequenceException22.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection33 = nonMonotonicSequenceException32.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray39 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection13, orderDirection18, orderDirection23, orderDirection28, orderDirection33, orderDirection38 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray39, orderDirection44, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException47 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException6, localizable8, (java.lang.Object[]) orderDirectionArray39);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException48 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) orderDirectionArray39);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext49 = mathArithmeticException48.getContext();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection23.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray39);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(exceptionContext49);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray46, orderDirection51, false);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection51, true, false);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.scale((double) 0L, doubleArray39);
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray59);
        double[] doubleArray70 = new double[] {};
        double[] doubleArray77 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray77);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray70);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray70);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double83 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray39, doubleArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray24 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray44 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray44, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray38, doubleArray60);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray24, doubleArray60);
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equals(doubleArray24, doubleArray63);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray4, doubleArray24);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray4, 2.458577578238662E16d);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray69, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.229288789119331E16, -1.229288789119331E15, 1.229288789119331E15, 1.229288789119331E16]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[10.0, -1.0, 1.0, 10.0]");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) 10);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        double double13 = org.apache.commons.math3.util.MathArrays.distance(intArray7, intArray12);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (short) 0);
        int int17 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray16);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 1L, doubleArray13);
        double[] doubleArray18 = new double[] { 1.2943264407073658E20d, 131.0d, 180469.0d };
        double[] doubleArray22 = new double[] { 1.2943264407073658E20d, 131.0d, 180469.0d };
        double[] doubleArray26 = new double[] { 1.2943264407073658E20d, 131.0d, 180469.0d };
        double[] doubleArray30 = new double[] { 1.2943264407073658E20d, 131.0d, 180469.0d };
        double[][] doubleArray31 = new double[][] { doubleArray18, doubleArray22, doubleArray26, doubleArray30 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray13, doubleArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 3 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.2943264407073658E20, 131.0, 180469.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.2943264407073658E20, 131.0, 180469.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.2943264407073658E20, 131.0, 180469.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.2943264407073658E20, 131.0, 180469.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 0);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray33 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray33);
        double[] doubleArray39 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray14, doubleArray26);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray12, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41);
        double[] doubleArray47 = new double[] {};
        double[] doubleArray54 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray47, doubleArray54);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray47);
        double[] doubleArray58 = new double[] {};
        double[] doubleArray65 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(doubleArray58, doubleArray65);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray58);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray47, doubleArray58);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.scale(3.6980755448772024E16d, doubleArray68);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray41, doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double double12 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray16);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 0);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray16);
        double double29 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray28);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray28);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray2, doubleArray28);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 52, doubleArray28);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray28);
        double[][] doubleArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray28, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3502.15662128352d, 3.502752702658434E7d, (-4.485245857677034E7d), 1.088956904358433E7d, (double) '#', 0.0d, 2.8385654801000005E8d, (double) '#');
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-4.882913375813631E14d) + "'", double8 == (-4.882913375813631E14d));
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        long[] longArray5 = new long[] {};
        long[] longArray6 = new long[] {};
        long[][] longArray7 = new long[][] { longArray5, longArray6 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray7);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable4, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable3, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable2, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException16 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException17 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray7);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = new int[] {};
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) 10);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        double double13 = org.apache.commons.math3.util.MathArrays.distance(intArray7, intArray12);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (short) 0);
        int int17 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray16);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        int[] intArray20 = null;
        int int21 = org.apache.commons.math3.util.MathArrays.distance1(intArray19, intArray20);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(3.501122702658434E7d, (double) 100.0f, 4.547240950625534E12d, 8.5773796374885857E18d, 0.0d, 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.9003411936649696E31d + "'", double6 == 3.9003411936649696E31d);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray14 = new int[] {};
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) (byte) 10);
        int[] intArray17 = new int[] {};
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) 10);
        double double20 = org.apache.commons.math3.util.MathArrays.distance(intArray14, intArray19);
        int int21 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray14);
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        int[] intArray25 = new int[] {};
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray25, (int) (byte) 10);
        double double28 = org.apache.commons.math3.util.MathArrays.distance(intArray22, intArray27);
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (short) 0);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (byte) 0);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        int[] intArray37 = new int[] {};
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (byte) 10);
        double double40 = org.apache.commons.math3.util.MathArrays.distance(intArray34, intArray39);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (short) 0);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 0);
        int[] intArray46 = new int[] {};
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (byte) 10);
        int[] intArray49 = new int[] {};
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (byte) 10);
        double double52 = org.apache.commons.math3.util.MathArrays.distance(intArray46, intArray51);
        int int53 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray45, intArray51);
        int[] intArray54 = new int[] {};
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54, (int) (byte) 10);
        int[] intArray57 = new int[] {};
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) (byte) 10);
        int int60 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray54, intArray57);
        int[] intArray65 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double66 = org.apache.commons.math3.util.MathArrays.distance(intArray54, intArray65);
        int int67 = org.apache.commons.math3.util.MathArrays.distance1(intArray45, intArray65);
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45);
        int int69 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray31, intArray45);
        double double70 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray31);
        int[] intArray76 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray78 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) ' ');
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, 35);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray76, (int) (short) 1);
        int int84 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray76);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray3);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray3);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.scale((double) 10, doubleArray3);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.scale(3.2706577531754132E18d, doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        double[] doubleArray0 = null;
        double[] doubleArray7 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        double[] doubleArray21 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray21);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray7, doubleArray21);
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray43 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray43, doubleArray57);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray37, doubleArray59);
        double double61 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray21, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray21);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException66 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection67 = nonMonotonicSequenceException66.getDirection();
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray21, orderDirection67, true, false);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.scale(4425.0d, doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 20.0d + "'", double61 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection67 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection67.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[442500.0, 1.54875E7, 4425.0, 44250.0]");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray37 = new double[] {};
        double[] doubleArray44 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray44);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(doubleArray36, doubleArray44);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException51 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        int int52 = nonMonotonicSequenceException51.getIndex();
        java.lang.Throwable[] throwableArray53 = nonMonotonicSequenceException51.getSuppressed();
        int int54 = nonMonotonicSequenceException51.getIndex();
        boolean boolean55 = nonMonotonicSequenceException51.getStrict();
        java.lang.Number number56 = nonMonotonicSequenceException51.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = nonMonotonicSequenceException51.getDirection();
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray36, orderDirection57, false, false);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 113.16359838746733d + "'", double46 == 113.16359838746733d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + number56 + "' != '" + 10 + "'", number56, 10);
        org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection57.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException14 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        java.lang.Class<?> wildcardClass13 = longArray4.getClass();
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException6 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = nonMonotonicSequenceException6.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray33 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection7, orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection38, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException44 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection45 = nonMonotonicSequenceException44.getDirection();
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection45, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 3.045319849820813E11d, (java.lang.Number) (-6.826219102159232E19d), 32, orderDirection45, false);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray33);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + orderDirection45 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection45.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray11 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray11);
        int[] intArray13 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 100);
        int[] intArray21 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) ' ');
        double double24 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray23);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(3.6980755448772024E16d, (double) 0L, 0.0d, (double) (byte) -1, 1.605952477731202E48d, 2.0064935685221478E15d, (double) 10, (double) (-1));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.2223333179198646E63d + "'", double8 == 3.2223333179198646E63d);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray27);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray31);
        double double41 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 0);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray33 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray33);
        double[] doubleArray39 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray14, doubleArray26);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray12, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41);
        double[] doubleArray48 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray49 = new double[] {};
        double[] doubleArray56 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray56);
        double[] doubleArray62 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray48, doubleArray62);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException68 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection69 = nonMonotonicSequenceException68.getDirection();
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray62, orderDirection69, false, false);
        double[][] doubleArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray43, orderDirection69, doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection69 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection69.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale(149850.0d, doubleArray2);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale((double) 10, doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 'a', doubleArray23);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray23, (-3.673176480644944E16d));
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray14, doubleArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 6");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-97.0, 97.0, 5044.0, 970.0, 9700.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[2.2673928892870025E14, -2.2673928892870025E14, -1.1790443024292412E16, -2.2673928892870025E15, -2.2673928892870028E16, -0.0]");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, (int) ' ');
        double[] doubleArray13 = null;
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray15 = null;
        double double16 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double double15 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray14);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14);
        org.apache.commons.math3.exception.util.Localizable localizable17 = null;
        org.apache.commons.math3.exception.util.Localizable localizable18 = null;
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException28 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = nonMonotonicSequenceException28.getDirection();
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray24, orderDirection29, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException32 = new org.apache.commons.math3.exception.NullArgumentException(localizable18, (java.lang.Object[]) strArray24);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException33 = new org.apache.commons.math3.exception.MathArithmeticException(localizable17, (java.lang.Object[]) strArray24);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray24, orderDirection38, true);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        org.apache.commons.math3.exception.util.Localizable localizable52 = null;
        double[] doubleArray53 = null;
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray55);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray73 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray66);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray55, doubleArray66);
        boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray53, doubleArray55);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55, 0);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        double[] doubleArray81 = new double[] {};
        double[] doubleArray88 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray81, doubleArray88);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray81);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection91 = null;
        double[] doubleArray92 = new double[] {};
        double[][] doubleArray93 = new double[][] { doubleArray92 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray81, orderDirection91, doubleArray93);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray80, doubleArray93);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException96 = new org.apache.commons.math3.exception.NullArgumentException(localizable52, (java.lang.Object[]) doubleArray93);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray42, doubleArray93);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray16, orderDirection38, doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        double[] doubleArray26 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray26);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray1, doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        long[] longArray2 = new long[] {};
        long[] longArray3 = new long[] {};
        long[][] longArray4 = new long[][] { longArray2, longArray3 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray4);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray4);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray4);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException11 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray4);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 0);
        int int20 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray10);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, 1);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray29);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 0);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (byte) 0);
        int[] intArray36 = new int[] {};
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 10);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray36);
        int int40 = org.apache.commons.math3.util.MathArrays.distance1(intArray10, intArray36);
        int[] intArray41 = new int[] {};
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41, (int) (byte) 10);
        int[] intArray44 = new int[] {};
        int[] intArray46 = org.apache.commons.math3.util.MathArrays.copyOf(intArray44, (int) (byte) 10);
        double double47 = org.apache.commons.math3.util.MathArrays.distance(intArray41, intArray46);
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray41, (int) (short) 0);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray50, (int) (byte) 0);
        int[] intArray53 = new int[] {};
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (byte) 10);
        int int56 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray50, intArray53);
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, 0);
        int[] intArray59 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        double double60 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray53);
        int[] intArray61 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray62 = new int[] {};
        int[] intArray64 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) (byte) 10);
        int[] intArray65 = new int[] {};
        int[] intArray67 = org.apache.commons.math3.util.MathArrays.copyOf(intArray65, (int) (byte) 10);
        double double68 = org.apache.commons.math3.util.MathArrays.distance(intArray62, intArray67);
        int[] intArray69 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62);
        int[] intArray71 = org.apache.commons.math3.util.MathArrays.copyOf(intArray62, (int) (short) 0);
        int[] intArray72 = new int[] {};
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (byte) 10);
        int[] intArray75 = new int[] {};
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (byte) 10);
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray75);
        int[] intArray83 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double84 = org.apache.commons.math3.util.MathArrays.distance(intArray72, intArray83);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72);
        double double86 = org.apache.commons.math3.util.MathArrays.distance(intArray62, intArray85);
        int[] intArray87 = org.apache.commons.math3.util.MathArrays.copyOf(intArray85);
        int int88 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray61, intArray85);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 'a', doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray8, (-3.673176480644944E16d));
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray12, 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-97.0, 97.0, 5044.0, 970.0, 9700.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2.2673928892870025E14, -2.2673928892870025E14, -1.1790443024292412E16, -2.2673928892870025E15, -2.2673928892870028E16, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray1 = new long[] {};
        long[] longArray2 = new long[] {};
        long[][] longArray3 = new long[][] { longArray1, longArray2 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray3);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray3);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray3);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException13 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection11, false);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext14 = nonMonotonicSequenceException13.getContext();
        mathIllegalArgumentException7.addSuppressed((java.lang.Throwable) nonMonotonicSequenceException13);
        java.lang.String str16 = nonMonotonicSequenceException13.toString();
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(exceptionContext14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.math3.exception.NonMonotonicSequenceException: points -1 and 0 are not decreasing (10 < 10)" + "'", str16, "org.apache.commons.math3.exception.NonMonotonicSequenceException: points -1 and 0 are not decreasing (10 < 10)");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        double[] doubleArray5 = new double[] { (short) 100, 8730.0d, 1630.0d, (-1.0d), 3500.0d };
        double[] doubleArray7 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray5, (int) (byte) 1);
        double[] doubleArray8 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray7);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray7, (int) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 8730.0, 1630.0, -1.0, 3500.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray27);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException33 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = nonMonotonicSequenceException33.getDirection();
        java.lang.Number number35 = nonMonotonicSequenceException33.getPrevious();
        int int36 = nonMonotonicSequenceException33.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException33.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray1, orderDirection37, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertEquals("'" + number35 + "' != '" + (short) -1 + "'", number35, (short) -1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray10 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(doubleArray1, doubleArray27);
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray30);
        double double41 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray27, doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException13 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException15 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray6);
        java.lang.Class<?> wildcardClass16 = mathIllegalArgumentException15.getClass();
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        boolean boolean2 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        double[] doubleArray10 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray10, doubleArray24);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException40 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = nonMonotonicSequenceException40.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException45 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection46 = nonMonotonicSequenceException45.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray57 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection31, orderDirection36, orderDirection41, orderDirection46, orderDirection51, orderDirection56 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException61 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = nonMonotonicSequenceException61.getDirection();
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray57, orderDirection62, false);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray10, orderDirection62, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException68 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 10L, 0, orderDirection62, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException70 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 3.3959797E9d, (java.lang.Number) 1122.6359838746732d, (int) (byte) 0, orderDirection62, false);
        java.lang.Number number71 = nonMonotonicSequenceException70.getPrevious();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection46.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray57);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + number71 + "' != '" + 1122.6359838746732d + "'", number71, 1122.6359838746732d);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray27);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray23);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray23, (int) (short) 100);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray64 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray65 = new double[] {};
        double[] doubleArray72 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray72);
        double[] doubleArray78 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray64, doubleArray78);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray58, doubleArray80);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray58, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection84 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray83, orderDirection84, true, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException89 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1630.0003067484374d, (java.lang.Number) 3.014877405643864E7d, 0, orderDirection84, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray23, orderDirection84, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection84 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection84.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        double[] doubleArray3 = new double[] { 2.368107225096932E68d, (-568774.0d), 5.675795142957666E11d };
        double[] doubleArray5 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray3, 8567.364016125326d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[2.368107225096932E68, -568774.0, 5.675795142957666E11]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[8567.364016125326, -2.0577167491679807E-59, 2.053395325825418E-53]");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        int[] intArray5 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5, (int) ' ');
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 35, 52, 0, 10]");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray27, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray27);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray51);
        double[] doubleArray59 = new double[] { (short) 100, 8730.0d, 1630.0d, (-1.0d), 3500.0d };
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray59, (int) (byte) 1);
        double double62 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray51, doubleArray59);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, 0.0d);
        double[] doubleArray66 = new double[] {};
        double[] doubleArray73 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray73);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray66);
        boolean boolean76 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray51, doubleArray66);
        java.lang.Class<?> wildcardClass77 = doubleArray51.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 8730.0, 1630.0, -1.0, 3500.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 180469.0d + "'", double62 == 180469.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray7, orderDirection12, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException15 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) strArray7);
        org.apache.commons.math3.exception.MathInternalError mathInternalError16 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) strArray7);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext17 = mathInternalError16.getContext();
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException21 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 1300.0d, (java.lang.Number) (byte) 100, false);
        mathInternalError16.addSuppressed((java.lang.Throwable) numberIsTooSmallException21);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionContext17);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray8);
        float[] floatArray13 = new float[] { 10L, 10 };
        float[] floatArray14 = new float[] {};
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray13, floatArray14);
        float[] floatArray18 = new float[] { 10L, 10 };
        float[] floatArray19 = new float[] {};
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray19);
        float[] floatArray23 = new float[] { 10L, 10 };
        float[] floatArray24 = new float[] {};
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equals(floatArray23, floatArray24);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray24);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray14, floatArray18);
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray8, floatArray18);
        float[] floatArray31 = new float[] { 10L, 10 };
        float[] floatArray32 = new float[] {};
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray32);
        float[] floatArray36 = new float[] { 10L, 10 };
        float[] floatArray37 = new float[] {};
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(floatArray36, floatArray37);
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.equals(floatArray31, floatArray37);
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray31);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException9 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException10 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathInternalError mathInternalError11 = new org.apache.commons.math3.exception.MathInternalError(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathInternalError mathInternalError12 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray19 = new int[] {};
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 10);
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        double double25 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray24);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (short) 0);
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray9, intArray19);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, 1);
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray19);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray34 = new int[] {};
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) (byte) 10);
        int[] intArray37 = new int[] {};
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (byte) 10);
        int int40 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray34, intArray37);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray34, (int) ' ');
        int[] intArray43 = new int[] {};
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 10);
        int[] intArray46 = new int[] {};
        int[] intArray48 = org.apache.commons.math3.util.MathArrays.copyOf(intArray46, (int) (byte) 10);
        double double49 = org.apache.commons.math3.util.MathArrays.distance(intArray43, intArray48);
        int[] intArray50 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43);
        int[] intArray52 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (short) 0);
        int[] intArray53 = new int[] {};
        int[] intArray55 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (byte) 10);
        int[] intArray56 = new int[] {};
        int[] intArray58 = org.apache.commons.math3.util.MathArrays.copyOf(intArray56, (int) (byte) 10);
        double double59 = org.apache.commons.math3.util.MathArrays.distance(intArray53, intArray58);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, (int) (short) 0);
        int int63 = org.apache.commons.math3.util.MathArrays.distance1(intArray43, intArray53);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray53, 1);
        double double66 = org.apache.commons.math3.util.MathArrays.distance(intArray34, intArray53);
        int[] intArray70 = new int[] { 0, (byte) 10, 10 };
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray70, (int) '4');
        double double73 = org.apache.commons.math3.util.MathArrays.distance(intArray53, intArray70);
        int[] intArray74 = new int[] {};
        int[] intArray76 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (byte) 10);
        int[] intArray77 = new int[] {};
        int[] intArray79 = org.apache.commons.math3.util.MathArrays.copyOf(intArray77, (int) (byte) 10);
        double double80 = org.apache.commons.math3.util.MathArrays.distance(intArray74, intArray79);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74);
        int[] intArray83 = org.apache.commons.math3.util.MathArrays.copyOf(intArray74, (int) (short) 0);
        int[] intArray85 = org.apache.commons.math3.util.MathArrays.copyOf(intArray83, (int) (byte) 0);
        int[] intArray86 = new int[] {};
        int[] intArray88 = org.apache.commons.math3.util.MathArrays.copyOf(intArray86, (int) (byte) 10);
        int int89 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray83, intArray86);
        int[] intArray91 = org.apache.commons.math3.util.MathArrays.copyOf(intArray86, 0);
        int int92 = org.apache.commons.math3.util.MathArrays.distance1(intArray53, intArray91);
        int[] intArray94 = org.apache.commons.math3.util.MathArrays.copyOf(intArray91, (int) '4');
        int int95 = org.apache.commons.math3.util.MathArrays.distance1(intArray19, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, 1.771933898620068E12d);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray22, (int) (short) 100);
        double[] doubleArray29 = new double[] { (short) -1, 5.56106705757928E43d, 52, 1630.0003067484374d };
        double double30 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray22, doubleArray29);
        java.lang.String[] strArray33 = new java.lang.String[] { "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 34 and 35 are not strictly increasing (-1 >= 0)", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray33, orderDirection34, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray29, orderDirection34, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 0 and 1 are not decreasing (-1 < 55,610,670,575,792,800,000,000,000,000,000,000,000,000,000)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 5.56106705757928E43, 52.0, 1630.0003067484374]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5.56106705757928E43d + "'", double30 == 5.56106705757928E43d);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException24 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection25 = nonMonotonicSequenceException24.getDirection();
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection25, false, false);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        double[] doubleArray42 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray42);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException53 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection51, false);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray42, orderDirection51, true);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray18, orderDirection51, false);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection25 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection25.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        double[] doubleArray29 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray29);
        double[] doubleArray35 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray36 = new double[] {};
        double[] doubleArray43 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray43);
        double[] doubleArray49 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray36, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray35, doubleArray49);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray29, doubleArray51);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray29);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray54);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray53, doubleArray54);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray54);
        double double66 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray2, doubleArray54);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException72 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) (-1), (int) (byte) 100, orderDirection70, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray2, orderDirection70, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + orderDirection70 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection70.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 1.0d);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray27);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray23);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray23, (int) (short) 100);
        double[] doubleArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray41, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        float[] floatArray5 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray12 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray12);
        float[] floatArray16 = new float[] { 10L, 10 };
        float[] floatArray17 = new float[] {};
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray17);
        float[] floatArray21 = new float[] { 10L, 10 };
        float[] floatArray22 = new float[] {};
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.equals(floatArray21, floatArray22);
        float[] floatArray26 = new float[] { 10L, 10 };
        float[] floatArray27 = new float[] {};
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.equals(floatArray26, floatArray27);
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(floatArray21, floatArray27);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray21);
        float[] floatArray33 = new float[] { 10L, 10 };
        float[] floatArray34 = new float[] {};
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray33, floatArray34);
        float[] floatArray38 = new float[] { 10L, 10 };
        float[] floatArray39 = new float[] {};
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.equals(floatArray38, floatArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(floatArray33, floatArray39);
        float[] floatArray44 = new float[] { 10L, 10 };
        float[] floatArray45 = new float[] {};
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(floatArray44, floatArray45);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray33, floatArray44);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray33);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(floatArray5, floatArray17);
        float[] floatArray50 = null;
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray50);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        long[] longArray0 = new long[] {};
        long[] longArray1 = new long[] {};
        long[][] longArray2 = new long[][] { longArray0, longArray1 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray5);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7);
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray12);
        int[] intArray20 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray20);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray7, intArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.lang.String[] strArray2 = new java.lang.String[] { "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 34 and 35 are not strictly increasing (-1 >= 0)", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection3, true);
        double[] doubleArray6 = new double[] {};
        double[] doubleArray13 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray13);
        double[] doubleArray19 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray6, doubleArray19);
        double[] doubleArray25 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray26 = new double[] {};
        double[] doubleArray33 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray33);
        double[] doubleArray39 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray25, doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray19, doubleArray41);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray19, 1);
        double double45 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray44);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray44, (double) (-1));
        java.lang.String[] strArray50 = new java.lang.String[] { "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 34 and 35 are not strictly increasing (-1 >= 0)", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray50, orderDirection51, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException57 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int58 = nonMonotonicSequenceException57.getIndex();
        java.lang.Number number59 = nonMonotonicSequenceException57.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = nonMonotonicSequenceException57.getDirection();
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray50, orderDirection60, false);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray44, orderDirection60, false);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray2, orderDirection60, true);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + orderDirection3 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection3.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertEquals("'" + number59 + "' != '" + (short) -1 + "'", number59, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException13 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = nonMonotonicSequenceException13.getDirection();
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection14, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException17 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) strArray9);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray23, orderDirection28, false);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray9, orderDirection28, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException34 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 131.0d, (java.lang.Number) (-1040.0d), (int) ' ', orderDirection28, false);
        java.lang.Class<?> wildcardClass35 = orderDirection28.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + orderDirection14 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection14.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 0L, 1.8249340004401165E49d, 2.368107225096932E68d, (double) 52, 7.662323436338385E15d, 2.8385654801000005E8d, (double) (short) 1, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.2314157570504045E70d + "'", double8 == 1.2314157570504045E70d);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 100, 5.576007650658434E9d, 0.0d, 58773.0d, 9.032148173539147E22d, (double) '4', 3.569568863411688E23d, 2.3669752669971016E8d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 8.449081683210125E31d + "'", double8 == 8.449081683210125E31d);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray30 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray50 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        double[] doubleArray64 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray50, doubleArray64);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray44, doubleArray66);
        double[] doubleArray68 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray30, doubleArray66);
        double[] doubleArray70 = new double[] {};
        double[] doubleArray77 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray70, doubleArray77);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray70);
        double[] doubleArray81 = new double[] {};
        double[] doubleArray88 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double89 = org.apache.commons.math3.util.MathArrays.distance(doubleArray81, doubleArray88);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray81);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray70, doubleArray81);
        boolean boolean92 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray30, doubleArray81);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray81);
        double[] doubleArray95 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray81, 0);
        double double96 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray26, doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        double[] doubleArray13 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray13, doubleArray27);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException33 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = nonMonotonicSequenceException33.getDirection();
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray27, orderDirection34, false, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException39 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 52.0d, 1, orderDirection34, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException41 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 2.46450142017715904E17d, (java.lang.Number) 100, (int) (short) 1, orderDirection34, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 9.032148173539147E22d, (java.lang.Number) 1.088956904358433E7d, (int) 'a', orderDirection34, false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException13 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        double[] doubleArray10 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray10, doubleArray24);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException40 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = nonMonotonicSequenceException40.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException45 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection46 = nonMonotonicSequenceException45.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray57 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection31, orderDirection36, orderDirection41, orderDirection46, orderDirection51, orderDirection56 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException61 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = nonMonotonicSequenceException61.getDirection();
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray57, orderDirection62, false);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray10, orderDirection62, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException68 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 20.0d, (java.lang.Number) 10L, 0, orderDirection62, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException70 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 3.3959797E9d, (java.lang.Number) 1122.6359838746732d, (int) (byte) 0, orderDirection62, false);
        boolean boolean71 = nonMonotonicSequenceException70.getStrict();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection46.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray57);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray24 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray24, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray4, doubleArray40);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray44);
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray55);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray44, doubleArray55);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray4, doubleArray55);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray55);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55, 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray0, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        boolean boolean2 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.DimensionMismatchException dimensionMismatchException3 = new org.apache.commons.math3.exception.DimensionMismatchException(localizable0, 1, 52);
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math3.exception.util.Localizable localizable6 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray37 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31, orderDirection36 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException41 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = nonMonotonicSequenceException41.getDirection();
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray37, orderDirection42, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException48 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = nonMonotonicSequenceException48.getDirection();
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray37, orderDirection49, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException52 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable5, localizable6, (java.lang.Object[]) orderDirectionArray37);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException59 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int60 = nonMonotonicSequenceException59.getIndex();
        java.lang.Number number61 = nonMonotonicSequenceException59.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection62 = nonMonotonicSequenceException59.getDirection();
        boolean boolean63 = nonMonotonicSequenceException59.getStrict();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection64 = nonMonotonicSequenceException59.getDirection();
        int int65 = nonMonotonicSequenceException59.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection66 = nonMonotonicSequenceException59.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException68 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 0.0f, (java.lang.Number) 43127.36401612533d, 35, orderDirection66, true);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray37, orderDirection66, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException71 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) dimensionMismatchException3, localizable4, (java.lang.Object[]) orderDirectionArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray37);
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertEquals("'" + number61 + "' != '" + (short) -1 + "'", number61, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection62 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection62.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + orderDirection64 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection64.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray12);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, 0);
        int[] intArray18 = new int[] {};
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 10);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        double double24 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray23);
        int[] intArray25 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        int[] intArray27 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        int[] intArray28 = new int[] {};
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, (int) (byte) 10);
        int[] intArray31 = new int[] {};
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (byte) 10);
        double double34 = org.apache.commons.math3.util.MathArrays.distance(intArray28, intArray33);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33);
        double double36 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray33);
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18);
        int int38 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray12, intArray37);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray3);
        double double16 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray15);
        double[] doubleArray17 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray15);
        double[] doubleArray21 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray41 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray41, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray35, doubleArray57);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray21, doubleArray57);
        double[] doubleArray60 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray60);
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.equals(doubleArray21, doubleArray60);
        double double63 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray17, doubleArray21);
        double[] doubleArray65 = new double[] {};
        double[] doubleArray72 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray65, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray65);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray65);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray65);
        double[] doubleArray79 = new double[] {};
        double[] doubleArray86 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray79, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray79);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79, 0);
        double[] doubleArray91 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray79);
        double double92 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray91);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equals(doubleArray65, doubleArray91);
        double double94 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray17, doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[]");
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray14 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) ' ');
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, 35);
        int int20 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray14);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        double double27 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray26);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (short) 0);
        int[] intArray31 = new int[] {};
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (byte) 10);
        double double34 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray31);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray21);
        int[] intArray36 = new int[] {};
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 10);
        int[] intArray39 = new int[] {};
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray39, (int) (byte) 10);
        double double42 = org.apache.commons.math3.util.MathArrays.distance(intArray36, intArray41);
        int[] intArray43 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36);
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (short) 0);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (byte) 0);
        double double48 = org.apache.commons.math3.util.MathArrays.distance(intArray8, intArray47);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection3 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection3, false);
        int int6 = nonMonotonicSequenceException5.getIndex();
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray38 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32, orderDirection37 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException42 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection43 = nonMonotonicSequenceException42.getDirection();
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray38, orderDirection43, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable7, (java.lang.Object[]) orderDirectionArray38);
        boolean boolean47 = nonMonotonicSequenceException5.getStrict();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext48 = nonMonotonicSequenceException5.getContext();
        java.lang.Number number49 = nonMonotonicSequenceException5.getPrevious();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray38);
        org.junit.Assert.assertTrue("'" + orderDirection43 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection43.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(exceptionContext48);
        org.junit.Assert.assertEquals("'" + number49 + "' != '" + 10.0f + "'", number49, 10.0f);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray7 = new int[] {};
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (byte) 10);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        double double13 = org.apache.commons.math3.util.MathArrays.distance(intArray7, intArray12);
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray7, (int) (short) 0);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray16, (int) (byte) 0);
        int[] intArray19 = new int[] {};
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 10);
        int int22 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray16, intArray19);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, 0);
        int int25 = org.apache.commons.math3.util.MathArrays.distance1(intArray3, intArray19);
        int[] intArray26 = null;
        int int27 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray19, intArray26);
        int[] intArray28 = new int[] {};
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray28, (int) (byte) 10);
        int[] intArray31 = new int[] {};
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (byte) 10);
        double double34 = org.apache.commons.math3.util.MathArrays.distance(intArray28, intArray33);
        int[] intArray35 = new int[] {};
        int[] intArray37 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (byte) 10);
        int[] intArray38 = new int[] {};
        int[] intArray40 = org.apache.commons.math3.util.MathArrays.copyOf(intArray38, (int) (byte) 10);
        double double41 = org.apache.commons.math3.util.MathArrays.distance(intArray35, intArray40);
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray35, (int) (short) 0);
        int int45 = org.apache.commons.math3.util.MathArrays.distance1(intArray28, intArray44);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray44);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0]");
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination(3.2223333179198646E63d, 0.0d, 2.4899064232258738E14d, 8.313043701941666E25d, (double) (short) 100, 2.479067448128025E14d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.069870091002195E40d + "'", double6 == 2.069870091002195E40d);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        float[] floatArray5 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray12 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean13 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray5, floatArray12);
        float[] floatArray14 = null;
        float[] floatArray17 = new float[] { 10L, 10 };
        float[] floatArray18 = new float[] {};
        boolean boolean19 = org.apache.commons.math3.util.MathArrays.equals(floatArray17, floatArray18);
        float[] floatArray22 = new float[] { 10L, 10 };
        float[] floatArray23 = new float[] {};
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray23);
        float[] floatArray27 = new float[] { 10L, 10 };
        float[] floatArray28 = new float[] {};
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(floatArray27, floatArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray28);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray18, floatArray22);
        float[] floatArray34 = new float[] { 10L, 10 };
        float[] floatArray35 = new float[] {};
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray35);
        float[] floatArray39 = new float[] { 10L, 10 };
        float[] floatArray40 = new float[] {};
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray40);
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray40);
        float[] floatArray45 = new float[] { 10L, 10 };
        float[] floatArray46 = new float[] {};
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(floatArray45, floatArray46);
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray34, floatArray45);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(floatArray18, floatArray34);
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equals(floatArray14, floatArray34);
        float[] floatArray53 = new float[] { 10L, 10 };
        float[] floatArray54 = new float[] {};
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equals(floatArray53, floatArray54);
        float[] floatArray58 = new float[] { 10L, 10 };
        float[] floatArray59 = new float[] {};
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.equals(floatArray58, floatArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(floatArray53, floatArray59);
        float[] floatArray62 = null;
        float[] floatArray65 = new float[] { 10L, 10 };
        float[] floatArray66 = new float[] {};
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray65, floatArray66);
        float[] floatArray70 = new float[] { 10L, 10 };
        float[] floatArray71 = new float[] {};
        boolean boolean72 = org.apache.commons.math3.util.MathArrays.equals(floatArray70, floatArray71);
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.equals(floatArray65, floatArray71);
        float[] floatArray76 = new float[] { 10L, 10 };
        float[] floatArray77 = new float[] {};
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.equals(floatArray76, floatArray77);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray65, floatArray76);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray62, floatArray76);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.equals(floatArray53, floatArray62);
        float[] floatArray82 = null;
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(floatArray53, floatArray82);
        boolean boolean84 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray34, floatArray82);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(floatArray5, floatArray34);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray60 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray61 = new double[] {};
        double[] doubleArray68 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray68);
        double[] doubleArray74 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double75 = org.apache.commons.math3.util.MathArrays.distance(doubleArray61, doubleArray74);
        double[] doubleArray76 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray60, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray76);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray54);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray14, doubleArray78);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray78);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray80);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException85 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection86 = nonMonotonicSequenceException85.getDirection();
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray80, orderDirection86, false);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertTrue("'" + orderDirection86 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection86.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 100, 5.675795142957666E11d, 6.45483024298582E8d, 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.679151654684019E13d + "'", double4 == 5.679151654684019E13d);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray0 = null;
        double[] doubleArray8 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray9 = new double[] {};
        double[] doubleArray16 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray16);
        double[] doubleArray22 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray22);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray8, doubleArray22);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException28 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = nonMonotonicSequenceException28.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException33 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = nonMonotonicSequenceException33.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException38 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = nonMonotonicSequenceException38.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException48 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection49 = nonMonotonicSequenceException48.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException53 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection54 = nonMonotonicSequenceException53.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray55 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection29, orderDirection34, orderDirection39, orderDirection44, orderDirection49, orderDirection54 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException59 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = nonMonotonicSequenceException59.getDirection();
        boolean boolean62 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray55, orderDirection60, false);
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray8, orderDirection60, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException66 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) (short) 100, (int) 'a', orderDirection60, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray0, orderDirection60, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection49.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection54 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection54.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray55);
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray0, (int) ' ');
        double[] doubleArray18 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        double[] doubleArray32 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray32);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray18, doubleArray32);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        double[] doubleArray48 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray48);
        double[] doubleArray54 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray55 = new double[] {};
        double[] doubleArray62 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray62);
        double[] doubleArray68 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double69 = org.apache.commons.math3.util.MathArrays.distance(doubleArray55, doubleArray68);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray54, doubleArray68);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray48, doubleArray70);
        double double72 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray32, doubleArray70);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray32);
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray73);
        java.lang.String[] strArray77 = new java.lang.String[] { "org.apache.commons.math3.exception.NonMonotonicSequenceException: points 34 and 35 are not strictly increasing (-1 >= 0)", "" };
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection78 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray77, orderDirection78, true);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray73, orderDirection78, true, false);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 20.0d + "'", double72 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + orderDirection78 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection78.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray2);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((-8477003.0d), doubleArray2);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = null;
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray15);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray15);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray33 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray33);
        double[] doubleArray39 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray39);
        double[] doubleArray45 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray46 = new double[] {};
        double[] doubleArray53 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray53);
        double[] doubleArray59 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray59);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray45, doubleArray59);
        double[] doubleArray62 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray39, doubleArray61);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39, 1);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64);
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException75 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection76 = nonMonotonicSequenceException75.getDirection();
        boolean boolean78 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray71, orderDirection76, false);
        boolean boolean81 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray64, orderDirection76, true, false);
        double[] doubleArray82 = new double[] {};
        double[] doubleArray89 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double90 = org.apache.commons.math3.util.MathArrays.distance(doubleArray82, doubleArray89);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray82);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection92 = null;
        double[] doubleArray93 = new double[] {};
        double[][] doubleArray94 = new double[][] { doubleArray93 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray82, orderDirection92, doubleArray94);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray15, orderDirection76, doubleArray94);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray13, orderDirection14, doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + orderDirection76 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection76.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, 0.0d, 3.014877405643864E7d, 2073255.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 6.2506096556381695E13d + "'", double4 == 6.2506096556381695E13d);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray13 = new int[] { 0, (byte) 10, 10 };
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) '4');
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray13);
        int[] intArray17 = new int[] {};
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) 10);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 52);
        double double23 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray22);
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 14.142135623730951d + "'", double23 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 10, 10]");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double double40 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray39);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, (double) (-1));
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException49 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException49.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 5.576007702658434E8d, (int) (byte) -1, orderDirection50, true);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray39, orderDirection50, false, true);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.scale((-6.826219102159232E19d), doubleArray39);
        double[] doubleArray61 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray75);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray75, 1.771933898620068E12d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray39, doubleArray75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 1 != 4");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0]");
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-6.826219102159232E21]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[4.9070448590973915E10, 1.717465700684087E12, 4.9070448590973914E8, 4.907044859097391E9]");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.MathInternalError mathInternalError40 = new org.apache.commons.math3.exception.MathInternalError(localizable1, (java.lang.Object[]) orderDirectionArray32);
        java.lang.Number number41 = null;
        java.lang.Number number42 = null;
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException56 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = nonMonotonicSequenceException56.getDirection();
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray52, orderDirection57, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException61 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection57, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number41, number42, 0, orderDirection57, true);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection57, false);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException66 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) orderDirectionArray32);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException70 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext71 = nonMonotonicSequenceException70.getContext();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection72 = nonMonotonicSequenceException70.getDirection();
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection72, false);
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection57.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(exceptionContext71);
        org.junit.Assert.assertTrue("'" + orderDirection72 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection72.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        float[] floatArray12 = new float[] { 10L, 10 };
        float[] floatArray13 = new float[] {};
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray12, floatArray13);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray13);
        float[] floatArray16 = null;
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        float[] floatArray24 = new float[] { 10L, 10 };
        float[] floatArray25 = new float[] {};
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray25);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray25);
        float[] floatArray30 = new float[] { 10L, 10 };
        float[] floatArray31 = new float[] {};
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray30, floatArray31);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray30);
        boolean boolean34 = org.apache.commons.math3.util.MathArrays.equals(floatArray16, floatArray30);
        boolean boolean35 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray16);
        float[] floatArray36 = null;
        boolean boolean37 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray36);
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray7);
        float[] floatArray41 = new float[] { 10L, 10 };
        float[] floatArray42 = new float[] {};
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray42);
        float[] floatArray46 = new float[] { 10L, 10 };
        float[] floatArray47 = new float[] {};
        boolean boolean48 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray47);
        float[] floatArray51 = new float[] { 10L, 10 };
        float[] floatArray52 = new float[] {};
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray52);
        boolean boolean54 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray52);
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray42, floatArray46);
        boolean boolean56 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray7, floatArray46);
        float[] floatArray59 = new float[] { 10L, 10 };
        float[] floatArray60 = new float[] {};
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(floatArray59, floatArray60);
        float[] floatArray64 = new float[] { 10L, 10 };
        float[] floatArray65 = new float[] {};
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(floatArray64, floatArray65);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray59, floatArray65);
        boolean boolean68 = org.apache.commons.math3.util.MathArrays.equals(floatArray46, floatArray65);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray5 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray10 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray15 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray20 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[][] longArray21 = new long[][] { longArray5, longArray10, longArray15, longArray20 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray21);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray21);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray21);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException25 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray21);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray21);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        org.apache.commons.math3.exception.util.Localizable localizable6 = null;
        double[] doubleArray7 = null;
        double[] doubleArray9 = new double[] {};
        double[] doubleArray16 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray16);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray9);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray20);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray9, doubleArray20);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray7, doubleArray9);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray9, 0);
        double[] doubleArray34 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray33);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray42 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray35, doubleArray42);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray35);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection45 = null;
        double[] doubleArray46 = new double[] {};
        double[][] doubleArray47 = new double[][] { doubleArray46 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray35, orderDirection45, doubleArray47);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray34, doubleArray47);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException50 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) nonMonotonicSequenceException5, localizable6, (java.lang.Object[]) doubleArray47);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException51 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) doubleArray47);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException52 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray1, doubleArray3);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray3, 0);
        double[] doubleArray28 = null;
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray30);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray41);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray30, doubleArray41);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray30);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray30, 0);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray54);
        double double56 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray3, doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray0, doubleArray54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray2);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, (int) '4');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4, 0);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray4);
        double double17 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray16);
        double[] doubleArray18 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray16);
        double[] doubleArray19 = null;
        double double20 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray16, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray0, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 52, 9701.0d, (double) ' ', 3.569568863411688E23d, 0.0d, 6654464.168026618d, 3.9003411936649696E31d, 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1422620362917402E25d + "'", double8 == 1.1422620362917402E25d);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 32, 2073255.0d, 1300.0d, 1630.0d, 350101.0d, 3200.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.18878636E9d + "'", double6 == 1.18878636E9d);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray27, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray27);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray51);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, 4.547240950625534E12d);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.2592747024717624E11, 4.407461458651168E12, 1.2592747024717624E9, 1.2592747024717627E10]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[5200.0, 182000.0, 52.0, 520.0]");
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        long[] longArray4 = new long[] {};
        long[] longArray5 = new long[] {};
        long[][] longArray6 = new long[][] { longArray4, longArray5 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException9 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable3, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray6);
        org.apache.commons.math3.exception.MathInternalError mathInternalError12 = new org.apache.commons.math3.exception.MathInternalError(localizable2, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException13 = new org.apache.commons.math3.exception.MathArithmeticException(localizable1, (java.lang.Object[]) longArray6);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) longArray6);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination(1.4177447166653994d, (double) 100, 1.8249340004401165E49d, 3501.442702658434d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 6.38990183867431E52d + "'", double4 == 6.38990183867431E52d);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double double11 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray1);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 0);
        double[] doubleArray27 = org.apache.commons.math3.util.MathArrays.scale(1.0d, doubleArray15);
        double double28 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray27);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.scale((double) 10L, doubleArray27);
        double[] doubleArray30 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray27);
        double[] doubleArray32 = new double[] {};
        double[] doubleArray39 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double40 = org.apache.commons.math3.util.MathArrays.distance(doubleArray32, doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray32);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray32, doubleArray43);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray64 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray57, doubleArray64);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray57);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray57);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(149850.0d, doubleArray57);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray32, doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray27, doubleArray57);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NoDataException; message: no data");
        } catch (org.apache.commons.math3.exception.NoDataException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        double[] doubleArray2 = null;
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray22 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray15, doubleArray22);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray15);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray4, doubleArray15);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray2, doubleArray4);
        double[] doubleArray28 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4, 0);
        double[] doubleArray29 = null;
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray31);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray42);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray31, doubleArray42);
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray29, doubleArray31);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31, 0);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray55);
        double double57 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray4, doubleArray55);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.scale(3.502752702658434E7d, doubleArray4);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.scale(1.4177447166653994d, doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray2);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2);
        double[] doubleArray14 = org.apache.commons.math3.util.MathArrays.scale(4425.0d, doubleArray13);
        double[] doubleArray16 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, (int) (byte) 100);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray19);
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray30);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray19, doubleArray30);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.scale(5100.0d, doubleArray40);
        double[] doubleArray44 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray13, doubleArray44);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 0 != 97");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) '4');
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int[] intArray6 = new int[] {};
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray6, (int) (byte) 10);
        int int9 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray3, intArray6);
        int[] intArray14 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray3, intArray14);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) 'a');
        double double18 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray17);
        int[] intArray19 = null;
        int int20 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray19);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray2, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray2);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray25 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double26 = org.apache.commons.math3.util.MathArrays.distance(doubleArray18, doubleArray25);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray18);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray29);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray18, doubleArray29);
        double double40 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray39);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray39);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray43);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray43);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray39, doubleArray43);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.scale(568773.0d, doubleArray39);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray2, doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray1, 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray27, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray27);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray51);
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray51);
        double[] doubleArray55 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, 4.547240950625534E12d);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray51, 1.1447570161086189E21d);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray57, 32);
        double[] doubleArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray59, doubleArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.2592747024717624E11, 4.407461458651168E12, 1.2592747024717624E9, 1.2592747024717627E10]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[3.1701938967283823E19, 1.1095678638549337E21, 3.1701938967283827E17, 3.1701938967283825E18]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[3.1701938967283823E19, 1.1095678638549337E21, 3.1701938967283827E17, 3.1701938967283825E18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { 10L, 10 };
        float[] floatArray4 = new float[] {};
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray4);
        float[] floatArray8 = new float[] { 10L, 10 };
        float[] floatArray9 = new float[] {};
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray9);
        boolean boolean11 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray9);
        float[] floatArray17 = new float[] { 0L, (short) 10, 'a', 'a', (byte) 0 };
        float[] floatArray24 = new float[] { 0, 0.0f, (byte) 0, (-1.0f), 1, (-1) };
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray17, floatArray24);
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray9, floatArray17);
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray17);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 10.0, 97.0, 97.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[0.0, 0.0, 0.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double double9 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray7);
        double[] doubleArray11 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray7, (double) 1.0f);
        double[] doubleArray16 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray17 = new double[] {};
        double[] doubleArray24 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray17, doubleArray24);
        double[] doubleArray30 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray17, doubleArray30);
        double[] doubleArray36 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray37 = new double[] {};
        double[] doubleArray44 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray44);
        double[] doubleArray50 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray37, doubleArray50);
        double[] doubleArray52 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray36, doubleArray50);
        double[] doubleArray53 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray30, doubleArray52);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray16, doubleArray52);
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray55);
        boolean boolean57 = org.apache.commons.math3.util.MathArrays.equals(doubleArray16, doubleArray55);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray16, (double) 1.0f);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray7, doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 113.16359838746733d + "'", double9 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-0.006172839506172839, 0.006172839506172839, 0.32098765432098764, 0.06172839506172839, 0.6172839506172839, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 1.0006138735420504, -6.138735420503376E-4]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, -0.0]");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        double[] doubleArray0 = null;
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray14, 1);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray39);
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray39);
        double[] doubleArray42 = null;
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray39, doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray13 = new int[] { 0, (byte) 10, 10 };
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) '4');
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray13);
        int[] intArray17 = new int[] {};
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) 10);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 52);
        double double23 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray22);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray29);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 0);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (byte) 0);
        int[] intArray36 = new int[] {};
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 10);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray36);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = org.apache.commons.math3.util.MathArrays.distance(intArray22, intArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 14.142135623730951d + "'", double23 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 0);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        int int15 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray9, intArray12);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, 0);
        int[] intArray18 = new int[] {};
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) (byte) 10);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int int24 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray18, intArray21);
        int[] intArray29 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray18, intArray29);
        int[] intArray32 = org.apache.commons.math3.util.MathArrays.copyOf(intArray18, (int) 'a');
        double double33 = org.apache.commons.math3.util.MathArrays.distance(intArray17, intArray18);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 97);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        double[] doubleArray8 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray9 = new double[] {};
        double[] doubleArray16 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray16);
        double[] doubleArray22 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double23 = org.apache.commons.math3.util.MathArrays.distance(doubleArray9, doubleArray22);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray8, doubleArray22);
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray44 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        double[] doubleArray58 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray58);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray44, doubleArray58);
        double[] doubleArray61 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray38, doubleArray60);
        double double62 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray22, doubleArray60);
        double[] doubleArray63 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray22);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException67 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection68 = nonMonotonicSequenceException67.getDirection();
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray22, orderDirection68, true, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException73 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.2555417199868906E9d, (java.lang.Number) 700.0d, (int) (byte) 0, orderDirection68, true);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 20.0d + "'", double62 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + orderDirection68 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection68.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double[] doubleArray14 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double15 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray14);
        double[] doubleArray20 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray20, doubleArray34);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray14, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray14);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray39);
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray38, doubleArray39);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException53 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 10, (java.lang.Number) 10, (-1));
        int int54 = nonMonotonicSequenceException53.getIndex();
        java.lang.Throwable[] throwableArray55 = nonMonotonicSequenceException53.getSuppressed();
        int int56 = nonMonotonicSequenceException53.getIndex();
        boolean boolean57 = nonMonotonicSequenceException53.getStrict();
        java.lang.Number number58 = nonMonotonicSequenceException53.getPrevious();
        boolean boolean59 = nonMonotonicSequenceException53.getStrict();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection60 = nonMonotonicSequenceException53.getDirection();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection60, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (182,000 >= 52)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + number58 + "' != '" + 10 + "'", number58, 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection60.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray27);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray27);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray58 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        double[] doubleArray72 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray58, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray52, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52, 1);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        boolean boolean79 = org.apache.commons.math3.util.MathArrays.equals(doubleArray27, doubleArray78);
        double[] doubleArray83 = new double[] {};
        double[] doubleArray90 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double91 = org.apache.commons.math3.util.MathArrays.distance(doubleArray83, doubleArray90);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray83);
        double[] doubleArray93 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray83);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.scale(14800.0d, doubleArray93);
        double double95 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray30 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray30, doubleArray44);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 1);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        double[] doubleArray64 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray64);
        double[] doubleArray70 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray71 = new double[] {};
        double[] doubleArray78 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray78);
        double[] doubleArray84 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray70, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray64, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64, 1);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray90, 1.0d);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray90);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray90);
        boolean boolean95 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray90);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException6 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = nonMonotonicSequenceException6.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray33 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection7, orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection38, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException41 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) orderDirectionArray33);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException42 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) orderDirectionArray33);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = nonMonotonicSequenceException52.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection53, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException57 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 8.5773796374885857E18d, (java.lang.Number) (short) 100, (int) 'a', orderDirection53, true);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection53, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException60 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) orderDirectionArray33);
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray33);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException6 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection7 = nonMonotonicSequenceException6.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException16 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = nonMonotonicSequenceException16.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException21 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = nonMonotonicSequenceException21.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException26 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = nonMonotonicSequenceException26.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException31 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection32 = nonMonotonicSequenceException31.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray33 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection7, orderDirection12, orderDirection17, orderDirection22, orderDirection27, orderDirection32 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException37 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection38 = nonMonotonicSequenceException37.getDirection();
        boolean boolean40 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection38, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException41 = new org.apache.commons.math3.exception.NullArgumentException(localizable2, (java.lang.Object[]) orderDirectionArray33);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException42 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) orderDirectionArray33);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = nonMonotonicSequenceException52.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException55 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection53, false);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection56 = nonMonotonicSequenceException55.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException58 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) 1630.0d, (int) 'a', orderDirection56, true);
        boolean boolean60 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray33, orderDirection56, true);
        org.apache.commons.math3.exception.MathInternalError mathInternalError61 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) orderDirectionArray33);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext62 = mathInternalError61.getContext();
        org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection7.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection27 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection27.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray33);
        org.junit.Assert.assertTrue("'" + orderDirection38 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection38.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection56 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection56.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(exceptionContext62);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 'a', doubleArray8);
        double[] doubleArray11 = new double[] {};
        double[] doubleArray18 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray18);
        double[] doubleArray24 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double25 = org.apache.commons.math3.util.MathArrays.distance(doubleArray11, doubleArray24);
        double[] doubleArray30 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray31 = new double[] {};
        double[] doubleArray38 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray38);
        double[] doubleArray44 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double45 = org.apache.commons.math3.util.MathArrays.distance(doubleArray31, doubleArray44);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray30, doubleArray44);
        double[] doubleArray47 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray46);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray24, 1);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray49);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray58 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double59 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray58);
        double[] doubleArray64 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double65 = org.apache.commons.math3.util.MathArrays.distance(doubleArray51, doubleArray64);
        double[] doubleArray70 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray71 = new double[] {};
        double[] doubleArray78 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double79 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray78);
        double[] doubleArray84 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double85 = org.apache.commons.math3.util.MathArrays.distance(doubleArray71, doubleArray84);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray70, doubleArray84);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray64, doubleArray86);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray64, 1);
        double[] doubleArray90 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray89);
        double[] doubleArray92 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray90, 1.0d);
        double double93 = org.apache.commons.math3.util.MathArrays.distance(doubleArray50, doubleArray90);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray90);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray90, (int) '#');
        double double97 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray96);
        double[] doubleArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray8, doubleArray98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-97.0, 97.0, 5044.0, 970.0, 9700.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 10978.208141586678d + "'", double97 == 10978.208141586678d);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray4);
        double[] doubleArray15 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray4, 0);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(97.0d, doubleArray4);
        double[] doubleArray20 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray21 = new double[] {};
        double[] doubleArray28 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double29 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray28);
        double[] doubleArray34 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray21, doubleArray34);
        double[] doubleArray40 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray41 = new double[] {};
        double[] doubleArray48 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double49 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray48);
        double[] doubleArray54 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double55 = org.apache.commons.math3.util.MathArrays.distance(doubleArray41, doubleArray54);
        double[] doubleArray56 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray40, doubleArray54);
        double[] doubleArray57 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray34, doubleArray56);
        double[] doubleArray58 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray20, doubleArray56);
        double[] doubleArray59 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray59);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.equals(doubleArray20, doubleArray59);
        double double62 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray20);
        boolean boolean63 = org.apache.commons.math3.util.MathArrays.equals(doubleArray4, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(10.0d, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(0.0d, doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1630.0003067484374d + "'", double62 == 1630.0003067484374d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) longArray5);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) longArray5);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        double[] doubleArray16 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray16);
        double[] doubleArray22 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray22, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray16, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 1);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException52 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = nonMonotonicSequenceException52.getDirection();
        boolean boolean55 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray48, orderDirection53, false);
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41, orderDirection53, true, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException60 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.8249340004401166E51d, (java.lang.Number) 3.9003411936649696E31d, (int) (short) 10, orderDirection53, false);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray23);
        double[] doubleArray28 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        double[] doubleArray42 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double43 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray42);
        double[] doubleArray48 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray49 = new double[] {};
        double[] doubleArray56 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double57 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray56);
        double[] doubleArray62 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double63 = org.apache.commons.math3.util.MathArrays.distance(doubleArray49, doubleArray62);
        double[] doubleArray64 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray48, doubleArray62);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray42, doubleArray64);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray28, doubleArray64);
        double[] doubleArray68 = new double[] {};
        double[] doubleArray75 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray75);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray68);
        double[] doubleArray79 = new double[] {};
        double[] doubleArray86 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double87 = org.apache.commons.math3.util.MathArrays.distance(doubleArray79, doubleArray86);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray79);
        double[] doubleArray89 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray68, doubleArray79);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray28, doubleArray79);
        double double91 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray23, doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray0);
        double[] doubleArray13 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        double[] doubleArray27 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray27);
        double[] doubleArray33 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray33, doubleArray47);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray27, doubleArray49);
        double[] doubleArray51 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray13, doubleArray49);
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray0, orderDirection53, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(doubleArray3, doubleArray42);
        double[] doubleArray46 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray42, 1);
        double[] doubleArray48 = new double[] {};
        double[] doubleArray55 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray48, doubleArray55);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray48);
        double[] doubleArray59 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray48, 0);
        double[] doubleArray60 = org.apache.commons.math3.util.MathArrays.ebeMultiply(doubleArray42, doubleArray48);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection61 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray60, orderDirection61, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        long[] longArray5 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray10 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray15 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[] longArray20 = new long[] { ' ', (byte) 0, 100, (short) 1 };
        long[][] longArray21 = new long[][] { longArray5, longArray10, longArray15, longArray20 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray21);
        org.apache.commons.math3.exception.MathInternalError mathInternalError23 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) longArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = mathInternalError23.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 0, 100, 1]");
        org.junit.Assert.assertNotNull(longArray21);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException11 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = nonMonotonicSequenceException11.getDirection();
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray7, orderDirection12, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException15 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) strArray7);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        boolean boolean28 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray21, orderDirection26, false);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray7, orderDirection26, true);
        org.apache.commons.math3.exception.MathInternalError mathInternalError31 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) strArray7);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext32 = mathInternalError31.getContext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(exceptionContext32);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.lang.Number number0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException14 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection15 = nonMonotonicSequenceException14.getDirection();
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection15, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException18 = new org.apache.commons.math3.exception.NullArgumentException(localizable4, (java.lang.Object[]) strArray10);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException19 = new org.apache.commons.math3.exception.MathArithmeticException(localizable3, (java.lang.Object[]) strArray10);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.math3.exception.util.Localizable localizable21 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException35 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection36 = nonMonotonicSequenceException35.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException40 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection41 = nonMonotonicSequenceException40.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException45 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection46 = nonMonotonicSequenceException45.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException50 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection51 = nonMonotonicSequenceException50.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray52 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection26, orderDirection31, orderDirection36, orderDirection41, orderDirection46, orderDirection51 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException56 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection57 = nonMonotonicSequenceException56.getDirection();
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray52, orderDirection57, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection64 = nonMonotonicSequenceException63.getDirection();
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray52, orderDirection64, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException67 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable20, localizable21, (java.lang.Object[]) orderDirectionArray52);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException74 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        int int75 = nonMonotonicSequenceException74.getIndex();
        java.lang.Number number76 = nonMonotonicSequenceException74.getPrevious();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection77 = nonMonotonicSequenceException74.getDirection();
        boolean boolean78 = nonMonotonicSequenceException74.getStrict();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection79 = nonMonotonicSequenceException74.getDirection();
        int int80 = nonMonotonicSequenceException74.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection81 = nonMonotonicSequenceException74.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException83 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 0.0f, (java.lang.Number) 43127.36401612533d, 35, orderDirection81, true);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray52, orderDirection81, false);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray10, orderDirection81, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException89 = new org.apache.commons.math3.exception.NonMonotonicSequenceException(number0, (java.lang.Number) 1.771933898620068E12d, 10, orderDirection81, false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection46.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection51 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection51.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray52);
        org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection57.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + orderDirection64 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection64.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertEquals("'" + number76 + "' != '" + (short) -1 + "'", number76, (short) -1);
        org.junit.Assert.assertTrue("'" + orderDirection77 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection77.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + orderDirection79 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection79.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + orderDirection81 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection81.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        double[] doubleArray16 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double17 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray16);
        double[] doubleArray22 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray30 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double31 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray30);
        double[] doubleArray36 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray23, doubleArray36);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray22, doubleArray36);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray16, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray16, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection42 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean45 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray41, orderDirection42, true, true);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException47 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 35924.35148398954d, (java.lang.Number) 35924.35148398954d, (int) (byte) 10, orderDirection42, false);
        int int48 = nonMonotonicSequenceException47.getIndex();
        java.lang.Number number49 = nonMonotonicSequenceException47.getArgument();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection50 = nonMonotonicSequenceException47.getDirection();
        boolean boolean51 = nonMonotonicSequenceException47.getStrict();
        org.apache.commons.math3.exception.MathInternalError mathInternalError52 = new org.apache.commons.math3.exception.MathInternalError((java.lang.Throwable) nonMonotonicSequenceException47);
        boolean boolean53 = nonMonotonicSequenceException47.getStrict();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertEquals("'" + number49 + "' != '" + 35924.35148398954d + "'", number49, 35924.35148398954d);
        org.junit.Assert.assertTrue("'" + orderDirection50 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection50.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray13 = new int[] { 0, (byte) 10, 10 };
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) '4');
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray13);
        int[] intArray17 = new int[] {};
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, (int) (byte) 10);
        int[] intArray20 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray17, 52);
        double double23 = org.apache.commons.math3.util.MathArrays.distance(intArray13, intArray22);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        double double30 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray29);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24);
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (short) 0);
        int[] intArray35 = org.apache.commons.math3.util.MathArrays.copyOf(intArray33, (int) (byte) 0);
        int[] intArray36 = new int[] {};
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) (byte) 10);
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray33, intArray36);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, 0);
        int[] intArray42 = new int[] {};
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42, (int) (byte) 10);
        int[] intArray45 = new int[] {};
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray45, (int) (byte) 10);
        int int48 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray42, intArray45);
        int[] intArray53 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(intArray42, intArray53);
        int[] intArray56 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42, (int) 'a');
        double double57 = org.apache.commons.math3.util.MathArrays.distance(intArray41, intArray42);
        int[] intArray58 = new int[] {};
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray58, (int) (byte) 10);
        int[] intArray61 = new int[] {};
        int[] intArray63 = org.apache.commons.math3.util.MathArrays.copyOf(intArray61, (int) (byte) 10);
        double double64 = org.apache.commons.math3.util.MathArrays.distance(intArray58, intArray63);
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63);
        int int66 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray41, intArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = org.apache.commons.math3.util.MathArrays.distance(intArray22, intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 14.142135623730951d + "'", double23 == 14.142135623730951d);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray46 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double47 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray46);
        double[] doubleArray52 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray39, doubleArray52);
        double[] doubleArray58 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray59 = new double[] {};
        double[] doubleArray66 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double67 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray66);
        double[] doubleArray72 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double73 = org.apache.commons.math3.util.MathArrays.distance(doubleArray59, doubleArray72);
        double[] doubleArray74 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray58, doubleArray72);
        double[] doubleArray75 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray52, doubleArray74);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray52, 1);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray77);
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException88 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection89 = nonMonotonicSequenceException88.getDirection();
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray84, orderDirection89, false);
        boolean boolean94 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray77, orderDirection89, true, false);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
        double[] doubleArray96 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray13, doubleArray77);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray77);
        double[] doubleArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray77, doubleArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0]");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + orderDirection89 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection89.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[10000.0, 350000.0, 100.0, 1000.0]");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray21 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double22 = org.apache.commons.math3.util.MathArrays.distance(doubleArray14, doubleArray21);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray14);
        double[] doubleArray24 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray3, doubleArray14);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.scale(350101.0d, doubleArray24);
        double[] doubleArray26 = org.apache.commons.math3.util.MathArrays.scale(3.6980755448772024E16d, doubleArray24);
        double[] doubleArray29 = new double[] {};
        double[] doubleArray36 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double37 = org.apache.commons.math3.util.MathArrays.distance(doubleArray29, doubleArray36);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray29);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray47 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray40, doubleArray47);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray40);
        double[] doubleArray50 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray29, doubleArray40);
        double double51 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray50);
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray54);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray54);
        double[] doubleArray65 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray50, doubleArray54);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray65);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray24, doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        double double10 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(8730.0d, doubleArray8);
        double[] doubleArray12 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray13);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray13);
        double[] doubleArray25 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double26 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 113.16359838746733d + "'", double10 == 113.16359838746733d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-8730.0, 8730.0, 453960.0, 87300.0, 873000.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        double double4 = org.apache.commons.math3.util.MathArrays.linearCombination((double) 10.0f, 7222.0d, 4.43709929416709E31d, (double) 1L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4.43709929416709E31d + "'", double4 == 4.43709929416709E31d);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        double double8 = org.apache.commons.math3.util.MathArrays.linearCombination(0.0d, (double) 1L, 6.826219102172153E19d, (double) 100.0f, (-4.485245857677034E7d), 0.0d, 0.0d, (double) (byte) -1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.826219102172152E21d + "'", double8 == 6.826219102172152E21d);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 35, doubleArray1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray1, orderDirection13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException8 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection9 = nonMonotonicSequenceException8.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException13 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = nonMonotonicSequenceException13.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException18 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = nonMonotonicSequenceException18.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException23 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection24 = nonMonotonicSequenceException23.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException28 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = nonMonotonicSequenceException28.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException33 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection34 = nonMonotonicSequenceException33.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray35 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection9, orderDirection14, orderDirection19, orderDirection24, orderDirection29, orderDirection34 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException39 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection40 = nonMonotonicSequenceException39.getDirection();
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray35, orderDirection40, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException43 = new org.apache.commons.math3.exception.NullArgumentException(localizable4, (java.lang.Object[]) orderDirectionArray35);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException44 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) orderDirectionArray35);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException54 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection55 = nonMonotonicSequenceException54.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException57 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 100.0d, (java.lang.Number) 1L, 0, orderDirection55, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException59 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 8.5773796374885857E18d, (java.lang.Number) (short) 100, (int) 'a', orderDirection55, true);
        boolean boolean61 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray35, orderDirection55, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException63 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 3.3273836360660864E20d, (java.lang.Number) (-4.485245857677034E7d), 35, orderDirection55, false);
        org.junit.Assert.assertTrue("'" + orderDirection9 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection9.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection14 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection14.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection19 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection19.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection24 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection24.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection34.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray35);
        org.junit.Assert.assertTrue("'" + orderDirection40 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection40.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + orderDirection55 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection55.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection39 = org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING;
        boolean boolean42 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38, orderDirection39, true, true);
        org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING + "'", orderDirection39.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.DECREASING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        long[] longArray5 = new long[] {};
        long[] longArray6 = new long[] {};
        long[][] longArray7 = new long[][] { longArray5, longArray6 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math3.exception.NullArgumentException(localizable4, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException10 = new org.apache.commons.math3.exception.NullArgumentException(localizable3, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray7);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException14 = new org.apache.commons.math3.exception.MathArithmeticException(localizable0, (java.lang.Object[]) longArray7);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        float[] floatArray2 = new float[] { 10L, 10 };
        float[] floatArray3 = new float[] {};
        boolean boolean4 = org.apache.commons.math3.util.MathArrays.equals(floatArray2, floatArray3);
        float[] floatArray7 = new float[] { 10L, 10 };
        float[] floatArray8 = new float[] {};
        boolean boolean9 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray8);
        float[] floatArray12 = new float[] { 10L, 10 };
        float[] floatArray13 = new float[] {};
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.equals(floatArray12, floatArray13);
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray13);
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray3, floatArray7);
        float[] floatArray19 = new float[] { 10L, 10 };
        float[] floatArray20 = new float[] {};
        boolean boolean21 = org.apache.commons.math3.util.MathArrays.equals(floatArray19, floatArray20);
        float[] floatArray24 = new float[] { 10L, 10 };
        float[] floatArray25 = new float[] {};
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray25);
        float[] floatArray29 = new float[] { 10L, 10 };
        float[] floatArray30 = new float[] {};
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equals(floatArray29, floatArray30);
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.equals(floatArray24, floatArray30);
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray20, floatArray24);
        float[] floatArray36 = new float[] { 10L, 10 };
        float[] floatArray37 = new float[] {};
        boolean boolean38 = org.apache.commons.math3.util.MathArrays.equals(floatArray36, floatArray37);
        float[] floatArray41 = new float[] { 10L, 10 };
        float[] floatArray42 = new float[] {};
        boolean boolean43 = org.apache.commons.math3.util.MathArrays.equals(floatArray41, floatArray42);
        boolean boolean44 = org.apache.commons.math3.util.MathArrays.equals(floatArray36, floatArray42);
        float[] floatArray47 = new float[] { 10L, 10 };
        float[] floatArray48 = new float[] {};
        boolean boolean49 = org.apache.commons.math3.util.MathArrays.equals(floatArray47, floatArray48);
        boolean boolean50 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray36, floatArray47);
        boolean boolean51 = org.apache.commons.math3.util.MathArrays.equals(floatArray20, floatArray36);
        boolean boolean52 = org.apache.commons.math3.util.MathArrays.equals(floatArray7, floatArray36);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double double24 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray23);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray23);
        double[] doubleArray27 = new double[] {};
        double[] doubleArray34 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double35 = org.apache.commons.math3.util.MathArrays.distance(doubleArray27, doubleArray34);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray27);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray27);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray23, doubleArray27);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray1);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray19 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double20 = org.apache.commons.math3.util.MathArrays.distance(doubleArray12, doubleArray19);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray12);
        double[] doubleArray22 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray1, doubleArray12);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray33 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray26, doubleArray33);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray26);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(149850.0d, doubleArray26);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray1, doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray26, 1.18878636E9d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathArithmeticException; message: array sums to zero");
        } catch (org.apache.commons.math3.exception.MathArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException43 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = nonMonotonicSequenceException43.getDirection();
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection44, false);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException47 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable0, localizable1, (java.lang.Object[]) orderDirectionArray32);
        org.apache.commons.math3.exception.NotPositiveException notPositiveException49 = new org.apache.commons.math3.exception.NotPositiveException((java.lang.Number) (-1));
        java.lang.Throwable[] throwableArray50 = notPositiveException49.getSuppressed();
        mathIllegalStateException47.addSuppressed((java.lang.Throwable) notPositiveException49);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection55 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException57 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 10.0d, (java.lang.Number) 10.0f, (int) (short) 0, orderDirection55, false);
        int int58 = nonMonotonicSequenceException57.getIndex();
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection59 = nonMonotonicSequenceException57.getDirection();
        java.lang.Number number60 = nonMonotonicSequenceException57.getPrevious();
        notPositiveException49.addSuppressed((java.lang.Throwable) nonMonotonicSequenceException57);
        org.apache.commons.math3.exception.MathInternalError mathInternalError62 = new org.apache.commons.math3.exception.MathInternalError((java.lang.Throwable) nonMonotonicSequenceException57);
        int int63 = nonMonotonicSequenceException57.getIndex();
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + orderDirection44 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection44.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(orderDirection59);
        org.junit.Assert.assertEquals("'" + number60 + "' != '" + 10.0f + "'", number60, 10.0f);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.math3.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math3.exception.NotPositiveException((java.lang.Number) (byte) 10);
        boolean boolean2 = notPositiveException1.getBoundIsAllowed();
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        long[] longArray5 = new long[] {};
        long[] longArray6 = new long[] {};
        long[][] longArray7 = new long[][] { longArray5, longArray6 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray7);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException10 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable3, localizable4, (java.lang.Object[]) longArray7);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = mathIllegalStateException10.getContext();
        notPositiveException1.addSuppressed((java.lang.Throwable) mathIllegalStateException10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(exceptionContext11);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        double double6 = org.apache.commons.math3.util.MathArrays.linearCombination((double) (byte) 0, 3.2223333179198646E63d, (double) ' ', (double) (byte) 0, 1000.0d, 4.8113914083447153E18d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.811391408344715E21d + "'", double6 == 4.811391408344715E21d);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        double[] doubleArray4 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray24 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray32 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double33 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray32);
        double[] doubleArray38 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double39 = org.apache.commons.math3.util.MathArrays.distance(doubleArray25, doubleArray38);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray24, doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray18, doubleArray40);
        double[] doubleArray42 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray4, doubleArray40);
        double[] doubleArray43 = null;
        double[] doubleArray45 = new double[] {};
        double[] doubleArray52 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double53 = org.apache.commons.math3.util.MathArrays.distance(doubleArray45, doubleArray52);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray45);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray63 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray56);
        double[] doubleArray66 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray45, doubleArray56);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray43, doubleArray45);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray45, 0);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray69);
        boolean boolean71 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray4, doubleArray69);
        double[] doubleArray73 = new double[] {};
        double[] doubleArray80 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double81 = org.apache.commons.math3.util.MathArrays.distance(doubleArray73, doubleArray80);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray73);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 0.0f, doubleArray73);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray73);
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(doubleArray4, doubleArray73);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray4, 2.0064935685221478E15d);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale(0.0d, doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray87);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NonMonotonicSequenceException; message: points 1 and 2 are not strictly increasing (2,007,725,301,836,157.5 >= -1,231,733,314,009.913)");
        } catch (org.apache.commons.math3.exception.NonMonotonicSequenceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 2.0077253018361575E15, -1.2317333140099126E12]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, -0.0]");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        int int6 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray0, intArray3);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) ' ');
        int[] intArray9 = new int[] {};
        int[] intArray11 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (byte) 10);
        int[] intArray12 = new int[] {};
        int[] intArray14 = org.apache.commons.math3.util.MathArrays.copyOf(intArray12, (int) (byte) 10);
        double double15 = org.apache.commons.math3.util.MathArrays.distance(intArray9, intArray14);
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9);
        int[] intArray18 = org.apache.commons.math3.util.MathArrays.copyOf(intArray9, (int) (short) 0);
        int[] intArray19 = new int[] {};
        int[] intArray21 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (byte) 10);
        int[] intArray22 = new int[] {};
        int[] intArray24 = org.apache.commons.math3.util.MathArrays.copyOf(intArray22, (int) (byte) 10);
        double double25 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray24);
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, (int) (short) 0);
        int int29 = org.apache.commons.math3.util.MathArrays.distance1(intArray9, intArray19);
        int[] intArray31 = org.apache.commons.math3.util.MathArrays.copyOf(intArray19, 1);
        double double32 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray19);
        int[] intArray36 = new int[] { 0, (byte) 10, 10 };
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray36, (int) '4');
        double double39 = org.apache.commons.math3.util.MathArrays.distance(intArray19, intArray36);
        int[] intArray40 = new int[] {};
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (byte) 10);
        int[] intArray43 = new int[] {};
        int[] intArray45 = org.apache.commons.math3.util.MathArrays.copyOf(intArray43, (int) (byte) 10);
        double double46 = org.apache.commons.math3.util.MathArrays.distance(intArray40, intArray45);
        int[] intArray47 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40);
        int[] intArray49 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (short) 0);
        int[] intArray51 = org.apache.commons.math3.util.MathArrays.copyOf(intArray49, (int) (byte) 0);
        int[] intArray52 = new int[] {};
        int[] intArray54 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, (int) (byte) 10);
        int int55 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray49, intArray52);
        int[] intArray57 = org.apache.commons.math3.util.MathArrays.copyOf(intArray52, 0);
        int int58 = org.apache.commons.math3.util.MathArrays.distance1(intArray19, intArray57);
        int[] intArray60 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) '4');
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray57, (int) '#');
        int[] intArray63 = new int[] {};
        int[] intArray65 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (byte) 10);
        int[] intArray66 = new int[] {};
        int[] intArray68 = org.apache.commons.math3.util.MathArrays.copyOf(intArray66, (int) (byte) 10);
        double double69 = org.apache.commons.math3.util.MathArrays.distance(intArray63, intArray68);
        int[] intArray70 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63);
        int[] intArray72 = org.apache.commons.math3.util.MathArrays.copyOf(intArray63, (int) (short) 0);
        int[] intArray74 = org.apache.commons.math3.util.MathArrays.copyOf(intArray72, (int) (byte) 0);
        int[] intArray75 = new int[] {};
        int[] intArray77 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, (int) (byte) 10);
        int int78 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray72, intArray75);
        int[] intArray80 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75, 0);
        int[] intArray81 = org.apache.commons.math3.util.MathArrays.copyOf(intArray75);
        int int82 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray57, intArray75);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        double[] doubleArray0 = null;
        double[] doubleArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray0, doubleArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        double[] doubleArray3 = new double[] { (byte) 0, 1630.0d, (-1.0f) };
        double[] doubleArray4 = new double[] {};
        double[] doubleArray11 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double12 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray11);
        double[] doubleArray17 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double18 = org.apache.commons.math3.util.MathArrays.distance(doubleArray4, doubleArray17);
        double[] doubleArray23 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray24 = new double[] {};
        double[] doubleArray31 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double32 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray31);
        double[] doubleArray37 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray24, doubleArray37);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray23, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray17, doubleArray39);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray3, doubleArray39);
        double double42 = org.apache.commons.math3.util.MathArrays.safeNorm(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 1630.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 163.0, -0.5657142857142857, 1630.0002857142856, 1629.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.4177447166653994d + "'", double42 == 1.4177447166653994d);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray7 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double8 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray7);
        double[] doubleArray13 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double14 = org.apache.commons.math3.util.MathArrays.distance(doubleArray0, doubleArray13);
        double[] doubleArray19 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray27 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double28 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray27);
        double[] doubleArray33 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double34 = org.apache.commons.math3.util.MathArrays.distance(doubleArray20, doubleArray33);
        double[] doubleArray35 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray19, doubleArray33);
        double[] doubleArray36 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray13, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray13, 1);
        double[] doubleArray39 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray38);
        double[] doubleArray41 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray39, 1.0d);
        double[] doubleArray43 = new double[] {};
        double[] doubleArray50 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double51 = org.apache.commons.math3.util.MathArrays.distance(doubleArray43, doubleArray50);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray43);
        double[] doubleArray54 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray43, 0);
        double[] doubleArray56 = new double[] {};
        double[] doubleArray63 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double64 = org.apache.commons.math3.util.MathArrays.distance(doubleArray56, doubleArray63);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray56);
        double[] doubleArray67 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray56, 0);
        double[] doubleArray68 = new double[] {};
        double[] doubleArray75 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray75);
        double[] doubleArray81 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double82 = org.apache.commons.math3.util.MathArrays.distance(doubleArray68, doubleArray81);
        double[] doubleArray83 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray56, doubleArray68);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray54, doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray39, doubleArray84);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.DimensionMismatchException; message: 1 != 0");
        } catch (org.apache.commons.math3.exception.DimensionMismatchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 'a', doubleArray8);
        double[] doubleArray15 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray16 = new double[] {};
        double[] doubleArray23 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double24 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray23);
        double[] doubleArray29 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray16, doubleArray29);
        double[] doubleArray31 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray15, doubleArray29);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray31);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        double[] doubleArray47 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double48 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray47);
        double[] doubleArray53 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray54 = new double[] {};
        double[] doubleArray61 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double62 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray61);
        double[] doubleArray67 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double68 = org.apache.commons.math3.util.MathArrays.distance(doubleArray54, doubleArray67);
        double[] doubleArray69 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray53, doubleArray67);
        double[] doubleArray70 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray47, doubleArray69);
        double[] doubleArray71 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray47);
        double[] doubleArray72 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray47);
        double[] doubleArray73 = org.apache.commons.math3.util.MathArrays.convolve(doubleArray32, doubleArray72);
        boolean boolean74 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray8, doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-97.0, 97.0, 5044.0, 970.0, 9700.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[10.0, 349.9714285714286, 99.1, 3600.999714285714, 3500.997142857143, 11.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathInternalError mathInternalError3 = new org.apache.commons.math3.exception.MathInternalError(localizable1, objArray2);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, objArray2);
        org.apache.commons.math3.exception.util.Localizable localizable5 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException9 = new org.apache.commons.math3.exception.NumberIsTooSmallException(localizable5, (java.lang.Number) 1, (java.lang.Number) 3200.0d, true);
        boolean boolean10 = numberIsTooSmallException9.getBoundIsAllowed();
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException9);
        org.apache.commons.math3.exception.util.Localizable localizable12 = null;
        org.apache.commons.math3.exception.util.Localizable localizable13 = null;
        org.apache.commons.math3.exception.util.Localizable localizable14 = null;
        long[] longArray15 = new long[] {};
        long[] longArray16 = new long[] {};
        long[][] longArray17 = new long[][] { longArray15, longArray16 };
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray17);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException19 = new org.apache.commons.math3.exception.NullArgumentException(localizable14, (java.lang.Object[]) longArray17);
        org.apache.commons.math3.exception.MathInternalError mathInternalError20 = new org.apache.commons.math3.exception.MathInternalError(localizable13, (java.lang.Object[]) longArray17);
        org.apache.commons.math3.util.MathArrays.checkRectangular(longArray17);
        org.apache.commons.math3.util.MathArrays.checkNonNegative(longArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException23 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException9, localizable12, (java.lang.Object[]) longArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(longArray17);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        double[] doubleArray1 = new double[] {};
        double[] doubleArray8 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double9 = org.apache.commons.math3.util.MathArrays.distance(doubleArray1, doubleArray8);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray1);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 35, doubleArray1);
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray1, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        double[] doubleArray3 = new double[] {};
        double[] doubleArray10 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double11 = org.apache.commons.math3.util.MathArrays.distance(doubleArray3, doubleArray10);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray3);
        double[] doubleArray13 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 100, doubleArray3);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) 1L, doubleArray13);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "hi!" };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException27 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection28 = nonMonotonicSequenceException27.getDirection();
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.isMonotonic(strArray23, orderDirection28, false);
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException32 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0d, (java.lang.Number) 7002072.0d, (int) '#', orderDirection28, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = org.apache.commons.math3.util.MathArrays.isMonotonic(doubleArray13, orderDirection28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + orderDirection28 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection28.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }
}

