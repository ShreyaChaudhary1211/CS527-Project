package org.apache.commons.math3.util;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1001");
        org.apache.commons.math3.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math3.exception.DimensionMismatchException((int) (short) -1, (int) (short) 10);
        int int3 = dimensionMismatchException2.getDimension();
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        org.apache.commons.math3.exception.util.Localizable localizable5 = null;
        double[] doubleArray6 = null;
        double[] doubleArray8 = new double[] {};
        double[] doubleArray15 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray8, doubleArray15);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray8);
        double[] doubleArray19 = new double[] {};
        double[] doubleArray26 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double27 = org.apache.commons.math3.util.MathArrays.distance(doubleArray19, doubleArray26);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray19);
        double[] doubleArray29 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray8, doubleArray19);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray6, doubleArray8);
        double[] doubleArray32 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray8, 0);
        double[] doubleArray33 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray32);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray41 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray34, doubleArray41);
        org.apache.commons.math3.util.MathArrays.checkPositive(doubleArray34);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection44 = null;
        double[] doubleArray45 = new double[] {};
        double[][] doubleArray46 = new double[][] { doubleArray45 };
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray34, orderDirection44, doubleArray46);
        org.apache.commons.math3.util.MathArrays.sortInPlace(doubleArray33, doubleArray46);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException49 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable5, (java.lang.Object[]) doubleArray46);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException50 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) dimensionMismatchException2, localizable4, (java.lang.Object[]) doubleArray46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1002");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException5 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection6 = nonMonotonicSequenceException5.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException10 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = nonMonotonicSequenceException10.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException15 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection16 = nonMonotonicSequenceException15.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException20 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection21 = nonMonotonicSequenceException20.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException25 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = nonMonotonicSequenceException25.getDirection();
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException30 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection31 = nonMonotonicSequenceException30.getDirection();
        org.apache.commons.math3.util.MathArrays.OrderDirection[] orderDirectionArray32 = new org.apache.commons.math3.util.MathArrays.OrderDirection[] { orderDirection6, orderDirection11, orderDirection16, orderDirection21, orderDirection26, orderDirection31 };
        org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException36 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) (short) 0, (java.lang.Number) (short) -1, (int) '#');
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection37 = nonMonotonicSequenceException36.getDirection();
        boolean boolean39 = org.apache.commons.math3.util.MathArrays.isMonotonic(orderDirectionArray32, orderDirection37, false);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException40 = new org.apache.commons.math3.exception.NullArgumentException(localizable1, (java.lang.Object[]) orderDirectionArray32);
        org.apache.commons.math3.exception.MathInternalError mathInternalError41 = new org.apache.commons.math3.exception.MathInternalError(localizable0, (java.lang.Object[]) orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection16 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection16.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + orderDirection31 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection31.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertNotNull(orderDirectionArray32);
        org.junit.Assert.assertTrue("'" + orderDirection37 + "' != '" + org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING + "'", orderDirection37.equals(org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1003");
        float[] floatArray0 = null;
        float[] floatArray3 = new float[] { 10L, 10 };
        float[] floatArray4 = new float[] {};
        boolean boolean5 = org.apache.commons.math3.util.MathArrays.equals(floatArray3, floatArray4);
        float[] floatArray8 = new float[] { 10L, 10 };
        float[] floatArray9 = new float[] {};
        boolean boolean10 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray9);
        float[] floatArray13 = new float[] { 10L, 10 };
        float[] floatArray14 = new float[] {};
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.equals(floatArray13, floatArray14);
        boolean boolean16 = org.apache.commons.math3.util.MathArrays.equals(floatArray8, floatArray14);
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray4, floatArray8);
        boolean boolean18 = org.apache.commons.math3.util.MathArrays.equals(floatArray0, floatArray8);
        float[] floatArray19 = null;
        float[] floatArray22 = new float[] { 10L, 10 };
        float[] floatArray23 = new float[] {};
        boolean boolean24 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray23);
        float[] floatArray27 = new float[] { 10L, 10 };
        float[] floatArray28 = new float[] {};
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.equals(floatArray27, floatArray28);
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.equals(floatArray22, floatArray28);
        boolean boolean31 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray19, floatArray28);
        float[] floatArray34 = new float[] { 10L, 10 };
        float[] floatArray35 = new float[] {};
        boolean boolean36 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray35);
        float[] floatArray39 = new float[] { 10L, 10 };
        float[] floatArray40 = new float[] {};
        boolean boolean41 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray40);
        float[] floatArray44 = new float[] { 10L, 10 };
        float[] floatArray45 = new float[] {};
        boolean boolean46 = org.apache.commons.math3.util.MathArrays.equals(floatArray44, floatArray45);
        boolean boolean47 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray45);
        float[] floatArray48 = null;
        float[] floatArray51 = new float[] { 10L, 10 };
        float[] floatArray52 = new float[] {};
        boolean boolean53 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray52);
        float[] floatArray56 = new float[] { 10L, 10 };
        float[] floatArray57 = new float[] {};
        boolean boolean58 = org.apache.commons.math3.util.MathArrays.equals(floatArray56, floatArray57);
        boolean boolean59 = org.apache.commons.math3.util.MathArrays.equals(floatArray51, floatArray57);
        float[] floatArray62 = new float[] { 10L, 10 };
        float[] floatArray63 = new float[] {};
        boolean boolean64 = org.apache.commons.math3.util.MathArrays.equals(floatArray62, floatArray63);
        boolean boolean65 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray51, floatArray62);
        boolean boolean66 = org.apache.commons.math3.util.MathArrays.equals(floatArray48, floatArray62);
        boolean boolean67 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray48);
        float[] floatArray68 = null;
        boolean boolean69 = org.apache.commons.math3.util.MathArrays.equals(floatArray39, floatArray68);
        boolean boolean70 = org.apache.commons.math3.util.MathArrays.equals(floatArray34, floatArray39);
        float[] floatArray73 = new float[] { 10L, 10 };
        float[] floatArray74 = new float[] {};
        boolean boolean75 = org.apache.commons.math3.util.MathArrays.equals(floatArray73, floatArray74);
        float[] floatArray78 = new float[] { 10L, 10 };
        float[] floatArray79 = new float[] {};
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(floatArray78, floatArray79);
        float[] floatArray83 = new float[] { 10L, 10 };
        float[] floatArray84 = new float[] {};
        boolean boolean85 = org.apache.commons.math3.util.MathArrays.equals(floatArray83, floatArray84);
        boolean boolean86 = org.apache.commons.math3.util.MathArrays.equals(floatArray78, floatArray84);
        boolean boolean87 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray74, floatArray78);
        boolean boolean88 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray39, floatArray78);
        boolean boolean89 = org.apache.commons.math3.util.MathArrays.equals(floatArray28, floatArray39);
        boolean boolean90 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(floatArray0, floatArray39);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1004");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        double[] doubleArray15 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double16 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray15);
        double[] doubleArray21 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray29 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double30 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray29);
        double[] doubleArray35 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray22, doubleArray35);
        double[] doubleArray37 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray21, doubleArray35);
        double[] doubleArray38 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray15, doubleArray37);
        double[] doubleArray40 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray15, 1);
        double[] doubleArray42 = new double[] {};
        double[] doubleArray49 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double50 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray49);
        double[] doubleArray55 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double56 = org.apache.commons.math3.util.MathArrays.distance(doubleArray42, doubleArray55);
        double[] doubleArray61 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray62 = new double[] {};
        double[] doubleArray69 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double70 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray69);
        double[] doubleArray75 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double76 = org.apache.commons.math3.util.MathArrays.distance(doubleArray62, doubleArray75);
        double[] doubleArray77 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray61, doubleArray75);
        double[] doubleArray78 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray55, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.scale((double) '4', doubleArray55);
        boolean boolean80 = org.apache.commons.math3.util.MathArrays.equals(doubleArray15, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray79);
        org.apache.commons.math3.util.MathArrays.scaleInPlace(1300.0d, doubleArray81);
        boolean boolean83 = org.apache.commons.math3.util.MathArrays.equals(doubleArray0, doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray85 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray0, 97.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[5200.0, 182000.0, 52.0, 520.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[6760000.0, 2.366E8, 67600.0, 676000.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1005");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray9 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (short) 0);
        int[] intArray10 = new int[] {};
        int[] intArray12 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (byte) 10);
        int[] intArray13 = new int[] {};
        int[] intArray15 = org.apache.commons.math3.util.MathArrays.copyOf(intArray13, (int) (byte) 10);
        double double16 = org.apache.commons.math3.util.MathArrays.distance(intArray10, intArray15);
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, (int) (short) 0);
        int int20 = org.apache.commons.math3.util.MathArrays.distance1(intArray0, intArray10);
        int[] intArray22 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10, 1);
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray10);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        int[] intArray27 = new int[] {};
        int[] intArray29 = org.apache.commons.math3.util.MathArrays.copyOf(intArray27, (int) (byte) 10);
        int int30 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray24, intArray27);
        int[] intArray35 = new int[] { '4', (byte) 0, (short) 10, '#' };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(intArray24, intArray35);
        int[] intArray38 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) 'a');
        int int39 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray23, intArray38);
        int[] intArray41 = org.apache.commons.math3.util.MathArrays.copyOf(intArray23, 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[52, 0, 10, 35]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1006");
        double[] doubleArray4 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray5 = new double[] {};
        double[] doubleArray12 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double13 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray12);
        double[] doubleArray18 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double19 = org.apache.commons.math3.util.MathArrays.distance(doubleArray5, doubleArray18);
        double[] doubleArray20 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray4, doubleArray18);
        double[] doubleArray27 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray28 = new double[] {};
        double[] doubleArray35 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double36 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray35);
        double[] doubleArray41 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double42 = org.apache.commons.math3.util.MathArrays.distance(doubleArray28, doubleArray41);
        double[] doubleArray43 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray27, doubleArray41);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray51 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double52 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray51);
        double[] doubleArray57 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double58 = org.apache.commons.math3.util.MathArrays.distance(doubleArray44, doubleArray57);
        double[] doubleArray63 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray64 = new double[] {};
        double[] doubleArray71 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double72 = org.apache.commons.math3.util.MathArrays.distance(doubleArray64, doubleArray71);
        double[] doubleArray77 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double78 = org.apache.commons.math3.util.MathArrays.distance(doubleArray64, doubleArray77);
        double[] doubleArray79 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray63, doubleArray77);
        double[] doubleArray80 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray57, doubleArray79);
        double double81 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray41, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray41);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray41, 35);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1.0f), doubleArray41);
        double double86 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray18, doubleArray41);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.normalizeArray(doubleArray18, 1.1447570161086189E21d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-100.0, -3500.0, -1.0, -10.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 20.0d + "'", double81 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 7222.0d + "'", double86 == 7222.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[3.1701938967283823E19, 1.1095678638549337E21, 3.1701938967283821E17, 3.1701938967283825E18]");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1007");
        int[] intArray0 = new int[] {};
        int[] intArray2 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0, (int) (byte) 10);
        int[] intArray3 = new int[] {};
        int[] intArray5 = org.apache.commons.math3.util.MathArrays.copyOf(intArray3, (int) (byte) 10);
        double double6 = org.apache.commons.math3.util.MathArrays.distance(intArray0, intArray5);
        int[] intArray7 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray8 = org.apache.commons.math3.util.MathArrays.copyOf(intArray0);
        int[] intArray14 = new int[] { (short) -1, '#', '4', (byte) 0, (short) 10 };
        int[] intArray16 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, (int) ' ');
        int[] intArray17 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14);
        int[] intArray19 = org.apache.commons.math3.util.MathArrays.copyOf(intArray14, 35);
        int int20 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray14);
        int[] intArray21 = new int[] {};
        int[] intArray23 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (byte) 10);
        int[] intArray24 = new int[] {};
        int[] intArray26 = org.apache.commons.math3.util.MathArrays.copyOf(intArray24, (int) (byte) 10);
        double double27 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray26);
        int[] intArray28 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        int[] intArray30 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21, (int) (short) 0);
        int[] intArray31 = new int[] {};
        int[] intArray33 = org.apache.commons.math3.util.MathArrays.copyOf(intArray31, (int) (byte) 10);
        double double34 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray31);
        int int35 = org.apache.commons.math3.util.MathArrays.distanceInf(intArray8, intArray21);
        int[] intArray36 = org.apache.commons.math3.util.MathArrays.copyOf(intArray21);
        int[] intArray37 = new int[] {};
        int[] intArray39 = org.apache.commons.math3.util.MathArrays.copyOf(intArray37, (int) (byte) 10);
        int[] intArray40 = new int[] {};
        int[] intArray42 = org.apache.commons.math3.util.MathArrays.copyOf(intArray40, (int) (byte) 10);
        double double43 = org.apache.commons.math3.util.MathArrays.distance(intArray37, intArray42);
        int[] intArray44 = org.apache.commons.math3.util.MathArrays.copyOf(intArray42);
        double double45 = org.apache.commons.math3.util.MathArrays.distance(intArray21, intArray44);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 35, 52, 0, 10]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 35, 52, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1008");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray9 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double10 = org.apache.commons.math3.util.MathArrays.distance(doubleArray2, doubleArray9);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray2);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray20 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double21 = org.apache.commons.math3.util.MathArrays.distance(doubleArray13, doubleArray20);
        org.apache.commons.math3.util.MathArrays.scaleInPlace((double) (-1), doubleArray13);
        double[] doubleArray23 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray2, doubleArray13);
        double[] doubleArray29 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray30 = new double[] {};
        double[] doubleArray37 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double38 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray37);
        double[] doubleArray43 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double44 = org.apache.commons.math3.util.MathArrays.distance(doubleArray30, doubleArray43);
        double[] doubleArray45 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray29, doubleArray43);
        double[] doubleArray46 = new double[] {};
        double[] doubleArray53 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double54 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray53);
        double[] doubleArray59 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double60 = org.apache.commons.math3.util.MathArrays.distance(doubleArray46, doubleArray59);
        double[] doubleArray65 = new double[] { 10, (-1), (byte) 1, 10.0d };
        double[] doubleArray66 = new double[] {};
        double[] doubleArray73 = new double[] { (byte) -1, (short) 1, '4', 10.0f, (short) 100, 0.0f };
        double double74 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray73);
        double[] doubleArray79 = new double[] { (short) 100, 3500.0d, 1.0d, 10L };
        double double80 = org.apache.commons.math3.util.MathArrays.distance(doubleArray66, doubleArray79);
        double[] doubleArray81 = org.apache.commons.math3.util.MathArrays.ebeDivide(doubleArray65, doubleArray79);
        double[] doubleArray82 = org.apache.commons.math3.util.MathArrays.ebeAdd(doubleArray59, doubleArray81);
        double double83 = org.apache.commons.math3.util.MathArrays.linearCombination(doubleArray43, doubleArray81);
        double[] doubleArray84 = org.apache.commons.math3.util.MathArrays.scale((double) (byte) 1, doubleArray43);
        double double85 = org.apache.commons.math3.util.MathArrays.distanceInf(doubleArray2, doubleArray43);
        double[] doubleArray86 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray43);
        double[] doubleArray87 = org.apache.commons.math3.util.MathArrays.copyOf(doubleArray86);
        double[] doubleArray88 = org.apache.commons.math3.util.MathArrays.scale((double) 100.0f, doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[10.0, -1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 1.0, 52.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.1, -2.8571428571428574E-4, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.1, 3499.999714285714, 2.0, 11.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 20.0d + "'", double83 == 20.0d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 3500.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10000.0, 350000.0, 100.0, 1000.0]");
    }
}

