/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 14:37:05 GMT 2024
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      linkedList0.add((Object) listIterator0);
      GnuParser gnuParser0 = new GnuParser();
      // Undeclared exception!
      try { 
        gnuParser0.processArgs((Option) null, listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerLast(option0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      GnuParser gnuParser0 = new GnuParser();
      // Undeclared exception!
      try { 
        gnuParser0.processArgs(option0, listIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      BasicParser basicParser0 = new BasicParser();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[1];
      properties0.put(basicParser0, basicParser0);
      stringArray0[0] = "-=#42`<vu1TT`";
      // Undeclared exception!
      try { 
        basicParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.BasicParser cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.put(options0, options0);
      BasicParser basicParser0 = new BasicParser();
      // Undeclared exception!
      try { 
        basicParser0.parse(options0, (String[]) null, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Options cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      BasicParser basicParser0 = new BasicParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-,";
      try { 
        basicParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -,
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-m-k:8=7e";
      BasicParser basicParser0 = new BasicParser();
      Properties properties0 = new Properties();
      try { 
        basicParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -m-k:8=7e
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cannot add value, list full.";
      stringArray0[1] = "-";
      BasicParser basicParser0 = new BasicParser();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        basicParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      options0.addOption("", true, "");
      Properties properties0 = new Properties();
      CommandLine commandLine0 = posixParser0.parse(options0, (String[]) null, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GnuParser gnuParser0 = new GnuParser();
      Option option0 = new Option("2", "2");
      option0.setOptionalArg(true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      gnuParser0.processArgs(option0, listIterator0);
      assertEquals("2", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GnuParser gnuParser0 = new GnuParser();
      Option option0 = new Option("", "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "r*g";
      stringArray0[4] = "";
      option0.setArgs(0);
      gnuParser0.parse(options0, stringArray0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      gnuParser0.processArgs(option0, listIterator0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GnuParser gnuParser0 = new GnuParser();
      Option option0 = new Option("", "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      options0.addOption(option0);
      stringArray0[3] = "r*g";
      stringArray0[4] = "";
      gnuParser0.parse(options0, stringArray0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      try { 
        gnuParser0.processArgs(option0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option:
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GnuParser gnuParser0 = new GnuParser();
      Option option0 = new Option("", "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        gnuParser0.processArgs(option0, listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setRequired(true);
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      try { 
        basicParser0.parse(options1, stringArray0, (Properties) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.put("", options0);
      BasicParser basicParser0 = new BasicParser();
      // Undeclared exception!
      try { 
        basicParser0.parse(options0, (String[]) null, properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "izN3i*;8gc&]g";
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-m-k:8=7e";
      stringArray0[1] = "-m-k:8=7e";
      stringArray0[2] = "-m-k:8=7e";
      stringArray0[3] = "-m-k:8=7e";
      stringArray0[4] = "-m-k:8=7e";
      stringArray0[5] = "-m-k:8=7e";
      stringArray0[6] = "-m-k:8=7e";
      stringArray0[7] = "-m-k:8=7e";
      try { 
        posixParser0.parse(options0, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -m-k:8=7e
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      BasicParser basicParser0 = new BasicParser();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "-";
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-m-k:8=7e";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GnuParser gnuParser0 = new GnuParser();
      Option option0 = new Option("", "");
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        gnuParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.GnuParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        posixParser0.parse(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }
}
