package org.apache.commons.cli;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = null;
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine6 = posixParser0.parse(options1, strArray4, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "", "", "" };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine8 = posixParser0.parse(options1, strArray6, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.Class<?> wildcardClass11 = commandLine10.getClass();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        boolean boolean16 = commandLine14.hasOption('a');
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str58 = option57.getArgName();
        option57.setLongOpt("");
        org.apache.commons.cli.Options options61 = options55.addOption(option57);
        java.util.ListIterator listIterator62 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option57, listIterator62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "arg" + "'", str58, "arg");
        org.junit.Assert.assertNotNull(options61);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Option[] optionArray16 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(optionArray16);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser11.parse(options13, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = posixParser11.parse(options28, strArray53);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        option59.setLongOpt("");
        org.apache.commons.cli.Options options63 = options57.addOption(option59);
        java.lang.String[] strArray65 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser11.parse(options57, strArray65, true);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser69.parse(options70, strArray77, properties78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser68.parse(options70, strArray80, properties81);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options57, strArray80, properties83);
        org.apache.commons.cli.Options options85 = new org.apache.commons.cli.Options();
        java.util.List list86 = options85.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser87 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options88 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray95 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine97 = posixParser87.parse(options88, strArray95, properties96);
        java.lang.String[] strArray99 = posixParser0.flatten(options85, strArray95, false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(list86);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(strArray99);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.OptionGroup optionGroup72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options73 = options37.addOptionGroup(optionGroup72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Options options84 = options11.addOption(" ", "arg", false, "arg");
        org.apache.commons.cli.Option option85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options86 = options84.addOption(option85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(options84);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options50 = options17.addOption("[ Options: [ short {} ] [ long {} ]", "", false, "arg");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        org.apache.commons.cli.Option option86 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str87 = option86.getArgName();
        option86.setLongOpt("");
        boolean boolean90 = option86.hasArgs();
        java.util.ListIterator listIterator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option86, listIterator91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(option86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "arg" + "'", str87, "arg");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {} ] [ long {} ]", " ");
        java.lang.Class<?> wildcardClass14 = commandLine10.getClass();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " ");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        org.apache.commons.cli.Option[] optionArray12 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(optionArray12);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.Object obj15 = commandLine10.getOptionObject('4');
        java.lang.String str17 = commandLine10.getOptionValue('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options76 = options37.addOption("hi!", " ", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '!'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Option option16 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char17 = option16.getValueSeparator();
        boolean boolean18 = option16.hasValueSeparator();
        java.util.ListIterator listIterator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option16, listIterator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(option16);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + '\000' + "'", char17 == '\000');
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser11.parse(options13, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = posixParser11.parse(options28, strArray53);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        option59.setLongOpt("");
        org.apache.commons.cli.Options options63 = options57.addOption(option59);
        java.lang.String[] strArray65 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser11.parse(options57, strArray65, true);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser69.parse(options70, strArray77, properties78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser68.parse(options70, strArray80, properties81);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options57, strArray80, properties83);
        org.apache.commons.cli.Option option87 = new org.apache.commons.cli.Option("arg", "");
        option87.setValueSeparator('4');
        java.util.ListIterator listIterator90 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option87, listIterator90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        java.lang.String[] strArray81 = commandLine79.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str84 = option83.getArgName();
        option83.setLongOpt("");
        boolean boolean87 = option83.hasArgs();
        java.lang.String str88 = option83.getKey();
        commandLine79.addOption(option83);
        commandLine79.addArg("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.OptionBuilder optionBuilder26 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine25);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(optionBuilder26);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("arg", "hi!");
        java.lang.String[] strArray15 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        java.util.List list16 = commandLine10.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(strArray15);
        org.junit.Assert.assertNotNull(list16);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        java.lang.String[] strArray81 = commandLine79.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str84 = option83.getArgName();
        option83.setLongOpt("");
        boolean boolean87 = option83.hasArgs();
        java.lang.String str88 = option83.getKey();
        commandLine79.addOption(option83);
        java.lang.String str90 = option83.getKey();
        java.lang.String[] strArray91 = option83.getValues();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNull(strArray91);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char82 = option81.getValueSeparator();
        java.lang.String str83 = option81.getKey();
        option81.setRequired(false);
        org.apache.commons.cli.Options options86 = options11.addOption(option81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options91 = options11.addOption("[ option:   :: null ]", "[ option:   :: null ]", false, "[ Options: [ short {} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + " " + "'", str83, " ");
        org.junit.Assert.assertNotNull(options86);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String[] strArray87 = commandLine84.getArgs();
        java.lang.String str89 = commandLine84.getOptionValue(' ');
        boolean boolean91 = commandLine84.hasOption('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        java.lang.String[] strArray17 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.Object obj19 = commandLine10.getOptionObject(' ');
        java.util.Iterator iterator20 = commandLine10.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(iterator20);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean2 = option1.isRequired();
        java.lang.String str3 = option1.getValue();
        java.lang.String str5 = option1.getValue("arg");
        java.util.List list6 = option1.getValuesList();
        option1.clearValues();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser8.parse(options9, strArray16, properties17);
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str22 = option21.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup23 = options19.getOptionGroup(option21);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser8.parse(options19, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.List list35 = options34.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = posixParser36.parse(options37, strArray44, properties45);
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str50 = option49.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup51 = options47.getOptionGroup(option49);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser36.parse(options47, strArray58, properties59, false);
        org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options();
        java.util.List list63 = options62.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str78 = option77.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup79 = options75.getOptionGroup(option77);
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties87 = null;
        org.apache.commons.cli.CommandLine commandLine89 = posixParser64.parse(options75, strArray86, properties87, false);
        org.apache.commons.cli.CommandLine commandLine90 = posixParser36.parse(options62, strArray86);
        org.apache.commons.cli.CommandLine commandLine92 = posixParser8.parse(options34, strArray86, false);
        java.lang.Object obj94 = commandLine92.getOptionObject(" ");
        org.apache.commons.cli.Option[] optionArray95 = commandLine92.getOptions();
        boolean boolean96 = option1.equals((java.lang.Object) optionArray95);
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg");
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "arg" + "'", str22, "arg");
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "arg" + "'", str50, "arg");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNull(optionGroup79);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(commandLine89);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(optionArray95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean67 = option66.isRequired();
        java.lang.String str68 = option66.getValue();
        option66.setLongOpt("");
        java.lang.String str71 = option66.getArgName();
        option66.setOptionalArg(false);
        char char74 = option66.getValueSeparator();
        java.util.ListIterator listIterator75 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option66, listIterator75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "arg" + "'", str71, "arg");
        org.junit.Assert.assertTrue("'" + char74 + "' != '" + '\000' + "'", char74 == '\000');
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Option option70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options71 = options37.addOption(option70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.util.List list56 = commandLine54.getArgList();
        java.lang.Object obj58 = commandLine54.getOptionObject(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str29 = option28.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup30 = options26.getOptionGroup(option28);
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str33 = option32.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup34 = options26.getOptionGroup(option32);
        org.apache.commons.cli.Option option36 = options26.getOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser37.parse(options39, strArray49, properties50);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser53.parse(options54, strArray61, properties62);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser52.parse(options54, strArray64, properties65);
        org.apache.commons.cli.PosixParser posixParser67 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser68.parse(options69, strArray76, properties77);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser67.parse(options69, strArray79, properties80);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser37.parse(options54, strArray79);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option85 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str86 = option85.getArgName();
        option85.setLongOpt("");
        org.apache.commons.cli.Options options89 = options83.addOption(option85);
        java.lang.String[] strArray91 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine93 = posixParser37.parse(options83, strArray91, true);
        java.lang.String[] strArray95 = posixParser0.flatten(options26, strArray91, true);
        java.util.List list96 = options26.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(optionGroup30);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg");
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNull(option36);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNotNull(options89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(list96);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine32 = posixParser22.parse(options23, strArray30, properties31);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str36 = option35.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup37 = options33.getOptionGroup(option35);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser22.parse(options33, strArray44, properties45, false);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.util.List list49 = options48.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser50.parse(options51, strArray58, properties59);
        org.apache.commons.cli.Options options61 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str64 = option63.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup65 = options61.getOptionGroup(option63);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser50.parse(options61, strArray72, properties73, false);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser22.parse(options48, strArray72);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray80 = posixParser11.flatten(options48, strArray78, true);
        org.apache.commons.cli.PosixParser posixParser81 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser82 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray90 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties91 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser82.parse(options83, strArray90, properties91);
        java.lang.String[] strArray93 = new java.lang.String[] {};
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine95 = posixParser81.parse(options83, strArray93, properties94);
        java.lang.String[] strArray97 = posixParser0.flatten(options48, strArray93, false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNull(optionGroup37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(option63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertNull(optionGroup65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine95);
        org.junit.Assert.assertNotNull(strArray97);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        java.lang.String[] strArray81 = commandLine79.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str84 = option83.getArgName();
        option83.setLongOpt("");
        boolean boolean87 = option83.hasArgs();
        java.lang.String str88 = option83.getKey();
        commandLine79.addOption(option83);
        option83.setArgName("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        java.lang.String[] strArray17 = commandLine10.getOptionValues('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(strArray17);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        posixParser0.burstToken(" ", true);
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str85 = option84.getArgName();
        option84.setLongOpt("");
        boolean boolean88 = option84.hasArg();
        char char89 = option84.getValueSeparator();
        option84.setDescription("hi!");
        java.util.ListIterator listIterator92 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option84, listIterator92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "arg" + "'", str85, "arg");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + char89 + "' != '" + '\000' + "'", char89 == '\000');
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        java.util.Iterator iterator16 = commandLine10.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        boolean boolean88 = commandLine84.hasOption("org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.OptionGroup optionGroup20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options21 = options2.addOptionGroup(optionGroup20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean73 = options37.hasOption("");
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean76 = option75.isRequired();
        java.lang.String str77 = option75.getValue();
        option75.setType((java.lang.Object) 0);
        java.lang.String str80 = option75.toString();
        org.apache.commons.cli.Options options81 = options37.addOption(option75);
        org.apache.commons.cli.OptionGroup optionGroup82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options83 = options37.addOptionGroup(optionGroup82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str80, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertNotNull(options81);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char82 = option81.getValueSeparator();
        java.lang.String str83 = option81.getKey();
        option81.setRequired(false);
        org.apache.commons.cli.Options options86 = options11.addOption(option81);
        boolean boolean88 = options11.hasOption("hi!");
        boolean boolean90 = options11.hasOption("");
        org.apache.commons.cli.Option option92 = options11.getOption("hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + " " + "'", str83, " ");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(option92);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String[] strArray87 = commandLine84.getArgs();
        java.lang.String str89 = commandLine84.getOptionValue(' ');
        java.util.List list90 = commandLine84.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(list90);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("arg", "arg", false, "org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String[] strArray62 = option61.getValues();
        java.util.ListIterator listIterator63 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option61, listIterator63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNull(strArray62);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        java.lang.Object obj27 = commandLine25.getOptionObject("hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        boolean boolean15 = commandLine10.hasOption(" ");
        boolean boolean17 = commandLine10.hasOption('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {} ] [ long {} ]", " ");
        commandLine10.addArg("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String str18 = commandLine10.getOptionValue('a', " ");
        java.lang.String str21 = commandLine10.getOptionValue("[ Options: [ short {} ] [ long {} ]", "[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + " " + "'", str18, " ");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[ option:   :: null ]" + "'", str21, "[ option:   :: null ]");
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        org.apache.commons.cli.Options options58 = options26.addOption("", false, "[ option:   :: null :: 0 ]");
        org.apache.commons.cli.OptionGroup optionGroup59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options60 = options26.addOptionGroup(optionGroup59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(options58);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "arg", true, "");
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = posixParser5.parse(options6, strArray13, properties14);
        java.util.List list16 = commandLine15.getArgList();
        boolean boolean17 = option4.equals((java.lang.Object) list16);
        option4.setArgName("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.util.Iterator iterator12 = commandLine10.iterator();
        java.util.Iterator iterator13 = commandLine10.iterator();
        java.lang.String str16 = commandLine10.getOptionValue('4', "org.apache.commons.cli.UnrecognizedOptionException:  ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException:  " + "'", str16, "org.apache.commons.cli.UnrecognizedOptionException:  ");
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        org.apache.commons.cli.Option[] optionArray14 = commandLine10.getOptions();
        org.apache.commons.cli.Option option15 = null;
        commandLine10.addOption(option15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = commandLine10.getOptionValue('#', "[ option:    :: null ]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(optionArray14);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Option option21 = options19.getOption("[ option:   :: null :: 0 ]");
        option21.setValueSeparator('4');
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(option21);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        java.lang.String[] strArray17 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.Object obj19 = commandLine10.getOptionObject("");
        boolean boolean21 = commandLine10.hasOption("hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        org.apache.commons.cli.OptionBuilder optionBuilder56 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine54);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(optionBuilder56);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        commandLine54.addArg("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser55.parse(options57, strArray67, properties68);
        org.apache.commons.cli.Options options74 = options57.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Options options78 = options57.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray79 = null;
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options78, strArray79, properties80);
        java.lang.String str82 = options78.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]" + "'", str82, "[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]");
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {} ] [ long {} ]", " ");
        java.lang.Object obj15 = commandLine10.getOptionObject("hi!");
        java.lang.String str17 = commandLine10.getOptionValue('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " ");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean73 = options37.hasOption("[ option:   :: null :: 0 ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.lang.Object obj57 = commandLine54.getOptionObject(" ");
        org.apache.commons.cli.OptionBuilder optionBuilder58 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine54);
        java.util.Iterator iterator59 = commandLine54.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(optionBuilder58);
        org.junit.Assert.assertNotNull(iterator59);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        boolean boolean21 = options19.hasOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Options options23 = options2.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.OptionGroup optionGroup24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options25 = options2.addOptionGroup(optionGroup24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(options23);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.lang.String[] strArray88 = commandLine84.getOptionValues("arg");
        java.util.Iterator iterator89 = commandLine84.iterator();
        org.apache.commons.cli.Option option91 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str92 = option91.getDescription();
        option91.setRequired(true);
        commandLine84.addOption(option91);
        java.lang.String[] strArray96 = commandLine84.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNotNull(option91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        java.lang.String str90 = commandLine84.getOptionValue("[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]", "[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[ option:   :: null ]" + "'", str90, "[ option:   :: null ]");
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('4', "org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String str17 = commandLine10.getOptionValue('\000', "");
        java.lang.String str19 = commandLine10.getOptionValue("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String[] strArray20 = commandLine10.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.MissingArgumentException: arg" + "'", str14, "org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {} ] [ long {} ]", " ");
        java.lang.Object obj15 = commandLine10.getOptionObject("hi!");
        java.lang.String[] strArray16 = commandLine10.getArgs();
        java.lang.String str19 = commandLine10.getOptionValue(' ', "[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " ");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ option:   :: null ]" + "'", str19, "[ option:   :: null ]");
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        boolean boolean21 = options2.hasOption("[ option:    :: null ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options25 = options2.addOption("[ option:   :: null :: 0 ]", false, "[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject(' ');
        org.apache.commons.cli.Option[] optionArray16 = commandLine10.getOptions();
        java.lang.String str19 = commandLine10.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(optionArray16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str19, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setLongOpt("");
        boolean boolean62 = option58.hasArg();
        char char63 = option58.getValueSeparator();
        char char64 = option58.getValueSeparator();
        commandLine56.addOption(option58);
        option58.setOptionalArg(false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '\000' + "'", char64 == '\000');
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('4', "org.apache.commons.cli.MissingArgumentException: arg");
        java.util.List list15 = commandLine10.getArgList();
        java.lang.Object obj17 = commandLine10.getOptionObject('#');
        java.lang.Object obj19 = commandLine10.getOptionObject("hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.MissingArgumentException: arg" + "'", str14, "org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        java.lang.String str58 = commandLine56.getOptionValue("arg");
        boolean boolean60 = commandLine56.hasOption(' ');
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String[] strArray87 = commandLine84.getArgs();
        boolean boolean89 = commandLine84.hasOption("arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        org.apache.commons.cli.Options options69 = options37.addOption("arg", " ", false, "");
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str73 = option72.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup74 = options70.getOptionGroup(option72);
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str77 = option76.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup78 = options70.getOptionGroup(option76);
        boolean boolean79 = option76.hasArg();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean82 = option81.isRequired();
        java.lang.String str83 = option81.getValue();
        option81.setLongOpt("");
        java.lang.String str86 = option81.getArgName();
        java.lang.String str87 = option81.getValue();
        boolean boolean88 = option76.equals((java.lang.Object) str87);
        org.apache.commons.cli.Options options89 = options37.addOption(option76);
        org.apache.commons.cli.Option option91 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean92 = option91.isRequired();
        java.lang.String str93 = option91.getValue();
        option91.setLongOpt("");
        java.lang.String str96 = option91.getArgName();
        boolean boolean97 = option91.hasArgs();
        org.apache.commons.cli.Options options98 = options89.addOption(option91);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "arg" + "'", str77, "arg");
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(options89);
        org.junit.Assert.assertNotNull(option91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "arg" + "'", str96, "arg");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(options98);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char82 = option81.getValueSeparator();
        java.lang.String str83 = option81.getKey();
        option81.setRequired(false);
        org.apache.commons.cli.Options options86 = options11.addOption(option81);
        boolean boolean87 = option81.hasLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + " " + "'", str83, " ");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.lang.String str57 = commandLine54.getOptionValue('#');
        org.apache.commons.cli.Option[] optionArray58 = commandLine54.getOptions();
        java.lang.String[] strArray60 = commandLine54.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(optionArray58);
        org.junit.Assert.assertNull(strArray60);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str73 = option72.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup74 = options70.getOptionGroup(option72);
        java.util.Collection collection75 = options70.getOptionGroups();
        java.lang.String[] strArray76 = null;
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options70, strArray76, properties77, false);
        java.lang.String[] strArray81 = commandLine79.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(collection75);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(strArray81);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean2 = option1.isRequired();
        java.lang.String str3 = option1.getValue();
        java.lang.String str5 = option1.getValue("arg");
        java.lang.String str6 = option1.getOpt();
        java.lang.String str7 = option1.getDescription();
        org.apache.commons.cli.PosixParser posixParser8 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options9 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties17 = null;
        org.apache.commons.cli.CommandLine commandLine18 = posixParser8.parse(options9, strArray16, properties17);
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str22 = option21.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup23 = options19.getOptionGroup(option21);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties31 = null;
        org.apache.commons.cli.CommandLine commandLine33 = posixParser8.parse(options19, strArray30, properties31, false);
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        java.util.List list35 = options34.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties45 = null;
        org.apache.commons.cli.CommandLine commandLine46 = posixParser36.parse(options37, strArray44, properties45);
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str50 = option49.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup51 = options47.getOptionGroup(option49);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine61 = posixParser36.parse(options47, strArray58, properties59, false);
        org.apache.commons.cli.CommandLine commandLine62 = posixParser8.parse(options34, strArray58);
        java.lang.String str65 = commandLine62.getOptionValue('#', "arg");
        option1.setType((java.lang.Object) '#');
        org.junit.Assert.assertNotNull(option1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException:  " + "'", str7, "org.apache.commons.cli.UnrecognizedOptionException:  ");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(commandLine18);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "arg" + "'", str22, "arg");
        org.junit.Assert.assertNull(optionGroup23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(commandLine46);
        org.junit.Assert.assertNotNull(option49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "arg" + "'", str50, "arg");
        org.junit.Assert.assertNull(optionGroup51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine61);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg");
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.lang.String str57 = commandLine54.getOptionValue('#');
        org.apache.commons.cli.Option[] optionArray58 = commandLine54.getOptions();
        commandLine54.addArg("org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(optionArray58);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Option option21 = options19.getOption("[ option:   :: null :: 0 ]");
        org.apache.commons.cli.OptionGroup optionGroup22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options19.addOptionGroup(optionGroup22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(option21);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.Object obj15 = commandLine10.getOptionObject('4');
        java.lang.String str17 = commandLine10.getOptionValue("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.Object obj19 = commandLine10.getOptionObject('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        java.lang.String[] strArray89 = commandLine84.getOptionValues("hi!");
        boolean boolean91 = commandLine84.hasOption('4');
        java.lang.String str93 = commandLine84.getOptionValue("hi!");
        java.util.List list94 = commandLine84.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(list94);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.OptionGroup optionGroup46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options47 = options17.addOptionGroup(optionGroup46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options59 = options37.addOption("[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]", false, "[ option:   :: null :: 0 ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.lang.Object obj57 = commandLine54.getOptionObject(" ");
        org.apache.commons.cli.OptionBuilder optionBuilder58 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine54);
        java.lang.String[] strArray59 = commandLine54.getArgs();
        java.lang.String str62 = commandLine54.getOptionValue("", "[ option:   :: null :: 0 ]");
        java.lang.String[] strArray64 = commandLine54.getOptionValues("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(optionBuilder58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str62, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertNull(strArray64);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        java.util.Collection collection70 = options37.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options74 = options37.addOption("org.apache.commons.cli.UnrecognizedOptionException:  ", true, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(collection70);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        java.lang.String[] strArray17 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.Object obj19 = commandLine10.getOptionObject(' ');
        java.lang.Object obj21 = commandLine10.getOptionObject('#');
        java.util.List list22 = commandLine10.getArgList();
        java.lang.Object obj24 = commandLine10.getOptionObject('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setLongOpt("");
        boolean boolean62 = option58.hasArg();
        char char63 = option58.getValueSeparator();
        char char64 = option58.getValueSeparator();
        commandLine56.addOption(option58);
        org.apache.commons.cli.Option[] optionArray66 = commandLine56.getOptions();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '\000' + "'", char64 == '\000');
        org.junit.Assert.assertNotNull(optionArray66);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.util.Iterator iterator55 = commandLine54.iterator();
        java.util.List list56 = commandLine54.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(iterator55);
        org.junit.Assert.assertNotNull(list56);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option59 = new org.apache.commons.cli.Option("", " ");
        org.apache.commons.cli.Option option61 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean62 = option61.isRequired();
        option59.setType((java.lang.Object) option61);
        option61.setOptionalArg(true);
        java.lang.String str67 = option61.getValue("arg");
        java.util.ListIterator listIterator68 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option61, listIterator68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "arg" + "'", str67, "arg");
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {} ] [ long {} ]", " ");
        commandLine10.addArg("org.apache.commons.cli.MissingArgumentException: arg");
        boolean boolean17 = commandLine10.hasOption("hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " ");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setLongOpt("");
        boolean boolean62 = option58.hasArg();
        char char63 = option58.getValueSeparator();
        char char64 = option58.getValueSeparator();
        commandLine56.addOption(option58);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = option58.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '\000' + "'", char64 == '\000');
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        java.lang.String[] strArray81 = commandLine79.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str84 = option83.getArgName();
        option83.setLongOpt("");
        boolean boolean87 = option83.hasArgs();
        java.lang.String str88 = option83.getKey();
        commandLine79.addOption(option83);
        option83.setRequired(true);
        org.apache.commons.cli.Option option93 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean94 = option93.isRequired();
        boolean boolean95 = option93.hasLongOpt();
        option93.setLongOpt("");
        boolean boolean98 = option93.hasArgName();
        boolean boolean99 = option83.equals((java.lang.Object) option93);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(option93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser11.parse(options13, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = posixParser11.parse(options28, strArray53);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        option59.setLongOpt("");
        org.apache.commons.cli.Options options63 = options57.addOption(option59);
        java.lang.String[] strArray65 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser11.parse(options57, strArray65, true);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser69.parse(options70, strArray77, properties78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser68.parse(options70, strArray80, properties81);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options57, strArray80, properties83);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        org.apache.commons.cli.Option option88 = org.apache.commons.cli.OptionBuilder.create("");
        java.util.List list89 = option88.getValuesList();
        commandLine84.addOption(option88);
        java.lang.Class<?> wildcardClass91 = commandLine84.getClass();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(option88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options29 = options11.addOption("[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]", false, "[ option:   :: null :: [ option:   :: null ] ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        boolean boolean21 = options2.hasOption("[ option:    :: null ]");
        org.apache.commons.cli.OptionGroup optionGroup22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options23 = options2.addOptionGroup(optionGroup22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char82 = option81.getValueSeparator();
        java.lang.String str83 = option81.getKey();
        option81.setRequired(false);
        org.apache.commons.cli.Options options86 = options11.addOption(option81);
        org.apache.commons.cli.Options options87 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option89 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str90 = option89.getArgName();
        option89.setLongOpt("");
        org.apache.commons.cli.Options options93 = options87.addOption(option89);
        option81.setType((java.lang.Object) option89);
        java.lang.String str95 = option81.getValue();
        java.lang.String str96 = option81.getLongOpt();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + " " + "'", str83, " ");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertNotNull(option89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "arg" + "'", str90, "arg");
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        java.util.Iterator iterator46 = commandLine45.iterator();
        commandLine45.addArg("");
        java.lang.String[] strArray50 = commandLine45.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertNull(strArray50);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Options options84 = options11.addOption(" ", "arg", false, "arg");
        boolean boolean86 = options84.hasOption(" ");
        java.util.List list87 = options84.helpOptions();
        java.util.Collection collection88 = options84.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(list87);
        org.junit.Assert.assertNotNull(collection88);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Options options84 = options11.addOption(" ", "arg", false, "arg");
        org.apache.commons.cli.OptionGroup optionGroup85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options86 = options11.addOptionGroup(optionGroup85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(options84);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        org.apache.commons.cli.Options options58 = options26.addOption("", false, "[ option:   :: null :: 0 ]");
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean61 = option60.isRequired();
        java.lang.String str62 = option60.getValue();
        java.lang.String str64 = option60.getValue("arg");
        org.apache.commons.cli.OptionGroup optionGroup65 = options26.getOptionGroup(option60);
        org.apache.commons.cli.OptionGroup optionGroup66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options67 = options26.addOptionGroup(optionGroup66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertNull(optionGroup65);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        java.lang.String str17 = commandLine10.getOptionValue("[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]");
        java.lang.String[] strArray19 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.Object obj21 = commandLine10.getOptionObject('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser11.parse(options13, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = posixParser11.parse(options28, strArray53);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        option59.setLongOpt("");
        org.apache.commons.cli.Options options63 = options57.addOption(option59);
        java.lang.String[] strArray65 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser11.parse(options57, strArray65, true);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser69.parse(options70, strArray77, properties78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser68.parse(options70, strArray80, properties81);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options57, strArray80, properties83);
        commandLine84.addArg("[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser11.parse(options13, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = posixParser11.parse(options28, strArray53);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        option59.setLongOpt("");
        org.apache.commons.cli.Options options63 = options57.addOption(option59);
        java.lang.String[] strArray65 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser11.parse(options57, strArray65, true);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser69.parse(options70, strArray77, properties78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser68.parse(options70, strArray80, properties81);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options57, strArray80, properties83);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        boolean boolean88 = commandLine84.hasOption("");
        java.lang.Object obj90 = commandLine84.getOptionObject('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        posixParser0.burstToken("[ option:    :: hi! ]", true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String str88 = commandLine84.getOptionValue('4');
        java.lang.String[] strArray89 = commandLine84.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strArray89);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        boolean boolean57 = commandLine54.hasOption('#');
        java.lang.String[] strArray59 = commandLine54.getOptionValues("[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strArray59);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        java.lang.String str17 = commandLine10.getOptionValue("[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]");
        java.lang.String[] strArray19 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option[] optionArray20 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(optionArray20);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        org.apache.commons.cli.Option[] optionArray88 = commandLine84.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNotNull(optionArray88);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Options options84 = options11.addOption(" ", "arg", false, "arg");
        java.util.List list85 = options84.helpOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(list85);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        boolean boolean56 = commandLine54.hasOption('#');
        java.util.List list57 = commandLine54.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(list57);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser2.parse(options3, strArray10, properties11);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = posixParser1.parse(options3, strArray13, properties14);
        org.apache.commons.cli.Options options20 = options3.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        java.util.List list21 = options20.helpOptions();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException:  ", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", "[ option:   :: null ]", " " };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options20, strArray26, properties27, true);
        java.lang.String str31 = commandLine29.getOptionValue("arg");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char82 = option81.getValueSeparator();
        java.lang.String str83 = option81.getKey();
        option81.setRequired(false);
        org.apache.commons.cli.Options options86 = options11.addOption(option81);
        org.apache.commons.cli.Options options87 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option89 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str90 = option89.getArgName();
        option89.setLongOpt("");
        org.apache.commons.cli.Options options93 = options87.addOption(option89);
        option81.setType((java.lang.Object) option89);
        java.lang.String str95 = option81.getValue();
        boolean boolean96 = option81.hasArgName();
        java.lang.String str97 = option81.getKey();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + " " + "'", str83, " ");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertNotNull(option89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "arg" + "'", str90, "arg");
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + " " + "'", str97, " ");
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str78 = option77.getArgName();
        option77.setLongOpt("");
        org.apache.commons.cli.Options options81 = options75.addOption(option77);
        org.apache.commons.cli.OptionBuilder optionBuilder82 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options75);
        java.util.List list83 = options75.helpOptions();
        java.lang.String[] strArray89 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: arg", "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]", " ", "[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]", " " };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options75, strArray89, properties90);
        boolean boolean93 = commandLine91.hasOption('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(optionBuilder82);
        org.junit.Assert.assertNotNull(list83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        org.apache.commons.cli.Options options58 = options26.addOption("", false, "[ option:   :: null :: 0 ]");
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean61 = option60.isRequired();
        java.lang.String str62 = option60.getValue();
        java.lang.String str64 = option60.getValue("arg");
        org.apache.commons.cli.OptionGroup optionGroup65 = options26.getOptionGroup(option60);
        org.apache.commons.cli.Option option67 = options26.getOption("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertNull(optionGroup65);
        org.junit.Assert.assertNull(option67);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        org.apache.commons.cli.Option option66 = options37.getOption("[ option:    :: null ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options70 = options37.addOption("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNull(option66);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str29 = option28.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup30 = options26.getOptionGroup(option28);
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str33 = option32.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup34 = options26.getOptionGroup(option32);
        org.apache.commons.cli.Option option36 = options26.getOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser37.parse(options39, strArray49, properties50);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser53.parse(options54, strArray61, properties62);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser52.parse(options54, strArray64, properties65);
        org.apache.commons.cli.PosixParser posixParser67 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser68.parse(options69, strArray76, properties77);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser67.parse(options69, strArray79, properties80);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser37.parse(options54, strArray79);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option85 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str86 = option85.getArgName();
        option85.setLongOpt("");
        org.apache.commons.cli.Options options89 = options83.addOption(option85);
        java.lang.String[] strArray91 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine93 = posixParser37.parse(options83, strArray91, true);
        java.lang.String[] strArray95 = posixParser0.flatten(options26, strArray91, true);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]", false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(optionGroup30);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg");
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNull(option36);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNotNull(options89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNotNull(strArray95);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.OptionGroup optionGroup70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options71 = options37.addOptionGroup(optionGroup70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = null;
        java.lang.String[] strArray12 = null;
        java.util.Properties properties13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options11, strArray12, properties13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        java.util.Iterator iterator57 = commandLine56.iterator();
        boolean boolean59 = commandLine56.hasOption("");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(iterator57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        posixParser0.burstToken("arg", false);
        org.apache.commons.cli.PosixParser posixParser29 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties38 = null;
        org.apache.commons.cli.CommandLine commandLine39 = posixParser29.parse(options30, strArray37, properties38);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str43 = option42.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup44 = options40.getOptionGroup(option42);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser29.parse(options40, strArray51, properties52, false);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser55.parse(options56, strArray63, properties64);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str69 = option68.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup70 = options66.getOptionGroup(option68);
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser55.parse(options66, strArray77, properties78, false);
        java.lang.String[] strArray81 = null;
        java.util.Properties properties82 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser29.parse(options66, strArray81, properties82);
        org.apache.commons.cli.PosixParser posixParser84 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options85 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray92 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser84.parse(options85, strArray92, properties93);
        java.util.List list95 = commandLine94.getArgList();
        java.lang.String[] strArray96 = commandLine94.getArgs();
        java.util.Properties properties97 = null;
        org.apache.commons.cli.CommandLine commandLine99 = posixParser0.parse(options66, strArray96, properties97, true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(commandLine39);
        org.junit.Assert.assertNotNull(option42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "arg" + "'", str69, "arg");
        org.junit.Assert.assertNull(optionGroup70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(list95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(commandLine99);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.PosixParser posixParser80 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser81 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray89 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser81.parse(options82, strArray89, properties90);
        java.lang.String[] strArray92 = new java.lang.String[] {};
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser80.parse(options82, strArray92, properties93);
        java.lang.String[] strArray95 = null;
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options82, strArray95, properties96, false);
        java.util.List list99 = options82.helpOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertNotNull(list99);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        org.apache.commons.cli.Options options69 = options37.addOption("arg", " ", false, "");
        org.apache.commons.cli.Option option71 = options37.getOption("[ option:   :: null :: [ option:   :: null ] ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNull(option71);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        boolean boolean56 = commandLine54.hasOption('#');
        org.apache.commons.cli.Option[] optionArray57 = commandLine54.getOptions();
        boolean boolean59 = commandLine54.hasOption("hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(optionArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char82 = option81.getValueSeparator();
        java.lang.String str83 = option81.getKey();
        option81.setRequired(false);
        org.apache.commons.cli.Options options86 = options11.addOption(option81);
        org.apache.commons.cli.Options options87 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option89 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str90 = option89.getArgName();
        option89.setLongOpt("");
        org.apache.commons.cli.Options options93 = options87.addOption(option89);
        option81.setType((java.lang.Object) option89);
        java.lang.Object obj95 = option89.getType();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + " " + "'", str83, " ");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertNotNull(option89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "arg" + "'", str90, "arg");
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        java.lang.String[] strArray89 = commandLine84.getOptionValues("hi!");
        boolean boolean91 = commandLine84.hasOption('4');
        boolean boolean93 = commandLine84.hasOption("[ option:   :: null ]");
        java.lang.String[] strArray94 = commandLine84.getArgs();
        boolean boolean96 = commandLine84.hasOption('\000');
        java.lang.Object obj98 = commandLine84.getOptionObject("[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(obj98);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        posixParser0.burstToken("arg", false);
        org.apache.commons.cli.Option option70 = new org.apache.commons.cli.Option(" ", " ");
        option70.setType((java.lang.Object) '#');
        java.util.List list73 = option70.getValuesList();
        java.util.ListIterator listIterator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option70, listIterator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(list73);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.PosixParser posixParser80 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser81 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray89 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser81.parse(options82, strArray89, properties90);
        java.lang.String[] strArray92 = new java.lang.String[] {};
        java.util.Properties properties93 = null;
        org.apache.commons.cli.CommandLine commandLine94 = posixParser80.parse(options82, strArray92, properties93);
        java.lang.String[] strArray95 = null;
        java.util.Properties properties96 = null;
        org.apache.commons.cli.CommandLine commandLine98 = posixParser0.parse(options82, strArray95, properties96, false);
        java.util.Collection collection99 = options82.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(commandLine98);
        org.junit.Assert.assertNotNull(collection99);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        java.util.Iterator iterator46 = commandLine45.iterator();
        java.lang.String[] strArray47 = commandLine45.getArgs();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertNotNull(strArray47);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser57.parse(options58, strArray65, properties66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser56.parse(options58, strArray68, properties69);
        org.apache.commons.cli.CommandLine commandLine71 = posixParser26.parse(options43, strArray68);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str75 = option74.getArgName();
        option74.setLongOpt("");
        org.apache.commons.cli.Options options78 = options72.addOption(option74);
        java.lang.String[] strArray80 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine82 = posixParser26.parse(options72, strArray80, true);
        java.lang.String[] strArray83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options72, strArray83);
        java.lang.String str85 = options72.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine71);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]" + "'", str85, "[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]");
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg(" ");
        java.lang.Object obj78 = commandLine74.getOptionObject('4');
        java.lang.String str80 = commandLine74.getOptionValue("arg");
        java.lang.String[] strArray82 = commandLine74.getOptionValues('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(strArray82);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup61 = options57.getOptionGroup(option59);
        java.lang.String[] strArray62 = null;
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options57, strArray62, properties63);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]", false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertNotNull(commandLine64);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg("[ option:   :: null ]");
        java.util.Iterator iterator77 = commandLine74.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(iterator77);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        java.lang.String[] strArray89 = commandLine84.getOptionValues("hi!");
        boolean boolean91 = commandLine84.hasOption('4');
        boolean boolean93 = commandLine84.hasOption("[ option:   :: null ]");
        boolean boolean95 = commandLine84.hasOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        org.apache.commons.cli.Option[] optionArray87 = commandLine84.getOptions();
        java.util.Iterator iterator88 = commandLine84.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(optionArray87);
        org.junit.Assert.assertNotNull(iterator88);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String str88 = commandLine84.getOptionValue('4');
        java.util.List list89 = commandLine84.getArgList();
        org.apache.commons.cli.Option[] optionArray90 = commandLine84.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(optionArray90);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option(" ", " ");
        option72.setType((java.lang.Object) '#');
        java.util.List list75 = option72.getValuesList();
        java.util.ListIterator listIterator76 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option72, listIterator76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(list75);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.util.List list56 = commandLine54.getArgList();
        java.lang.String str59 = commandLine54.getOptionValue('#', "[ option:   :: null :: 0 ]");
        java.lang.String str62 = commandLine54.getOptionValue('4', "hi!");
        java.lang.String str64 = commandLine54.getOptionValue("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str59, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        java.lang.String[] strArray17 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.Object obj19 = commandLine10.getOptionObject(' ');
        java.lang.Object obj21 = commandLine10.getOptionObject('#');
        commandLine10.addArg("org.apache.commons.cli.UnrecognizedOptionException:  ");
        boolean boolean25 = commandLine10.hasOption('#');
        org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option(" ", true, " ");
        char char30 = option29.getValueSeparator();
        java.lang.String str31 = option29.getDescription();
        java.lang.String str33 = option29.getValue("[ option:   :: null :: 0 ]");
        java.lang.String str35 = option29.getValue("arg");
        java.lang.Object obj36 = option29.getType();
        int int37 = option29.getId();
        commandLine10.addOption(option29);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + char30 + "' != '" + '\000' + "'", char30 == '\000');
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + " " + "'", str31, " ");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str33, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "arg" + "'", str35, "arg");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.Object obj15 = commandLine10.getOptionObject('4');
        boolean boolean17 = commandLine10.hasOption("arg");
        java.lang.String str19 = commandLine10.getOptionValue('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        java.lang.String[] strArray89 = commandLine84.getOptionValues("hi!");
        boolean boolean91 = commandLine84.hasOption('4');
        boolean boolean93 = commandLine84.hasOption("[ option:   :: null ]");
        java.lang.String[] strArray94 = commandLine84.getArgs();
        boolean boolean96 = commandLine84.hasOption('\000');
        java.util.Iterator iterator97 = commandLine84.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(iterator97);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean73 = options37.hasOption("");
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean76 = option75.isRequired();
        java.lang.String str77 = option75.getValue();
        option75.setType((java.lang.Object) 0);
        java.lang.String str80 = option75.toString();
        org.apache.commons.cli.Options options81 = options37.addOption(option75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options86 = options81.addOption("[ Options: [ short {} ] [ long {} ]", "arg", false, "org.apache.commons.cli.MissingArgumentException: arg");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.cli.ParseException: hi!" + "'", str25, "org.apache.commons.cli.ParseException: hi!");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str80, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertNotNull(options81);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup61 = options57.getOptionGroup(option59);
        java.lang.String[] strArray62 = null;
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options57, strArray62, properties63);
        org.apache.commons.cli.Option option66 = options57.getOption(" ");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNull(option66);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean82 = option81.isRequired();
        java.lang.String str83 = option81.getValue();
        java.lang.String str85 = option81.getValue("arg");
        java.util.List list86 = option81.getValuesList();
        option81.clearValues();
        org.apache.commons.cli.Options options88 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option90 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str91 = option90.getArgName();
        option90.setLongOpt("");
        org.apache.commons.cli.Options options94 = options88.addOption(option90);
        java.util.Collection collection95 = options88.getOptionGroups();
        option81.setType((java.lang.Object) options88);
        java.lang.String[] strArray97 = null;
        org.apache.commons.cli.CommandLine commandLine99 = posixParser0.parse(options88, strArray97, true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "arg" + "'", str85, "arg");
        org.junit.Assert.assertNotNull(list86);
        org.junit.Assert.assertNotNull(option90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "arg" + "'", str91, "arg");
        org.junit.Assert.assertNotNull(options94);
        org.junit.Assert.assertNotNull(collection95);
        org.junit.Assert.assertNotNull(commandLine99);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("[ option:    :: null ]");
        java.lang.Object obj15 = commandLine10.getOptionObject("[ option:   :: null ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean73 = options37.hasOption("");
        java.util.Collection collection74 = options37.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(collection74);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str3 = option2.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup4 = options0.getOptionGroup(option2);
        char char5 = option2.getValueSeparator();
        java.util.List list6 = option2.getValuesList();
        option2.setDescription(" ");
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties19 = null;
        org.apache.commons.cli.CommandLine commandLine20 = posixParser10.parse(options11, strArray18, properties19);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser9.parse(options11, strArray21, properties22);
        org.apache.commons.cli.PosixParser posixParser24 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser25 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine35 = posixParser25.parse(options26, strArray33, properties34);
        java.lang.String[] strArray36 = new java.lang.String[] {};
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser24.parse(options26, strArray36, properties37);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser40 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine50 = posixParser40.parse(options41, strArray48, properties49);
        java.lang.String[] strArray51 = new java.lang.String[] {};
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser39.parse(options41, strArray51, properties52);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser9.parse(options26, strArray51);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str58 = option57.getArgName();
        option57.setLongOpt("");
        org.apache.commons.cli.Options options61 = options55.addOption(option57);
        java.lang.String[] strArray63 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine65 = posixParser9.parse(options55, strArray63, true);
        java.util.Iterator iterator66 = commandLine65.iterator();
        option2.setType((java.lang.Object) iterator66);
        java.lang.Class<?> wildcardClass68 = iterator66.getClass();
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg");
        org.junit.Assert.assertNull(optionGroup4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\000' + "'", char5 == '\000');
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(commandLine20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "arg" + "'", str58, "arg");
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(iterator66);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        boolean boolean56 = options26.hasOption("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg("[ option:   :: null ]");
        java.lang.Object obj78 = commandLine74.getOptionObject(' ');
        java.lang.String str81 = commandLine74.getOptionValue("[ option:    :: null ]", "org.apache.commons.cli.UnrecognizedOptionException:  ");
        java.util.Iterator iterator82 = commandLine74.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException:  " + "'", str81, "org.apache.commons.cli.UnrecognizedOptionException:  ");
        org.junit.Assert.assertNotNull(iterator82);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.util.Collection collection55 = options26.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(collection55);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        java.util.Collection collection70 = options37.getOptions();
        java.util.List list71 = options37.helpOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(collection70);
        org.junit.Assert.assertNotNull(list71);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('4', "org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String str17 = commandLine10.getOptionValue('\000', "");
        java.lang.String str19 = commandLine10.getOptionValue("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String str22 = commandLine10.getOptionValue('a', "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.MissingArgumentException: arg" + "'", str14, "org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str22, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser11.parse(options13, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = posixParser11.parse(options28, strArray53);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        option59.setLongOpt("");
        org.apache.commons.cli.Options options63 = options57.addOption(option59);
        java.lang.String[] strArray65 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser11.parse(options57, strArray65, true);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser69.parse(options70, strArray77, properties78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser68.parse(options70, strArray80, properties81);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options57, strArray80, properties83);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.lang.String str88 = commandLine84.getOptionValue("[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]" + "'", str60, "[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean73 = options37.hasOption("");
        org.apache.commons.cli.Option option75 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean76 = option75.isRequired();
        java.lang.String str77 = option75.getValue();
        option75.setType((java.lang.Object) 0);
        java.lang.String str80 = option75.toString();
        org.apache.commons.cli.Options options81 = options37.addOption(option75);
        java.util.Collection collection82 = options81.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options87 = options81.addOption("org.apache.commons.cli.MissingOptionException: ", "[ option:    :: null ]", false, "org.apache.commons.cli.ParseException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(option75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str80, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(collection82);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.String str16 = commandLine10.getOptionValue("[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]", "arg");
        boolean boolean18 = commandLine10.hasOption('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.Object obj15 = commandLine10.getOptionObject('4');
        boolean boolean17 = commandLine10.hasOption("arg");
        java.lang.String str19 = commandLine10.getOptionValue("[ option:    :: hi! ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        posixParser0.burstToken("arg", false);
        org.apache.commons.cli.Option option30 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean31 = option30.isRequired();
        java.lang.String str32 = option30.getValue();
        java.lang.String str34 = option30.getValue("arg");
        java.lang.String str35 = option30.getOpt();
        java.lang.String str36 = option30.getDescription();
        java.util.ListIterator listIterator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option30, listIterator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "arg" + "'", str34, "arg");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setLongOpt("");
        boolean boolean62 = option58.hasArg();
        char char63 = option58.getValueSeparator();
        char char64 = option58.getValueSeparator();
        commandLine56.addOption(option58);
        option58.setArgName("hi!");
        java.lang.String str69 = option58.getValue("");
        boolean boolean70 = option58.hasLongOpt();
        java.lang.String str72 = option58.getValue("");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '\000' + "'", char64 == '\000');
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('4', "org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String str17 = commandLine10.getOptionValue('a', " ");
        boolean boolean19 = commandLine10.hasOption("hi!");
        java.lang.String[] strArray21 = commandLine10.getOptionValues("[ option:   :: null ]");
        java.lang.Object obj23 = commandLine10.getOptionObject('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.MissingArgumentException: arg" + "'", str14, "org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + " " + "'", str17, " ");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strArray21);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser2.parse(options3, strArray10, properties11);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = posixParser1.parse(options3, strArray13, properties14);
        org.apache.commons.cli.Options options20 = options3.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        java.util.List list21 = options20.helpOptions();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException:  ", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", "[ option:   :: null ]", " " };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options20, strArray26, properties27, true);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        java.util.List list31 = options30.getRequiredOptions();
        org.apache.commons.cli.Option option33 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char34 = option33.getValueSeparator();
        boolean boolean35 = option33.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup36 = options30.getOptionGroup(option33);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties46 = null;
        org.apache.commons.cli.CommandLine commandLine47 = posixParser37.parse(options38, strArray45, properties46);
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str51 = option50.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup52 = options48.getOptionGroup(option50);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties60 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser37.parse(options48, strArray59, properties60, false);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        java.util.List list64 = options63.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser65.parse(options66, strArray73, properties74);
        org.apache.commons.cli.Options options76 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str79 = option78.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup80 = options76.getOptionGroup(option78);
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties88 = null;
        org.apache.commons.cli.CommandLine commandLine90 = posixParser65.parse(options76, strArray87, properties88, false);
        org.apache.commons.cli.CommandLine commandLine91 = posixParser37.parse(options63, strArray87);
        org.apache.commons.cli.CommandLine commandLine93 = posixParser0.parse(options30, strArray87, false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(option33);
        org.junit.Assert.assertTrue("'" + char34 + "' != '" + '\000' + "'", char34 == '\000');
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(optionGroup36);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(option50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNull(optionGroup52);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(list64);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "arg" + "'", str79, "arg");
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine90);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertNotNull(commandLine93);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "arg", true, "");
        org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options6 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = posixParser5.parse(options6, strArray13, properties14);
        java.util.List list16 = commandLine15.getArgList();
        boolean boolean17 = option4.equals((java.lang.Object) list16);
        boolean boolean18 = option4.hasLongOpt();
        java.lang.String str19 = option4.getValue();
        java.util.List list20 = option4.getValuesList();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(list16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(list20);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setOptionalArg(false);
        java.lang.String str62 = option58.getDescription();
        boolean boolean63 = option58.hasLongOpt();
        boolean boolean64 = option58.hasLongOpt();
        org.apache.commons.cli.OptionGroup optionGroup65 = options46.getOptionGroup(option58);
        java.util.Collection collection66 = options46.getOptions();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(optionGroup65);
        org.junit.Assert.assertNotNull(collection66);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        org.apache.commons.cli.Option option66 = options37.getOption("[ option:    :: null ]");
        java.lang.String str67 = options37.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNull(option66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str67, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean74 = option73.isRequired();
        boolean boolean75 = option73.hasLongOpt();
        option73.setLongOpt("");
        org.apache.commons.cli.Options options78 = options37.addOption(option73);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(options78);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String str57 = commandLine54.getOptionValue('a', " ");
        boolean boolean59 = commandLine54.hasOption("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + " " + "'", str57, " ");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        boolean boolean89 = commandLine84.hasOption("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {} ] [ long {} ]", " ");
        java.lang.Object obj15 = commandLine10.getOptionObject("hi!");
        java.lang.String[] strArray16 = commandLine10.getArgs();
        boolean boolean18 = commandLine10.hasOption('\000');
        boolean boolean20 = commandLine10.hasOption('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " ");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: arg", false);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: arg", true);
        org.apache.commons.cli.Option option71 = null;
        java.util.ListIterator listIterator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option71, listIterator72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String[] strArray86 = commandLine84.getOptionValues('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(strArray86);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Option option21 = options19.getOption("[ option:   :: null :: 0 ]");
        java.util.Collection collection22 = options19.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(option21);
        org.junit.Assert.assertNotNull(collection22);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.lang.Object obj57 = commandLine54.getOptionObject(" ");
        org.apache.commons.cli.OptionBuilder optionBuilder58 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine54);
        java.util.List list59 = commandLine54.getArgList();
        java.lang.Object obj61 = commandLine54.getOptionObject("org.apache.commons.cli.MissingArgumentException: [ option:   :: null :: 0 ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(optionBuilder58);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        java.lang.String[] strArray17 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option[] optionArray18 = commandLine10.getOptions();
        org.apache.commons.cli.Option[] optionArray19 = commandLine10.getOptions();
        commandLine10.addArg("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(optionArray18);
        org.junit.Assert.assertNotNull(optionArray19);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        java.util.List list26 = commandLine25.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String str56 = commandLine54.getOptionValue("");
        org.apache.commons.cli.Option[] optionArray57 = commandLine54.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(optionArray57);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Options options84 = options11.addOption(" ", "arg", false, "arg");
        boolean boolean86 = options84.hasOption(" ");
        java.util.Collection collection87 = options84.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(collection87);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String[] strArray87 = commandLine84.getArgs();
        java.util.List list88 = commandLine84.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(list88);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.lang.String[] strArray88 = commandLine84.getOptionValues("arg");
        java.util.Iterator iterator89 = commandLine84.iterator();
        java.util.Iterator iterator90 = commandLine84.iterator();
        java.lang.String str92 = commandLine84.getOptionValue('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNotNull(iterator90);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String str88 = commandLine84.getOptionValue('4');
        java.util.List list89 = commandLine84.getArgList();
        java.lang.String[] strArray91 = commandLine84.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNull(strArray91);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        boolean boolean57 = commandLine54.hasOption("[ option:    :: null ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String str56 = commandLine54.getOptionValue("");
        boolean boolean58 = commandLine54.hasOption('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        boolean boolean15 = commandLine10.hasOption(" ");
        java.util.Iterator iterator16 = commandLine10.iterator();
        java.lang.String str18 = commandLine10.getOptionValue("org.apache.commons.cli.MissingArgumentException: [ option:   :: null :: 0 ]");
        java.util.Iterator iterator19 = commandLine10.iterator();
        boolean boolean21 = commandLine10.hasOption("org.apache.commons.cli.MissingArgumentException: [ option:   :: null :: 0 ]");
        java.util.List list22 = commandLine10.getArgList();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {} ] [ long {} ]", " ");
        java.lang.Object obj15 = commandLine10.getOptionObject("hi!");
        boolean boolean17 = commandLine10.hasOption(' ');
        java.lang.String[] strArray19 = commandLine10.getOptionValues('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " ");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray19);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        java.util.Collection collection46 = options17.getOptionGroups();
        org.apache.commons.cli.Option option47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options48 = options17.addOption(option47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(collection46);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        org.apache.commons.cli.Options options58 = options26.addOption("", false, "[ option:   :: null :: 0 ]");
        org.apache.commons.cli.Option option60 = options58.getOption("[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNull(option60);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str73 = option72.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup74 = options70.getOptionGroup(option72);
        java.util.Collection collection75 = options70.getOptionGroups();
        java.lang.String[] strArray76 = null;
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options70, strArray76, properties77, false);
        java.util.Iterator iterator80 = commandLine79.iterator();
        java.lang.String[] strArray82 = commandLine79.getOptionValues('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(collection75);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(iterator80);
        org.junit.Assert.assertNull(strArray82);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        java.lang.String str17 = commandLine10.getOptionValue("[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]");
        java.lang.String[] strArray19 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String str21 = commandLine10.getOptionValue(' ');
        java.lang.String str23 = commandLine10.getOptionValue('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        org.apache.commons.cli.Options options69 = options37.addOption("arg", " ", false, "");
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str73 = option72.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup74 = options70.getOptionGroup(option72);
        org.apache.commons.cli.Option option76 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str77 = option76.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup78 = options70.getOptionGroup(option76);
        boolean boolean79 = option76.hasArg();
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean82 = option81.isRequired();
        java.lang.String str83 = option81.getValue();
        option81.setLongOpt("");
        java.lang.String str86 = option81.getArgName();
        java.lang.String str87 = option81.getValue();
        boolean boolean88 = option76.equals((java.lang.Object) str87);
        org.apache.commons.cli.Options options89 = options37.addOption(option76);
        java.util.List list90 = options89.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(options69);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(option76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "arg" + "'", str77, "arg");
        org.junit.Assert.assertNull(optionGroup78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(options89);
        org.junit.Assert.assertNotNull(list90);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: arg", false);
        posixParser0.burstToken("org.apache.commons.cli.MissingArgumentException: arg", true);
        org.apache.commons.cli.Options options71 = null;
        java.lang.String[] strArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray74 = posixParser0.flatten(options71, strArray72, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        boolean boolean21 = options2.hasOption("");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.util.Iterator iterator55 = commandLine54.iterator();
        org.apache.commons.cli.OptionBuilder optionBuilder56 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine54);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(iterator55);
        org.junit.Assert.assertNotNull(optionBuilder56);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        java.lang.String[] strArray81 = commandLine79.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option option83 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str84 = option83.getArgName();
        option83.setLongOpt("");
        boolean boolean87 = option83.hasArgs();
        java.lang.String str88 = option83.getKey();
        commandLine79.addOption(option83);
        java.lang.String str90 = option83.getKey();
        org.apache.commons.cli.OptionBuilder optionBuilder91 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) str90);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertNotNull(option83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "arg" + "'", str84, "arg");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(optionBuilder91);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser55.parse(options57, strArray67, properties68);
        org.apache.commons.cli.Options options74 = options57.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Options options78 = options57.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray79 = null;
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options78, strArray79, properties80);
        java.util.Collection collection82 = options78.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(collection82);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg("[ option:   :: null ]");
        org.apache.commons.cli.Option option77 = null;
        commandLine74.addOption(option77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray80 = commandLine74.getOptionValues(" ");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setLongOpt("");
        boolean boolean62 = option58.hasArg();
        char char63 = option58.getValueSeparator();
        char char64 = option58.getValueSeparator();
        commandLine56.addOption(option58);
        option58.setArgName("hi!");
        option58.setRequired(true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '\000' + "'", char64 == '\000');
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("arg", "hi!");
        java.lang.String str15 = commandLine10.getOptionValue("arg");
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean18 = option17.isRequired();
        java.lang.String str19 = option17.getValue();
        option17.setType((java.lang.Object) 0);
        java.lang.String str22 = option17.toString();
        java.lang.String str23 = option17.toString();
        commandLine10.addOption(option17);
        org.apache.commons.cli.Option[] optionArray25 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str22, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str23, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertNotNull(optionArray25);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char82 = option81.getValueSeparator();
        java.lang.String str83 = option81.getKey();
        option81.setRequired(false);
        org.apache.commons.cli.Options options86 = options11.addOption(option81);
        boolean boolean88 = options11.hasOption("hi!");
        boolean boolean90 = options11.hasOption("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options94 = options11.addOption("org.apache.commons.cli.MissingArgumentException: [ option:   :: null :: 0 ]", false, "org.apache.commons.cli.MissingOptionException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + " " + "'", str83, " ");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser11.parse(options13, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = posixParser11.parse(options28, strArray53);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        option59.setLongOpt("");
        org.apache.commons.cli.Options options63 = options57.addOption(option59);
        java.lang.String[] strArray65 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser11.parse(options57, strArray65, true);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser69.parse(options70, strArray77, properties78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser68.parse(options70, strArray80, properties81);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options57, strArray80, properties83);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        org.apache.commons.cli.Option option88 = org.apache.commons.cli.OptionBuilder.create("");
        java.util.List list89 = option88.getValuesList();
        commandLine84.addOption(option88);
        boolean boolean91 = option88.hasValueSeparator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(option88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser57.parse(options58, strArray65, properties66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser56.parse(options58, strArray68, properties69);
        org.apache.commons.cli.CommandLine commandLine71 = posixParser26.parse(options43, strArray68);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str75 = option74.getArgName();
        option74.setLongOpt("");
        org.apache.commons.cli.Options options78 = options72.addOption(option74);
        java.lang.String[] strArray80 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine82 = posixParser26.parse(options72, strArray80, true);
        java.lang.String[] strArray83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options72, strArray83);
        org.apache.commons.cli.Option option86 = options72.getOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean88 = options72.hasOption("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
        java.util.Collection collection89 = options72.getOptionGroups();
        org.apache.commons.cli.Options options94 = options72.addOption("", "org.apache.commons.cli.ParseException: hi!", false, "[ option:   :: null ]");
        java.util.Collection collection95 = options72.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine71);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(option86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(collection89);
        org.junit.Assert.assertNotNull(options94);
        org.junit.Assert.assertNotNull(collection95);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setLongOpt("");
        boolean boolean62 = option58.hasArg();
        char char63 = option58.getValueSeparator();
        char char64 = option58.getValueSeparator();
        commandLine56.addOption(option58);
        option58.setArgName("hi!");
        java.lang.String str69 = option58.getValue((int) '4');
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '\000' + "'", char64 == '\000');
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine65 = posixParser55.parse(options56, strArray63, properties64);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str69 = option68.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup70 = options66.getOptionGroup(option68);
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser55.parse(options66, strArray77, properties78, false);
        boolean boolean82 = options66.hasOption("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.PosixParser posixParser83 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options84 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray91 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties92 = null;
        org.apache.commons.cli.CommandLine commandLine93 = posixParser83.parse(options84, strArray91, properties92);
        java.util.List list94 = commandLine93.getArgList();
        java.lang.String[] strArray95 = commandLine93.getArgs();
        java.lang.String[] strArray97 = posixParser0.flatten(options66, strArray95, true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(option68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "arg" + "'", str69, "arg");
        org.junit.Assert.assertNull(optionGroup70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNotNull(list94);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strArray97);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String str57 = commandLine54.getOptionValue('#', "arg");
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str61 = option60.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup62 = options58.getOptionGroup(option60);
        option60.setArgName("arg");
        org.apache.commons.cli.Option option66 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str67 = option66.getArgName();
        java.lang.String str68 = option66.getValue();
        boolean boolean69 = option60.equals((java.lang.Object) option66);
        int int70 = option60.getArgs();
        char char71 = option60.getValueSeparator();
        commandLine54.addOption(option60);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertNull(optionGroup62);
        org.junit.Assert.assertNotNull(option66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "arg" + "'", str67, "arg");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + char71 + "' != '" + '\000' + "'", char71 == '\000');
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser55.parse(options57, strArray67, properties68);
        org.apache.commons.cli.Options options74 = options57.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Options options78 = options57.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray79 = null;
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options78, strArray79, properties80);
        org.apache.commons.cli.Option[] optionArray82 = commandLine81.getOptions();
        boolean boolean84 = commandLine81.hasOption("[ option:   :: null ]");
        java.lang.String str87 = commandLine81.getOptionValue("[ option:    :: hi! ]", "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(optionArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]" + "'", str87, "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup61 = options57.getOptionGroup(option59);
        java.lang.String[] strArray62 = null;
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options57, strArray62, properties63);
        org.apache.commons.cli.Option option66 = options57.getOption("[ option:    :: hi! ]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNull(option66);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg("[ option:   :: null ]");
        org.apache.commons.cli.Option option77 = null;
        commandLine74.addOption(option77);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = commandLine74.hasOption("[ option:    :: hi! ]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str78 = option77.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup79 = options75.getOptionGroup(option77);
        option77.setArgName("arg");
        boolean boolean82 = option77.hasValueSeparator();
        option77.setRequired(false);
        java.util.ListIterator listIterator85 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option77, listIterator85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNull(optionGroup79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.util.List list56 = commandLine54.getArgList();
        java.lang.String str59 = commandLine54.getOptionValue('#', "[ option:   :: null :: 0 ]");
        boolean boolean61 = commandLine54.hasOption('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str59, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException:  ", true);
        org.apache.commons.cli.Option option83 = null;
        java.util.ListIterator listIterator84 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option83, listIterator84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        boolean boolean27 = options11.hasOption("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str30 = option29.getArgName();
        option29.setLongOpt("");
        boolean boolean33 = option29.hasArgs();
        java.lang.String str34 = option29.getDescription();
        java.lang.String str36 = option29.getValue((int) (short) -1);
        org.apache.commons.cli.Options options37 = options11.addOption(option29);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(options37);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str73 = option72.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup74 = options70.getOptionGroup(option72);
        java.util.Collection collection75 = options70.getOptionGroups();
        java.lang.String[] strArray76 = null;
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options70, strArray76, properties77, false);
        java.util.Iterator iterator80 = commandLine79.iterator();
        org.apache.commons.cli.Option option84 = new org.apache.commons.cli.Option("", false, "org.apache.commons.cli.MissingOptionException: ");
        commandLine79.addOption(option84);
        org.apache.commons.cli.Option option87 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean88 = option87.isRequired();
        java.lang.String str89 = option87.getValue();
        option87.setLongOpt("");
        java.lang.String str92 = option87.getArgName();
        option87.setValueSeparator('a');
        boolean boolean95 = option87.hasArgs();
        boolean boolean96 = option84.equals((java.lang.Object) boolean95);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(option72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(collection75);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(iterator80);
        org.junit.Assert.assertNotNull(option87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "arg" + "'", str92, "arg");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str29 = option28.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup30 = options26.getOptionGroup(option28);
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str33 = option32.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup34 = options26.getOptionGroup(option32);
        org.apache.commons.cli.Option option36 = options26.getOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser37.parse(options39, strArray49, properties50);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser53.parse(options54, strArray61, properties62);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser52.parse(options54, strArray64, properties65);
        org.apache.commons.cli.PosixParser posixParser67 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser68.parse(options69, strArray76, properties77);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser67.parse(options69, strArray79, properties80);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser37.parse(options54, strArray79);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option85 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str86 = option85.getArgName();
        option85.setLongOpt("");
        org.apache.commons.cli.Options options89 = options83.addOption(option85);
        java.lang.String[] strArray91 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine93 = posixParser37.parse(options83, strArray91, true);
        java.lang.String[] strArray95 = posixParser0.flatten(options26, strArray91, true);
        java.lang.String str96 = options26.toString();
        java.util.Collection collection97 = options26.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(optionGroup30);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg");
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNull(option36);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNotNull(options89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str96, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection97);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setLongOpt("");
        boolean boolean62 = option58.hasArg();
        char char63 = option58.getValueSeparator();
        char char64 = option58.getValueSeparator();
        commandLine56.addOption(option58);
        java.util.List list66 = commandLine56.getArgList();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '\000' + "'", char64 == '\000');
        org.junit.Assert.assertNotNull(list66);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Options options23 = options2.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.util.Collection collection24 = options23.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(collection24);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.lang.Object obj57 = commandLine54.getOptionObject(" ");
        org.apache.commons.cli.OptionBuilder optionBuilder58 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) commandLine54);
        java.lang.String[] strArray59 = commandLine54.getArgs();
        java.lang.String str62 = commandLine54.getOptionValue(' ', "");
        java.lang.Object obj64 = commandLine54.getOptionObject('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(optionBuilder58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        java.util.Iterator iterator46 = commandLine45.iterator();
        commandLine45.addArg("");
        java.lang.String str50 = commandLine45.getOptionValue('#');
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        org.apache.commons.cli.Option[] optionArray14 = commandLine10.getOptions();
        java.lang.String str16 = commandLine10.getOptionValue('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(optionArray14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setLongOpt("");
        boolean boolean62 = option58.hasArg();
        char char63 = option58.getValueSeparator();
        char char64 = option58.getValueSeparator();
        commandLine56.addOption(option58);
        option58.setArgName("hi!");
        java.lang.String str68 = option58.getOpt();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '\000' + "'", char64 == '\000');
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser55.parse(options57, strArray67, properties68);
        org.apache.commons.cli.Options options74 = options57.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Options options78 = options57.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray79 = null;
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options78, strArray79, properties80);
        org.apache.commons.cli.Option[] optionArray82 = commandLine81.getOptions();
        boolean boolean84 = commandLine81.hasOption("[ option:   :: null ]");
        boolean boolean86 = commandLine81.hasOption(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(optionArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.util.Collection collection1 = options0.getOptionGroups();
        java.util.List list2 = options0.helpOptions();
        java.util.Collection collection3 = options0.getOptions();
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser4.parse(options5, strArray12, properties13);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str30 = option29.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup31 = options27.getOptionGroup(option29);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser16.parse(options27, strArray38, properties39, false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str56 = option55.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup57 = options53.getOptionGroup(option55);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser42.parse(options53, strArray64, properties65, false);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser68.parse(options69, strArray76, properties77);
        java.lang.String[] strArray80 = posixParser16.flatten(options53, strArray76, true);
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser4.parse(options15, strArray76, properties81, false);
        java.lang.String[] strArray85 = commandLine83.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option option87 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str88 = option87.getArgName();
        option87.setLongOpt("");
        boolean boolean91 = option87.hasArgs();
        java.lang.String str92 = option87.getKey();
        commandLine83.addOption(option87);
        org.apache.commons.cli.OptionGroup optionGroup94 = options0.getOptionGroup(option87);
        java.util.Collection collection95 = options0.getOptionGroups();
        org.junit.Assert.assertNotNull(collection1);
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(collection3);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertNotNull(option87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNull(optionGroup94);
        org.junit.Assert.assertNotNull(collection95);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Option option58 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str59 = option58.getArgName();
        option58.setLongOpt("");
        boolean boolean62 = option58.hasArg();
        char char63 = option58.getValueSeparator();
        char char64 = option58.getValueSeparator();
        commandLine56.addOption(option58);
        option58.setArgName("hi!");
        java.lang.String str69 = option58.getValue("");
        boolean boolean70 = option58.hasLongOpt();
        option58.setDescription("[ option:    :: hi! ]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + char63 + "' != '" + '\000' + "'", char63 == '\000');
        org.junit.Assert.assertTrue("'" + char64 + "' != '" + '\000' + "'", char64 == '\000');
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg("[ option:   :: null ]");
        org.apache.commons.cli.Option option77 = null;
        commandLine74.addOption(option77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = commandLine74.getOptionValue("[ Options: [ short {} ] [ long {} ]", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option option73 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char74 = option73.getValueSeparator();
        boolean boolean75 = option73.hasArgName();
        int int76 = option73.getId();
        option73.setValueSeparator(' ');
        boolean boolean79 = option73.hasLongOpt();
        org.apache.commons.cli.OptionGroup optionGroup80 = options37.getOptionGroup(option73);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(option73);
        org.junit.Assert.assertTrue("'" + char74 + "' != '" + '\000' + "'", char74 == '\000');
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 32 + "'", int76 == 32);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(optionGroup80);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg(" ");
        java.lang.Object obj78 = commandLine74.getOptionObject('4');
        java.lang.String str80 = commandLine74.getOptionValue("arg");
        java.lang.String[] strArray81 = commandLine74.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg("[ option:   :: null ]");
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean79 = option78.isRequired();
        java.lang.String str80 = option78.getValue();
        java.lang.String str82 = option78.getValue("arg");
        java.util.List list83 = option78.getValuesList();
        option78.clearValues();
        org.apache.commons.cli.Options options85 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option87 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str88 = option87.getArgName();
        option87.setLongOpt("");
        org.apache.commons.cli.Options options91 = options85.addOption(option87);
        java.util.Collection collection92 = options85.getOptionGroups();
        option78.setType((java.lang.Object) options85);
        commandLine74.addOption(option78);
        option78.setRequired(true);
        java.lang.String str98 = option78.getValue("org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "arg" + "'", str82, "arg");
        org.junit.Assert.assertNotNull(list83);
        org.junit.Assert.assertNotNull(option87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertNotNull(options91);
        org.junit.Assert.assertNotNull(collection92);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "org.apache.commons.cli.MissingArgumentException: arg" + "'", str98, "org.apache.commons.cli.MissingArgumentException: arg");
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options15 = null;
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str30 = option29.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup31 = options27.getOptionGroup(option29);
        java.lang.String str32 = options27.toString();
        java.util.List list33 = options27.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser34 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser34.parse(options35, strArray42, properties43);
        java.lang.String[] strArray46 = posixParser16.flatten(options27, strArray42, true);
        java.util.Properties properties47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options15, strArray46, properties47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str32, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(strArray46);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.Options options19 = options2.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Option option21 = options19.getOption("[ option:   :: null :: 0 ]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options25 = options19.addOption("org.apache.commons.cli.MissingArgumentException: [ option:   :: null :: 0 ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(option21);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Options options84 = options11.addOption(" ", "arg", false, "arg");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options89 = options11.addOption("org.apache.commons.cli.ParseException: hi!", "", true, "org.apache.commons.cli.MissingArgumentException: arg");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(options84);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser55.parse(options57, strArray67, properties68);
        org.apache.commons.cli.Options options74 = options57.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Options options78 = options57.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray79 = null;
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options78, strArray79, properties80);
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str85 = option84.getArgName();
        option84.setLongOpt("");
        org.apache.commons.cli.Options options88 = options82.addOption(option84);
        org.apache.commons.cli.OptionBuilder optionBuilder89 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options82);
        java.lang.String[] strArray90 = null;
        java.util.Properties properties91 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options82, strArray90, properties91);
        java.lang.String str93 = options82.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "arg" + "'", str85, "arg");
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(optionBuilder89);
        org.junit.Assert.assertNotNull(commandLine92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]" + "'", str93, "[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]");
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('4', "org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option[] optionArray15 = commandLine10.getOptions();
        org.apache.commons.cli.Option[] optionArray16 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.MissingArgumentException: arg" + "'", str14, "org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(optionArray15);
        org.junit.Assert.assertNotNull(optionArray16);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        java.lang.String[] strArray17 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.Object obj19 = commandLine10.getOptionObject(' ');
        java.lang.Object obj21 = commandLine10.getOptionObject('#');
        java.util.List list22 = commandLine10.getArgList();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", " ");
        org.apache.commons.cli.Option option27 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean28 = option27.isRequired();
        option25.setType((java.lang.Object) option27);
        option27.setOptionalArg(false);
        java.lang.String str33 = option27.getValue("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
        commandLine10.addOption(option27);
        // The following exception was thrown during execution in test generation
        try {
            option27.addValue("");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(option27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]" + "'", str33, "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser55.parse(options57, strArray67, properties68);
        org.apache.commons.cli.Options options74 = options57.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Options options78 = options57.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray79 = null;
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options78, strArray79, properties80);
        org.apache.commons.cli.Option[] optionArray82 = commandLine81.getOptions();
        boolean boolean84 = commandLine81.hasOption("[ option:   :: null ]");
        java.lang.String str87 = commandLine81.getOptionValue("org.apache.commons.cli.ParseException: hi!", "org.apache.commons.cli.ParseException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(optionArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org.apache.commons.cli.ParseException: hi!" + "'", str87, "org.apache.commons.cli.ParseException: hi!");
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String[] strArray87 = commandLine84.getArgs();
        java.lang.String str89 = commandLine84.getOptionValue(' ');
        boolean boolean91 = commandLine84.hasOption('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char82 = option81.getValueSeparator();
        java.lang.String str83 = option81.getKey();
        option81.setRequired(false);
        org.apache.commons.cli.Options options86 = options11.addOption(option81);
        org.apache.commons.cli.Options options87 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option89 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str90 = option89.getArgName();
        option89.setLongOpt("");
        org.apache.commons.cli.Options options93 = options87.addOption(option89);
        option81.setType((java.lang.Object) option89);
        // The following exception was thrown during execution in test generation
        try {
            option81.addValue("org.apache.commons.cli.MissingOptionException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: NO_ARGS_ALLOWED");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + " " + "'", str83, " ");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertNotNull(option89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "arg" + "'", str90, "arg");
        org.junit.Assert.assertNotNull(options93);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        java.lang.Object obj89 = commandLine84.getOptionObject(' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        org.apache.commons.cli.Options options75 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str78 = option77.getArgName();
        option77.setLongOpt("");
        org.apache.commons.cli.Options options81 = options75.addOption(option77);
        org.apache.commons.cli.OptionBuilder optionBuilder82 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options75);
        java.util.List list83 = options75.helpOptions();
        java.lang.String[] strArray89 = new java.lang.String[] { "org.apache.commons.cli.MissingArgumentException: arg", "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]", " ", "[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]", " " };
        java.util.Properties properties90 = null;
        org.apache.commons.cli.CommandLine commandLine91 = posixParser0.parse(options75, strArray89, properties90);
        java.lang.String str92 = options75.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNotNull(options81);
        org.junit.Assert.assertNotNull(optionBuilder82);
        org.junit.Assert.assertNotNull(list83);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(commandLine91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]" + "'", str92, "[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]");
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("[ Options: [ short {} ] [ long {} ]", " ");
        java.lang.Object obj15 = commandLine10.getOptionObject("hi!");
        java.lang.String[] strArray16 = commandLine10.getArgs();
        boolean boolean18 = commandLine10.hasOption('\000');
        java.util.List list19 = commandLine10.getArgList();
        org.apache.commons.cli.Option[] optionArray20 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " ");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(optionArray20);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.util.Iterator iterator12 = commandLine10.iterator();
        java.lang.Object obj14 = commandLine10.getOptionObject("");
        java.lang.String str16 = commandLine10.getOptionValue('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.lang.String[] strArray88 = commandLine84.getOptionValues("arg");
        java.util.Iterator iterator89 = commandLine84.iterator();
        org.apache.commons.cli.Option option91 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str92 = option91.getDescription();
        option91.setRequired(true);
        commandLine84.addOption(option91);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = option91.getId();
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 0");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNotNull(option91);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.Iterator iterator11 = commandLine10.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean73 = options37.hasOption("");
        boolean boolean75 = options37.hasOption(" ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options80 = options37.addOption("[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]", "[ Options: [ short {} ] [ long {} ]", false, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        java.lang.String str18 = commandLine10.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", "");
        java.lang.String[] strArray20 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(strArray20);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        java.lang.String str17 = commandLine10.getOptionValue("[ Options: [ short {=[ option:   :: [ Options: [ short {} ] [ long {} ] ]} ] [ long {[ option:   :: null :: 0 ]=[ option:  [ option:   :: null :: 0 ] +ARG ::   ]} ]");
        java.lang.String[] strArray19 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.OptionBuilder optionBuilder20 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) "org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertNotNull(optionBuilder20);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        java.lang.String[] strArray89 = commandLine84.getOptionValues("hi!");
        boolean boolean91 = commandLine84.hasOption("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg("[ option:   :: null ]");
        org.apache.commons.cli.Option option78 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean79 = option78.isRequired();
        java.lang.String str80 = option78.getValue();
        java.lang.String str82 = option78.getValue("arg");
        java.util.List list83 = option78.getValuesList();
        option78.clearValues();
        org.apache.commons.cli.Options options85 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option87 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str88 = option87.getArgName();
        option87.setLongOpt("");
        org.apache.commons.cli.Options options91 = options85.addOption(option87);
        java.util.Collection collection92 = options85.getOptionGroups();
        option78.setType((java.lang.Object) options85);
        commandLine74.addOption(option78);
        org.apache.commons.cli.Option[] optionArray95 = commandLine74.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(option78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "arg" + "'", str82, "arg");
        org.junit.Assert.assertNotNull(list83);
        org.junit.Assert.assertNotNull(option87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertNotNull(options91);
        org.junit.Assert.assertNotNull(collection92);
        org.junit.Assert.assertNotNull(optionArray95);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        java.lang.String[] strArray17 = commandLine10.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.Object obj19 = commandLine10.getOptionObject(' ');
        java.lang.Object obj21 = commandLine10.getOptionObject('#');
        org.apache.commons.cli.Option[] optionArray22 = commandLine10.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(optionArray22);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        java.lang.String str18 = commandLine10.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", "");
        java.lang.String[] strArray20 = commandLine10.getOptionValues('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(strArray20);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser57.parse(options58, strArray65, properties66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser56.parse(options58, strArray68, properties69);
        org.apache.commons.cli.CommandLine commandLine71 = posixParser26.parse(options43, strArray68);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str75 = option74.getArgName();
        option74.setLongOpt("");
        org.apache.commons.cli.Options options78 = options72.addOption(option74);
        java.lang.String[] strArray80 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine82 = posixParser26.parse(options72, strArray80, true);
        java.lang.String[] strArray83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options72, strArray83);
        org.apache.commons.cli.Option option85 = null;
        java.util.ListIterator listIterator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option85, listIterator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine71);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg(" ");
        java.lang.Object obj78 = commandLine74.getOptionObject('4');
        java.lang.String str80 = commandLine74.getOptionValue("arg");
        boolean boolean82 = commandLine74.hasOption("[ option:   :: null :: 0 ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        java.lang.String[] strArray89 = commandLine84.getOptionValues("hi!");
        boolean boolean91 = commandLine84.hasOption('4');
        java.lang.String str93 = commandLine84.getOptionValue("hi!");
        java.lang.Object obj95 = commandLine84.getOptionObject("");
        java.lang.Object obj97 = commandLine84.getOptionObject('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        java.util.List list56 = commandLine54.getArgList();
        java.lang.String str59 = commandLine54.getOptionValue('#', "[ option:   :: null :: 0 ]");
        java.lang.String str62 = commandLine54.getOptionValue('4', "hi!");
        org.apache.commons.cli.Option option64 = org.apache.commons.cli.OptionBuilder.create(' ');
        option64.setValueSeparator('#');
        option64.setArgName("org.apache.commons.cli.MissingOptionException: ");
        commandLine54.addOption(option64);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ option:   :: null :: 0 ]" + "'", str59, "[ option:   :: null :: 0 ]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(option64);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray71 = null;
        java.util.Properties properties72 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser0.parse(options70, strArray71, properties72, false);
        commandLine74.addArg(" ");
        java.lang.Object obj78 = commandLine74.getOptionObject('4');
        java.lang.String str80 = commandLine74.getOptionValue("arg");
        commandLine74.addArg("arg");
        java.lang.String[] strArray83 = commandLine74.getArgs();
        java.lang.String[] strArray84 = commandLine74.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        org.apache.commons.cli.Option option66 = options37.getOption("[ option:    :: null ]");
        org.apache.commons.cli.Option option68 = options37.getOption("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNull(option66);
        org.junit.Assert.assertNull(option68);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("arg", "hi!");
        java.lang.String[] strArray15 = commandLine10.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(strArray15);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option2 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str3 = option2.getArgName();
        option2.setLongOpt("");
        org.apache.commons.cli.Options options6 = options0.addOption(option2);
        org.apache.commons.cli.OptionBuilder optionBuilder7 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options0);
        java.util.List list8 = options0.helpOptions();
        java.lang.String str9 = options0.toString();
        org.apache.commons.cli.Option option14 = new org.apache.commons.cli.Option("", "arg", true, "");
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser15.parse(options16, strArray23, properties24);
        java.util.List list26 = commandLine25.getArgList();
        boolean boolean27 = option14.equals((java.lang.Object) list26);
        boolean boolean28 = option14.hasLongOpt();
        java.lang.String str29 = option14.getValue();
        org.apache.commons.cli.OptionGroup optionGroup30 = options0.getOptionGroup(option14);
        org.junit.Assert.assertNotNull(option2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg");
        org.junit.Assert.assertNotNull(options6);
        org.junit.Assert.assertNotNull(optionBuilder7);
        org.junit.Assert.assertNotNull(list8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[ Options: [ short {=[ option:    :: null :: [ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ] ]} ] [ long {=[ option:    :: null :: [ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ] ]} ]" + "'", str9, "[ Options: [ short {=[ option:    :: null :: [ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ] ]} ] [ long {=[ option:    :: null :: [ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ] ]} ]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(optionGroup30);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        java.lang.String[] strArray27 = new java.lang.String[] {};
        java.util.Properties properties28 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser15.parse(options17, strArray27, properties28);
        org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser31 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser31.parse(options32, strArray39, properties40);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        java.util.Properties properties43 = null;
        org.apache.commons.cli.CommandLine commandLine44 = posixParser30.parse(options32, strArray42, properties43);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser0.parse(options17, strArray42);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option48 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str49 = option48.getArgName();
        option48.setLongOpt("");
        org.apache.commons.cli.Options options52 = options46.addOption(option48);
        java.lang.String[] strArray54 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine56 = posixParser0.parse(options46, strArray54, true);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup61 = options57.getOptionGroup(option59);
        java.lang.String[] strArray62 = null;
        java.util.Properties properties63 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options57, strArray62, properties63);
        java.util.Iterator iterator65 = commandLine64.iterator();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(option48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg");
        org.junit.Assert.assertNotNull(options52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(iterator65);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('4', "org.apache.commons.cli.MissingArgumentException: arg");
        java.util.List list15 = commandLine10.getArgList();
        java.lang.Object obj17 = commandLine10.getOptionObject('#');
        java.lang.String str20 = commandLine10.getOptionValue('4', "org.apache.commons.cli.UnrecognizedOptionException:  ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.MissingArgumentException: arg" + "'", str14, "org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException:  " + "'", str20, "org.apache.commons.cli.UnrecognizedOptionException:  ");
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String[] strArray87 = commandLine84.getArgs();
        java.lang.String str89 = commandLine84.getOptionValue(' ');
        java.lang.Object obj91 = commandLine84.getOptionObject('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Option option81 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char82 = option81.getValueSeparator();
        java.lang.String str83 = option81.getKey();
        option81.setRequired(false);
        org.apache.commons.cli.Options options86 = options11.addOption(option81);
        org.apache.commons.cli.Options options87 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option89 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str90 = option89.getArgName();
        option89.setLongOpt("");
        org.apache.commons.cli.Options options93 = options87.addOption(option89);
        option81.setType((java.lang.Object) option89);
        option89.setArgName("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg");
        boolean boolean97 = option89.hasLongOpt();
        java.lang.String str98 = option89.getKey();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(option81);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + " " + "'", str83, " ");
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertNotNull(option89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "arg" + "'", str90, "arg");
        org.junit.Assert.assertNotNull(options93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser2.parse(options3, strArray10, properties11);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = posixParser1.parse(options3, strArray13, properties14);
        org.apache.commons.cli.Options options20 = options3.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        java.util.List list21 = options20.helpOptions();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException:  ", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", "[ option:   :: null ]", " " };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options20, strArray26, properties27, true);
        java.lang.String[] strArray31 = commandLine29.getOptionValues('a');
        java.lang.String[] strArray32 = commandLine29.getArgs();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option(" ", " ");
        commandLine29.addOption(option35);
        java.util.List list37 = commandLine29.getArgList();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(list37);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        boolean boolean88 = commandLine84.hasOption('4');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser57.parse(options58, strArray65, properties66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser56.parse(options58, strArray68, properties69);
        org.apache.commons.cli.CommandLine commandLine71 = posixParser26.parse(options43, strArray68);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str75 = option74.getArgName();
        option74.setLongOpt("");
        org.apache.commons.cli.Options options78 = options72.addOption(option74);
        java.lang.String[] strArray80 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine82 = posixParser26.parse(options72, strArray80, true);
        java.lang.String[] strArray83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options72, strArray83);
        org.apache.commons.cli.Option option86 = options72.getOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean88 = options72.hasOption("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
        java.util.Collection collection89 = options72.getOptionGroups();
        org.apache.commons.cli.Options options94 = options72.addOption("", "org.apache.commons.cli.ParseException: hi!", false, "[ option:   :: null ]");
        java.util.List list95 = options94.getRequiredOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine71);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(option86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(collection89);
        org.junit.Assert.assertNotNull(options94);
        org.junit.Assert.assertNotNull(list95);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        java.lang.String[] strArray52 = null;
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options37, strArray52, properties53);
        org.apache.commons.cli.PosixParser posixParser55 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        java.util.Properties properties68 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser55.parse(options57, strArray67, properties68);
        org.apache.commons.cli.Options options74 = options57.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        org.apache.commons.cli.Options options78 = options57.addOption("", false, "[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray79 = null;
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser0.parse(options78, strArray79, properties80);
        org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str85 = option84.getArgName();
        option84.setLongOpt("");
        org.apache.commons.cli.Options options88 = options82.addOption(option84);
        org.apache.commons.cli.OptionBuilder optionBuilder89 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options82);
        java.lang.String[] strArray90 = null;
        java.util.Properties properties91 = null;
        org.apache.commons.cli.CommandLine commandLine92 = posixParser0.parse(options82, strArray90, properties91);
        posixParser0.burstToken("[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]", true);
        posixParser0.burstToken("[ option:   :: null :: 0 ]", false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(options74);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(option84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "arg" + "'", str85, "arg");
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(optionBuilder89);
        org.junit.Assert.assertNotNull(commandLine92);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String str57 = commandLine54.getOptionValue('#', "arg");
        java.lang.String str59 = commandLine54.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        posixParser0.burstToken("arg", false);
        posixParser0.burstToken("[ option:   :: null :: 0 ]", false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str35 = option34.getArgName();
        option34.setLongOpt("");
        org.apache.commons.cli.Options options38 = options32.addOption(option34);
        org.apache.commons.cli.OptionBuilder optionBuilder39 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options32);
        java.util.List list40 = options32.helpOptions();
        boolean boolean42 = options32.hasOption("[ option:    :: null ]");
        java.util.List list43 = options32.helpOptions();
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties53 = null;
        org.apache.commons.cli.CommandLine commandLine54 = posixParser44.parse(options45, strArray52, properties53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str58 = option57.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup59 = options55.getOptionGroup(option57);
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties67 = null;
        org.apache.commons.cli.CommandLine commandLine69 = posixParser44.parse(options55, strArray66, properties67, false);
        java.util.Properties properties70 = null;
        org.apache.commons.cli.CommandLine commandLine71 = posixParser0.parse(options32, strArray66, properties70);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "arg" + "'", str35, "arg");
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(optionBuilder39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(option57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "arg" + "'", str58, "arg");
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(commandLine71);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.util.Iterator iterator55 = commandLine54.iterator();
        java.lang.Object obj57 = commandLine54.getOptionObject('a');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(iterator55);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.lang.String str13 = commandLine10.getOptionValue("arg", "hi!");
        java.lang.String str16 = commandLine10.getOptionValue("hi!", "");
        java.lang.Object obj18 = commandLine10.getOptionObject("hi!");
        java.lang.String str20 = commandLine10.getOptionValue('#');
        commandLine10.addArg("[ option:    :: hi! ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        org.apache.commons.cli.Option[] optionArray87 = commandLine84.getOptions();
        java.lang.String[] strArray89 = commandLine84.getOptionValues("");
        org.apache.commons.cli.Option[] optionArray90 = commandLine84.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(optionArray87);
        org.junit.Assert.assertNull(strArray89);
        org.junit.Assert.assertNotNull(optionArray90);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.util.Iterator iterator87 = commandLine84.iterator();
        java.lang.String[] strArray89 = commandLine84.getOptionValues("hi!");
        java.lang.String str91 = commandLine84.getOptionValue('a');
        java.lang.String str94 = commandLine84.getOptionValue("org.apache.commons.cli.MissingArgumentException: arg", "");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(iterator87);
        org.junit.Assert.assertNull(strArray89);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.lang.String[] strArray55 = commandLine54.getArgs();
        boolean boolean57 = commandLine54.hasOption('#');
        org.apache.commons.cli.OptionBuilder optionBuilder58 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) boolean57);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(optionBuilder58);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str29 = option28.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup30 = options26.getOptionGroup(option28);
        org.apache.commons.cli.Option option32 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str33 = option32.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup34 = options26.getOptionGroup(option32);
        org.apache.commons.cli.Option option36 = options26.getOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser37.parse(options39, strArray49, properties50);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser53 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser53.parse(options54, strArray61, properties62);
        java.lang.String[] strArray64 = new java.lang.String[] {};
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser52.parse(options54, strArray64, properties65);
        org.apache.commons.cli.PosixParser posixParser67 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser68.parse(options69, strArray76, properties77);
        java.lang.String[] strArray79 = new java.lang.String[] {};
        java.util.Properties properties80 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser67.parse(options69, strArray79, properties80);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser37.parse(options54, strArray79);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option85 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str86 = option85.getArgName();
        option85.setLongOpt("");
        org.apache.commons.cli.Options options89 = options83.addOption(option85);
        java.lang.String[] strArray91 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine93 = posixParser37.parse(options83, strArray91, true);
        java.lang.String[] strArray95 = posixParser0.flatten(options26, strArray91, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options99 = options26.addOption("[ option:   :: null ]", true, "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(optionGroup30);
        org.junit.Assert.assertNotNull(option32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "arg" + "'", str33, "arg");
        org.junit.Assert.assertNull(optionGroup34);
        org.junit.Assert.assertNull(option36);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(option85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "arg" + "'", str86, "arg");
        org.junit.Assert.assertNotNull(options89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(commandLine93);
        org.junit.Assert.assertNotNull(strArray95);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String str88 = commandLine84.getOptionValue('4');
        java.util.List list89 = commandLine84.getArgList();
        java.lang.String str92 = commandLine84.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", "arg");
        java.lang.String[] strArray94 = commandLine84.getOptionValues('\000');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "arg" + "'", str92, "arg");
        org.junit.Assert.assertNull(strArray94);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        java.lang.String str17 = commandLine10.getOptionValue("");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = null;
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser13 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser13.parse(options14, strArray21, properties22);
        java.lang.String[] strArray24 = new java.lang.String[] {};
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser12.parse(options14, strArray24, properties25);
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        java.util.Properties properties40 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser27.parse(options29, strArray39, properties40);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties52 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser43.parse(options44, strArray51, properties52);
        java.lang.String[] strArray54 = new java.lang.String[] {};
        java.util.Properties properties55 = null;
        org.apache.commons.cli.CommandLine commandLine56 = posixParser42.parse(options44, strArray54, properties55);
        org.apache.commons.cli.CommandLine commandLine57 = posixParser12.parse(options29, strArray54);
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str61 = option60.getArgName();
        option60.setLongOpt("");
        org.apache.commons.cli.Options options64 = options58.addOption(option60);
        java.lang.String[] strArray66 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine68 = posixParser12.parse(options58, strArray66, true);
        java.util.Properties properties69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine70 = posixParser0.parse(options11, strArray66, properties69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(option60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "arg" + "'", str61, "arg");
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.cli.Options options0 = new org.apache.commons.cli.Options();
        java.util.Collection collection1 = options0.getOptionGroups();
        java.util.List list2 = options0.helpOptions();
        java.util.Collection collection3 = options0.getOptions();
        org.apache.commons.cli.PosixParser posixParser4 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser4.parse(options5, strArray12, properties13);
        org.apache.commons.cli.Options options15 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties25 = null;
        org.apache.commons.cli.CommandLine commandLine26 = posixParser16.parse(options17, strArray24, properties25);
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option29 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str30 = option29.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup31 = options27.getOptionGroup(option29);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine41 = posixParser16.parse(options27, strArray38, properties39, false);
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str56 = option55.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup57 = options53.getOptionGroup(option55);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser42.parse(options53, strArray64, properties65, false);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options69 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine78 = posixParser68.parse(options69, strArray76, properties77);
        java.lang.String[] strArray80 = posixParser16.flatten(options53, strArray76, true);
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine83 = posixParser4.parse(options15, strArray76, properties81, false);
        java.lang.String[] strArray85 = commandLine83.getOptionValues("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option option87 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str88 = option87.getArgName();
        option87.setLongOpt("");
        boolean boolean91 = option87.hasArgs();
        java.lang.String str92 = option87.getKey();
        commandLine83.addOption(option87);
        org.apache.commons.cli.OptionGroup optionGroup94 = options0.getOptionGroup(option87);
        option87.setValueSeparator('a');
        org.junit.Assert.assertNotNull(collection1);
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(collection3);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(commandLine26);
        org.junit.Assert.assertNotNull(option29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "arg" + "'", str30, "arg");
        org.junit.Assert.assertNull(optionGroup31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(option55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNull(strArray85);
        org.junit.Assert.assertNotNull(option87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "arg" + "'", str88, "arg");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNull(optionGroup94);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        org.apache.commons.cli.Options options58 = options26.addOption("", false, "[ option:   :: null :: 0 ]");
        java.lang.String str59 = options26.toString();
        java.util.List list60 = options26.helpOptions();
        java.lang.String str61 = options26.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]" + "'", str59, "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]" + "'", str61, "[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.Object obj86 = commandLine84.getOptionObject(" ");
        java.lang.String[] strArray88 = commandLine84.getOptionValues("arg");
        java.util.Iterator iterator89 = commandLine84.iterator();
        org.apache.commons.cli.Option option91 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str92 = option91.getDescription();
        option91.setRequired(true);
        commandLine84.addOption(option91);
        java.lang.Object obj97 = commandLine84.getOptionObject("org.apache.commons.cli.MissingOptionException: ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(iterator89);
        org.junit.Assert.assertNotNull(option91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        java.util.Collection collection65 = options37.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options69 = options37.addOption("[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]", false, "[ option:   :: null :: 0 ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(collection65);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('4', "org.apache.commons.cli.MissingArgumentException: arg");
        java.util.List list15 = commandLine10.getArgList();
        org.apache.commons.cli.OptionBuilder optionBuilder16 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) list15);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.MissingArgumentException: arg" + "'", str14, "org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(optionBuilder16);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        posixParser0.burstToken("arg", false);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.util.List list30 = options29.getRequiredOptions();
        java.util.List list31 = options29.helpOptions();
        org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties41 = null;
        org.apache.commons.cli.CommandLine commandLine42 = posixParser32.parse(options33, strArray40, properties41);
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str46 = option45.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup47 = options43.getOptionGroup(option45);
        java.lang.String str48 = options43.toString();
        java.util.List list49 = options43.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser50 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser50.parse(options51, strArray58, properties59);
        java.lang.String[] strArray62 = posixParser32.flatten(options43, strArray58, true);
        java.lang.String[] strArray64 = posixParser0.flatten(options29, strArray62, true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(option45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str48, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.lang.String str86 = commandLine84.getOptionValue("arg");
        java.lang.String str88 = commandLine84.getOptionValue('4');
        java.util.List list89 = commandLine84.getArgList();
        java.lang.String[] strArray90 = commandLine84.getArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(list89);
        org.junit.Assert.assertNotNull(strArray90);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.String str15 = commandLine10.getOptionValue("hi!");
        org.apache.commons.cli.Option option17 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char18 = option17.getValueSeparator();
        boolean boolean19 = option17.hasArgName();
        int int20 = option17.getId();
        option17.setValueSeparator(' ');
        char char23 = option17.getValueSeparator();
        java.lang.String str24 = option17.getValue();
        commandLine10.addOption(option17);
        org.apache.commons.cli.Option[] optionArray26 = commandLine10.getOptions();
        boolean boolean28 = commandLine10.hasOption("org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String[] strArray30 = commandLine10.getOptionValues('4');
        java.lang.String str32 = commandLine10.getOptionValue('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(option17);
        org.junit.Assert.assertTrue("'" + char18 + "' != '" + '\000' + "'", char18 == '\000');
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + ' ' + "'", char23 == ' ');
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(optionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strArray30);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        java.lang.Object obj17 = commandLine10.getOptionObject("org.apache.commons.cli.ParseException: hi!");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties66 = null;
        org.apache.commons.cli.CommandLine commandLine67 = posixParser57.parse(options58, strArray65, properties66);
        java.lang.String[] strArray68 = new java.lang.String[] {};
        java.util.Properties properties69 = null;
        org.apache.commons.cli.CommandLine commandLine70 = posixParser56.parse(options58, strArray68, properties69);
        org.apache.commons.cli.CommandLine commandLine71 = posixParser26.parse(options43, strArray68);
        org.apache.commons.cli.Options options72 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option74 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str75 = option74.getArgName();
        option74.setLongOpt("");
        org.apache.commons.cli.Options options78 = options72.addOption(option74);
        java.lang.String[] strArray80 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine82 = posixParser26.parse(options72, strArray80, true);
        java.lang.String[] strArray83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options72, strArray83);
        java.util.Collection collection85 = options72.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(commandLine70);
        org.junit.Assert.assertNotNull(commandLine71);
        org.junit.Assert.assertNotNull(option74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "arg" + "'", str75, "arg");
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(collection85);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str13 = commandLine10.getOptionValue("arg");
        java.lang.Object obj15 = commandLine10.getOptionObject('#');
        commandLine10.addArg("[ Options: [ short {=[ option:    :: null ]} ] [ long {=[ option:    :: null ]} ]");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        java.util.Iterator iterator55 = commandLine54.iterator();
        java.util.Iterator iterator56 = commandLine54.iterator();
        java.lang.String[] strArray58 = commandLine54.getOptionValues("org.apache.commons.cli.UnrecognizedOptionException:  ");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertNotNull(iterator55);
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNull(strArray58);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser13 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options14 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties22 = null;
        org.apache.commons.cli.CommandLine commandLine23 = posixParser13.parse(options14, strArray21, properties22);
        org.apache.commons.cli.Options options24 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option26 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str27 = option26.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup28 = options24.getOptionGroup(option26);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser13.parse(options24, strArray35, properties36, false);
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties74 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser65.parse(options66, strArray73, properties74);
        java.lang.String[] strArray77 = posixParser13.flatten(options50, strArray73, true);
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine80 = posixParser1.parse(options12, strArray73, properties78, false);
        org.apache.commons.cli.Option option82 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char83 = option82.getValueSeparator();
        java.lang.String str84 = option82.getKey();
        option82.setRequired(false);
        org.apache.commons.cli.Options options87 = options12.addOption(option82);
        boolean boolean89 = options12.hasOption("hi!");
        boolean boolean91 = options12.hasOption("");
        java.lang.String[] strArray93 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: " };
        java.util.Properties properties94 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options12, strArray93, properties94, false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(commandLine23);
        org.junit.Assert.assertNotNull(option26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(option82);
        org.junit.Assert.assertTrue("'" + char83 + "' != '" + '\000' + "'", char83 == '\000');
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + " " + "'", str84, " ");
        org.junit.Assert.assertNotNull(options87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        posixParser0.burstToken("arg", false);
        posixParser0.burstToken("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]", false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser2.parse(options3, strArray10, properties11);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = posixParser1.parse(options3, strArray13, properties14);
        org.apache.commons.cli.Options options20 = options3.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        java.util.List list21 = options20.helpOptions();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException:  ", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", "[ option:   :: null ]", " " };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options20, strArray26, properties27, true);
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", true);
        posixParser0.burstToken("arg", true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine29);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        org.apache.commons.cli.Options options84 = options11.addOption(" ", "arg", false, "arg");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options88 = options11.addOption("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]", false, "org.apache.commons.cli.MissingArgumentException: [ option:   :: null :: 0 ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '['");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(options84);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String str14 = commandLine10.getOptionValue('4', "org.apache.commons.cli.MissingArgumentException: arg");
        java.lang.String str17 = commandLine10.getOptionValue('a', " ");
        boolean boolean19 = commandLine10.hasOption("hi!");
        java.util.Iterator iterator20 = commandLine10.iterator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.cli.MissingArgumentException: arg" + "'", str14, "org.apache.commons.cli.MissingArgumentException: arg");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + " " + "'", str17, " ");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(iterator20);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser11.parse(options13, strArray23, properties24);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options28 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties36 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser27.parse(options28, strArray35, properties36);
        java.lang.String[] strArray38 = new java.lang.String[] {};
        java.util.Properties properties39 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser26.parse(options28, strArray38, properties39);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser42 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine52 = posixParser42.parse(options43, strArray50, properties51);
        java.lang.String[] strArray53 = new java.lang.String[] {};
        java.util.Properties properties54 = null;
        org.apache.commons.cli.CommandLine commandLine55 = posixParser41.parse(options43, strArray53, properties54);
        org.apache.commons.cli.CommandLine commandLine56 = posixParser11.parse(options28, strArray53);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str60 = option59.getArgName();
        option59.setLongOpt("");
        org.apache.commons.cli.Options options63 = options57.addOption(option59);
        java.lang.String[] strArray65 = new java.lang.String[] { " " };
        org.apache.commons.cli.CommandLine commandLine67 = posixParser11.parse(options57, strArray65, true);
        org.apache.commons.cli.PosixParser posixParser68 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser69 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options70 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties78 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser69.parse(options70, strArray77, properties78);
        java.lang.String[] strArray80 = new java.lang.String[] {};
        java.util.Properties properties81 = null;
        org.apache.commons.cli.CommandLine commandLine82 = posixParser68.parse(options70, strArray80, properties81);
        java.util.Properties properties83 = null;
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options57, strArray80, properties83);
        posixParser0.burstToken("", true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(commandLine55);
        org.junit.Assert.assertNotNull(commandLine56);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options2 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties10 = null;
        org.apache.commons.cli.CommandLine commandLine11 = posixParser1.parse(options2, strArray9, properties10);
        java.lang.String[] strArray12 = new java.lang.String[] {};
        java.util.Properties properties13 = null;
        org.apache.commons.cli.CommandLine commandLine14 = posixParser0.parse(options2, strArray12, properties13);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties24 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser15.parse(options16, strArray23, properties24);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option28 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str29 = option28.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup30 = options26.getOptionGroup(option28);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties38 = null;
        org.apache.commons.cli.CommandLine commandLine40 = posixParser15.parse(options26, strArray37, properties38, false);
        org.apache.commons.cli.PosixParser posixParser41 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options42 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties50 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser41.parse(options42, strArray49, properties50);
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str55 = option54.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup56 = options52.getOptionGroup(option54);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties64 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser41.parse(options52, strArray63, properties64, false);
        org.apache.commons.cli.PosixParser posixParser67 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options68 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties76 = null;
        org.apache.commons.cli.CommandLine commandLine77 = posixParser67.parse(options68, strArray75, properties76);
        java.lang.String[] strArray79 = posixParser15.flatten(options52, strArray75, true);
        org.apache.commons.cli.Options options84 = options52.addOption("arg", " ", false, "");
        java.lang.String[] strArray85 = null;
        java.util.Properties properties86 = null;
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options84, strArray85, properties86, false);
        org.apache.commons.cli.Option option89 = null;
        java.util.ListIterator listIterator90 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option89, listIterator90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(commandLine11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(commandLine14);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(option28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg");
        org.junit.Assert.assertNull(optionGroup30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(commandLine40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(option54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "arg" + "'", str55, "arg");
        org.junit.Assert.assertNull(optionGroup56);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(commandLine88);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        boolean boolean71 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean73 = options37.hasOption("");
        boolean boolean75 = options37.hasOption(" ");
        org.apache.commons.cli.Option option77 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str78 = option77.getArgName();
        java.lang.String str79 = option77.getValue();
        org.apache.commons.cli.OptionGroup optionGroup80 = options37.getOptionGroup(option77);
        org.apache.commons.cli.OptionBuilder optionBuilder81 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) optionGroup80);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(option77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(optionBuilder81);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        java.util.List list11 = commandLine10.getArgList();
        java.lang.String[] strArray13 = commandLine10.getOptionValues("hi!");
        java.lang.Object obj15 = commandLine10.getOptionObject('4');
        java.lang.String str17 = commandLine10.getOptionValue("org.apache.commons.cli.MissingArgumentException: arg");
        org.apache.commons.cli.Option option19 = org.apache.commons.cli.OptionBuilder.create(' ');
        char char20 = option19.getValueSeparator();
        boolean boolean21 = option19.hasArgName();
        int int22 = option19.getId();
        option19.setValueSeparator(' ');
        char char25 = option19.getValueSeparator();
        java.util.List list26 = option19.getValuesList();
        java.lang.String str27 = option19.getKey();
        java.lang.String str28 = option19.getKey();
        commandLine10.addOption(option19);
        boolean boolean30 = option19.hasArgs();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(option19);
        org.junit.Assert.assertTrue("'" + char20 + "' != '" + '\000' + "'", char20 == '\000');
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + char25 + "' != '" + ' ' + "'", char25 == ' ');
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + " " + "'", str27, " ");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + " " + "'", str28, " ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option(" ", true, " ");
        java.lang.String str75 = option73.getValue(100);
        java.lang.String str76 = option73.getKey();
        java.lang.String str77 = option73.getLongOpt();
        org.apache.commons.cli.Options options78 = options37.addOption(option73);
        int int79 = option73.getId();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + " " + "'", str76, " ");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 32 + "'", int79 == 32);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.CommandLine commandLine54 = posixParser0.parse(options26, strArray50);
        boolean boolean56 = commandLine54.hasOption('#');
        org.apache.commons.cli.Option[] optionArray57 = commandLine54.getOptions();
        org.apache.commons.cli.Option option59 = org.apache.commons.cli.OptionBuilder.create("");
        boolean boolean60 = option59.isRequired();
        boolean boolean61 = option59.hasLongOpt();
        option59.setOptionalArg(false);
        java.lang.String str64 = option59.getKey();
        boolean boolean65 = option59.hasArg();
        int int66 = option59.getArgs();
        commandLine54.addOption(option59);
        java.lang.Object obj69 = commandLine54.getOptionObject('#');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(commandLine54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(optionArray57);
        org.junit.Assert.assertNotNull(option59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(obj69);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties20 = null;
        org.apache.commons.cli.CommandLine commandLine21 = posixParser11.parse(options12, strArray19, properties20);
        org.apache.commons.cli.Options options22 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str25 = option24.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options22.getOptionGroup(option24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties34 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser11.parse(options22, strArray33, properties34, false);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        java.util.List list38 = options37.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties48 = null;
        org.apache.commons.cli.CommandLine commandLine49 = posixParser39.parse(options40, strArray47, properties48);
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str53 = option52.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup54 = options50.getOptionGroup(option52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties62 = null;
        org.apache.commons.cli.CommandLine commandLine64 = posixParser39.parse(options50, strArray61, properties62, false);
        org.apache.commons.cli.CommandLine commandLine65 = posixParser11.parse(options37, strArray61);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.lang.String[] strArray69 = posixParser0.flatten(options37, strArray67, true);
        org.apache.commons.cli.Option option73 = new org.apache.commons.cli.Option(" ", true, " ");
        java.lang.String str75 = option73.getValue(100);
        java.lang.String str76 = option73.getKey();
        java.lang.String str77 = option73.getLongOpt();
        org.apache.commons.cli.Options options78 = options37.addOption(option73);
        org.apache.commons.cli.OptionBuilder optionBuilder80 = org.apache.commons.cli.OptionBuilder.hasOptionalArgs((int) (byte) 10);
        option73.setType((java.lang.Object) (byte) 10);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(commandLine21);
        org.junit.Assert.assertNotNull(option24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg");
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(commandLine49);
        org.junit.Assert.assertNotNull(option52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(commandLine65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + " " + "'", str76, " ");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(options78);
        org.junit.Assert.assertNotNull(optionBuilder80);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        posixParser0.burstToken("arg", false);
        posixParser0.burstToken("[ option:   :: null :: 0 ]", false);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        java.util.List list33 = options32.getRequiredOptions();
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option36 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str37 = option36.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup38 = options34.getOptionGroup(option36);
        option36.setArgName("arg");
        boolean boolean41 = option36.hasValueSeparator();
        java.lang.String str42 = option36.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options32.getOptionGroup(option36);
        org.apache.commons.cli.Option option45 = options32.getOption("[ Options: [ short {=[ option:   :: [ option:   :: null :: 0 ] ]} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties56 = null;
        org.apache.commons.cli.CommandLine commandLine57 = posixParser47.parse(options48, strArray55, properties56);
        java.lang.String[] strArray58 = new java.lang.String[] {};
        java.util.Properties properties59 = null;
        org.apache.commons.cli.CommandLine commandLine60 = posixParser46.parse(options48, strArray58, properties59);
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser0.parse(options32, strArray58, properties61);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(option36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "arg" + "'", str37, "arg");
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNull(option45);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(commandLine57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(commandLine60);
        org.junit.Assert.assertNotNull(commandLine62);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options();
        java.util.List list27 = options26.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser28 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties37 = null;
        org.apache.commons.cli.CommandLine commandLine38 = posixParser28.parse(options29, strArray36, properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str42 = option41.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup43 = options39.getOptionGroup(option41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties51 = null;
        org.apache.commons.cli.CommandLine commandLine53 = posixParser28.parse(options39, strArray50, properties51, false);
        org.apache.commons.cli.Options options54 = new org.apache.commons.cli.Options();
        java.util.List list55 = options54.getRequiredOptions();
        org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties65 = null;
        org.apache.commons.cli.CommandLine commandLine66 = posixParser56.parse(options57, strArray64, properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str70 = option69.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup71 = options67.getOptionGroup(option69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties79 = null;
        org.apache.commons.cli.CommandLine commandLine81 = posixParser56.parse(options67, strArray78, properties79, false);
        org.apache.commons.cli.CommandLine commandLine82 = posixParser28.parse(options54, strArray78);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options26, strArray78, false);
        java.util.Collection collection85 = options26.getOptions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(commandLine38);
        org.junit.Assert.assertNotNull(option41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(commandLine66);
        org.junit.Assert.assertNotNull(option69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNull(optionGroup71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(commandLine81);
        org.junit.Assert.assertNotNull(commandLine82);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(collection85);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties21 = null;
        org.apache.commons.cli.CommandLine commandLine22 = posixParser12.parse(options13, strArray20, properties21);
        org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str26 = option25.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup27 = options23.getOptionGroup(option25);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine37 = posixParser12.parse(options23, strArray34, properties35, false);
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties47 = null;
        org.apache.commons.cli.CommandLine commandLine48 = posixParser38.parse(options39, strArray46, properties47);
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str52 = option51.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup53 = options49.getOptionGroup(option51);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine63 = posixParser38.parse(options49, strArray60, properties61, false);
        org.apache.commons.cli.PosixParser posixParser64 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties73 = null;
        org.apache.commons.cli.CommandLine commandLine74 = posixParser64.parse(options65, strArray72, properties73);
        java.lang.String[] strArray76 = posixParser12.flatten(options49, strArray72, true);
        java.util.Properties properties77 = null;
        org.apache.commons.cli.CommandLine commandLine79 = posixParser0.parse(options11, strArray72, properties77, false);
        posixParser0.burstToken(" ", true);
        org.apache.commons.cli.Options options83 = new org.apache.commons.cli.Options();
        java.lang.String str84 = options83.toString();
        boolean boolean86 = options83.hasOption("[ option:   :: null :: 0 ]");
        org.apache.commons.cli.Options options90 = options83.addOption(" ", false, "org.apache.commons.cli.MissingOptionException: ");
        org.apache.commons.cli.CommandLine commandLine91 = new org.apache.commons.cli.CommandLine();
        java.lang.Object obj93 = commandLine91.getOptionObject(' ');
        java.lang.String[] strArray94 = commandLine91.getArgs();
        java.util.Properties properties95 = null;
        org.apache.commons.cli.CommandLine commandLine96 = posixParser0.parse(options83, strArray94, properties95);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(commandLine22);
        org.junit.Assert.assertNotNull(option25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNull(optionGroup27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNotNull(option51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine63);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(commandLine74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str84, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(options90);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(commandLine96);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties9 = null;
        org.apache.commons.cli.CommandLine commandLine10 = posixParser0.parse(options1, strArray8, properties9);
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option13 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str14 = option13.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup15 = options11.getOptionGroup(option13);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties23 = null;
        org.apache.commons.cli.CommandLine commandLine25 = posixParser0.parse(options11, strArray22, properties23, false);
        org.apache.commons.cli.PosixParser posixParser26 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties35 = null;
        org.apache.commons.cli.CommandLine commandLine36 = posixParser26.parse(options27, strArray34, properties35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option39 = org.apache.commons.cli.OptionBuilder.create("");
        java.lang.String str40 = option39.getArgName();
        org.apache.commons.cli.OptionGroup optionGroup41 = options37.getOptionGroup(option39);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", " ", "", "hi!", "", "arg" };
        java.util.Properties properties49 = null;
        org.apache.commons.cli.CommandLine commandLine51 = posixParser26.parse(options37, strArray48, properties49, false);
        org.apache.commons.cli.PosixParser posixParser52 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties61 = null;
        org.apache.commons.cli.CommandLine commandLine62 = posixParser52.parse(options53, strArray60, properties61);
        java.lang.String[] strArray64 = posixParser0.flatten(options37, strArray60, true);
        org.apache.commons.cli.Option option66 = options37.getOption("[ option:    :: null ]");
        org.apache.commons.cli.OptionBuilder optionBuilder67 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) options37);
        java.util.Collection collection68 = options37.getOptionGroups();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(commandLine10);
        org.junit.Assert.assertNotNull(option13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg");
        org.junit.Assert.assertNull(optionGroup15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(commandLine25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(option39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNull(option66);
        org.junit.Assert.assertNotNull(optionBuilder67);
        org.junit.Assert.assertNotNull(collection68);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.PosixParser posixParser2 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!", "arg", "arg", "hi!", "hi!" };
        java.util.Properties properties11 = null;
        org.apache.commons.cli.CommandLine commandLine12 = posixParser2.parse(options3, strArray10, properties11);
        java.lang.String[] strArray13 = new java.lang.String[] {};
        java.util.Properties properties14 = null;
        org.apache.commons.cli.CommandLine commandLine15 = posixParser1.parse(options3, strArray13, properties14);
        org.apache.commons.cli.Options options20 = options3.addOption("", "[ option:   :: null :: 0 ]", true, " ");
        java.util.List list21 = options20.helpOptions();
        java.lang.String[] strArray26 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException:  ", "org.apache.commons.cli.UnrecognizedOptionException: org.apache.commons.cli.MissingArgumentException: arg", "[ option:   :: null ]", " " };
        java.util.Properties properties27 = null;
        org.apache.commons.cli.CommandLine commandLine29 = posixParser0.parse(options20, strArray26, properties27, true);
        java.util.Collection collection30 = options20.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options35 = options20.addOption("hi!", "", false, "[ option:   :: null :: 0 ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '!'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(commandLine12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(commandLine15);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(commandLine29);
        org.junit.Assert.assertNotNull(collection30);
    }
}
