/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 30 14:40:50 GMT 2024
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URL;
import java.util.Date;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.PatternOptionBuilder;
import org.apache.commons.cli.TypeHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteTypeHandler_ESTest extends EvosuiteTypeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cli.AlreadySelectedException");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OptionGroup optionGroup0 = (OptionGroup)TypeHandler.createValue("org.apache.commons.cli.OptionGroup", (Object) class0);
      assertNull(optionGroup0.getSelected());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",x2og'%}x-#&k$@O1");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      File file0 = TypeHandler.createFile(",x2og'%}x-#&k$@O1");
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = TypeHandler.createFile(".");
      assertNull(file0.getParent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = TypeHandler.createFile("/=>J:u*Dv");
      assertEquals(0L, file0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = TypeHandler.createFile("");
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class class0 = TypeHandler.createClass("org.apache.commons.cli.TypeHandler");
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        TypeHandler.createValue((String) null, (Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeHandler.createValue("", (Object) "\"0mUU=JVBj^u2}v<t");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Class
         //
         verifyException("org.apache.commons.cli.TypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        TypeHandler.createValue((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeHandler.createObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeHandler.createFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeHandler.createClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Date date0 = TypeHandler.createDate("");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Number number0 = TypeHandler.createNumber("~k;/YUGjjn4Jh%BZW");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = TypeHandler.createValue("gpQS", (Class) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Number number0 = TypeHandler.createNumber("org.apache.commons.cli.PatternOptionBuilder");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Number number0 = TypeHandler.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cli.PatternOptionBuilder");
      Object object1 = TypeHandler.createValue("w-NYyZ", ((PatternOptionBuilder) object0).URL_VALUE);
      assertNull(object1);
      assertEquals("w-NYyZ", object1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cli.PatternOptionBuilder");
      Object object1 = TypeHandler.createValue("TR%_>]", ((PatternOptionBuilder) object0).FILES_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cli.PatternOptionBuilder");
      MockFile mockFile0 = (MockFile)TypeHandler.createValue("", ((PatternOptionBuilder) object0).EXISTING_FILE_VALUE);
      assertFalse(mockFile0.isFile());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = TypeHandler.createObject("org.apache.commons.cliatternOptionBuDlder");
      MockFile mockFile0 = (MockFile)TypeHandler.createValue("-", ((PatternOptionBuilder) object0).FILE_VALUE);
      assertFalse(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = TypeHandler.createObject("Unable to find: ");
      Object object1 = TypeHandler.createValue("Unable to find: ", ((PatternOptionBuilder) object0).CLASS_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = TypeHandler.createObject("w-NYyZ");
      Object object1 = TypeHandler.createValue("", ((PatternOptionBuilder) object0).DATE_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = TypeHandler.createObject("Q4P0&+_!F v");
      Object object1 = TypeHandler.createValue("Q4P0&+_!F v", ((PatternOptionBuilder) object0).NUMBER_VALUE);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URL uRL0 = TypeHandler.createURL("w-NYyZ");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeHandler typeHandler0 = new TypeHandler();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      File[] fileArray0 = TypeHandler.createFiles(",x2og'%}x-#&k$@O1");
      assertNull(fileArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class class0 = TypeHandler.createClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = TypeHandler.createValue("(_6T-Lo", (Object) null);
      assertNull(object0);
  }
}
