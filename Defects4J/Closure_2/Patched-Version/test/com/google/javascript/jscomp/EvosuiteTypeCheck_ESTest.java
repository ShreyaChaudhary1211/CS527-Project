/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 19:06:18 GMT 2024
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.MoveFunctionDeclarations;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.RemoveUnusedClassProperties;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteTypeCheck_ESTest extends EvosuiteTypeCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(91);
      Node node1 = new Node(91, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.reportMissingOverride);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      typeCheck0.getTypedPercent();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      Node node0 = Node.newString(108, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      RemoveUnusedClassProperties removeUnusedClassProperties0 = new RemoveUnusedClassProperties(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, removeUnusedClassProperties0);
      Node node0 = new Node(153);
      Node node1 = new Node(45, node0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node1, (Node) null);
      assertEquals(55, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkGlobalThisLevel);
      Node node0 = new Node(98);
      Node node1 = new Node(144, node0);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.check(node1, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 144
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, memoizedScopeCreator0, compilerOptions0.checkRequires, compilerOptions0.checkMissingGetCssNameLevel);
      Node node0 = new Node(98);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(149, "Cannot add a property to a struct instance after it is constructed.");
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (MemoizedScopeCreator) null, compilerOptions0.checkProvides, compilerOptions0.brokenClosureRequiresLevel);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(114, "X.5\",@k%Jb");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting((Node) null, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      Node node0 = new Node(120);
      Node node1 = new Node(105, node0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportMissingOverride, compilerOptions0.checkGlobalThisLevel);
      // Undeclared exception!
      try { 
        typeCheck0.shouldTraverse(nodeTraversal0, node1, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CATCH is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(118);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(125, "-$w<*8pq;MxbR");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isThis());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "// Input %num%", (String) null);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(149, "Cannot add a property to a struct instance after it is constructed.");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertEquals(2, compiler0.getErrorCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.aggressiveVarCheck);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("// Input %num%");
      Node node1 = new Node(4, node0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(5, "^O");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 5
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(120);
      Node node1 = new Node(7, node0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 7
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node((-48));
      Node node1 = new Node(8, node0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.checkProvides);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(98);
      Node node1 = new Node(10, node0);
      typeCheck0.visit(nodeTraversal0, node1, (Node) null);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(120);
      Node node1 = new Node(12, node0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node0.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(97);
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      Node node1 = new Node(14, node0, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(55, Node.INFERRED_FUNCTION);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(617);
      Node node1 = new Node(16, node0, node0, node0, 50, 29);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node1.isTry());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.checkProvides);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(17);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.reportMissingOverride, compilerOptions0.checkGlobalThisLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(64);
      Node node1 = new Node(20, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(120);
      Node node1 = new Node(22, node0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = compiler0.parseTestCode("// Input %num%");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(25, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node((-48));
      Node node1 = new Node(26, node0);
      typeCheck0.visit(nodeTraversal0, node1, (Node) null);
      assertFalse(node1.isWith());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(28, "// Input %num%");
      VarCheck varCheck0 = new VarCheck(compiler0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.reportMissingOverride, compilerOptions0.checkUnreachableCode);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(90);
      Node node1 = new Node(29, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertFalse(node1.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(143, "Cannot add a property to a struct instance after it is constructed.");
      Node node1 = new Node(30, node0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(91);
      Node node1 = new Node(31, node0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node1, (Node) null);
      assertFalse(node1.isWith());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(32);
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isReturn());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      RemoveUnusedClassProperties removeUnusedClassProperties0 = new RemoveUnusedClassProperties(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, removeUnusedClassProperties0);
      Node node0 = new Node((-358));
      Node node1 = new Node(33, node0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -358
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(34, "^O");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 34
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(36);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit((NodeTraversal) null, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(98);
      Node node1 = new Node(37, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkProvides, compilerOptions0.checkProvides);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(38);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, syntacticScopeCreator0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      Node node0 = Node.newNumber((double) 142, 121, 142);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isThis());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(149);
      Node node1 = new Node(42, node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, memoizedScopeCreator0, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(129);
      Node node1 = new Node(43, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(43, node1.getType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node((-415));
      Node node1 = new Node(46, node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node0.isAssign());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(98);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkGlobalNamesLevel, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0);
      Node node1 = new Node(47, node0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("// Input %num%");
      Node node1 = new Node(48, node0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(120);
      Node node1 = new Node(49, node0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertFalse(node1.isNew());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(50, "'.'");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(617);
      Node node1 = new Node(51, node0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(617);
      Node node1 = new Node(52, node0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertFalse(node1.isVoid());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(53, "Cannot add a property to a struct instance after it is constructed.");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(120);
      Node node1 = new Node(54, node0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(55);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit((NodeTraversal) null, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn, compilerOptions0.checkRequires);
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0);
      Node node0 = new Node(56);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(64);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkGlobalNamesLevel);
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(65);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 65
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      RemoveUnusedClassProperties removeUnusedClassProperties0 = new RemoveUnusedClassProperties(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, removeUnusedClassProperties0);
      Node node0 = new Node(153);
      Node node1 = new Node(71, node0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 71
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(82);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 82
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isHook());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(88);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(90);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(97);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit((NodeTraversal) null, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node((-415));
      Node node1 = new Node(101, node0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertFalse(node1.isName());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(103, "X.5\",@k%Jb");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(120);
      Node node1 = new Node(105, node0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit((NodeTraversal) null, node1, node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CATCH is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(107, "");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 107
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(109, "");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(110);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node0, (Node) null);
      assertFalse(node0.isCast());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      Node node0 = new Node(111, 111, 149);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(109, "");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      Node node1 = new Node(112);
      Scope scope0 = Scope.createGlobalScope(node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (MemoizedScopeCreator) null, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkGlobalNamesLevel);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(143);
      Node node1 = new Node(113, node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node1.isVoid());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(114, "X.5\",@k%Jb");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(115, "");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.aggressiveVarCheck, compilerOptions0.aggressiveVarCheck);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkGlobalThisLevel, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("main");
      Node node1 = new Node(117, node0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node1.isThrow());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(119);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(120);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isStringKey());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn, compilerOptions0.checkProvides);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(121);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 121
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.reportMissingOverride, compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(122);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(54, Node.SLASH_V);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn, compilerOptions0.checkProvides);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(123);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 123
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(124, "");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isAdd());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(126, "");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.aggressiveVarCheck, compilerOptions0.aggressiveVarCheck);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isContinue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(2578);
      Node node1 = new Node(127, node0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 127
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(128, "Cannot add a property to a struct instance after it is constructed.");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 128
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, memoizedScopeCreator0, compilerOptions0.reportMissingOverride, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(129);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 129
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = compiler0.parseTestCode("// Input %num%");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkUnreachableCode);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = new Node(130, node0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node0.isBlock());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(133, 133, 133);
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkProvides, compilerOptions0.aggressiveVarCheck);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 133
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.aggressiveVarCheck, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(134);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 134
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.checkProvides);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(135);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 135
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkGlobalNamesLevel, compilerOptions0.checkMissingGetCssNameLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(136);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 136
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) null);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Node node0 = Node.newString(137, "");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.reportMissingOverride, compilerOptions0.checkRequires);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 137
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.checkProvides);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(138);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 138
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(2506);
      Node node1 = new Node(139, node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 139
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      Node node0 = new Node(617);
      Node node1 = new Node(140, node0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 140
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(142, ">pCPVXC;XB}x4mJFgy");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 142
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(143, "Cannot add a property to a struct instance after it is constructed.");
      VarCheck varCheck0 = new VarCheck(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 143
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(145, ">pCPVXC;XB}x4mJFgy");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 145
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn, compilerOptions0.checkGlobalThisLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("p~Td?Y=gS(V3IL");
      Node node1 = new Node(146, node0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkMissingGetCssNameLevel, compilerOptions0.checkGlobalNamesLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(147);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isBreak());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.checkProvides);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = new Node(17);
      Node node1 = new Node(148, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0);
      Node node0 = new Node(151);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(152, "a#lG+rZ");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = new Node(153);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      Node node0 = Node.newString(154, "$Dq9*<qLkk4+n[a");
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isTrue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkRequires, compilerOptions0.aggressiveVarCheck);
      Node node0 = new Node((-742));
      Node node1 = new Node(53, node0);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -742
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("// Input %num%");
      Node node1 = new Node(15, node0);
      typeCheck0.visit(nodeTraversal0, node0, node1);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<SourceFile> stack0 = new Stack<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      Node node0 = new Node(120);
      Node node1 = new Node(105, node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkProvides, compilerOptions0.checkUnreachableCode);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(120);
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Vector<JSType> vector1 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector1);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node0 = new Node(118);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<SourceFile> vector0 = new Vector<SourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.checkUnreachableCode, compilerOptions0.brokenClosureRequiresLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString("// Input %num%");
      node0.addSuppression("8Ty");
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      compiler0.parseTestCode("// Input %num%");
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (MemoizedScopeCreator) null, compilerOptions0.aggressiveVarCheck, compilerOptions0.checkUnreachableCode);
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01);
  }
}
