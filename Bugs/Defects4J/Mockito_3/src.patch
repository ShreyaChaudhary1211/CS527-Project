diff --git a/Mockito_3/buggy/.defects4j.config b/Mockito_3/fixed/.defects4j.config
index c3f38a7..ec39a0b 100644
--- a/Mockito_3/buggy/.defects4j.config
+++ b/Mockito_3/fixed/.defects4j.config
@@ -1,3 +1,3 @@
 #File automatically generated by Defects4J
 pid=Mockito
-vid=3b
+vid=3f
diff --git a/Mockito_3/buggy/src/org/mockito/internal/invocation/InvocationMatcher.java b/Mockito_3/fixed/src/org/mockito/internal/invocation/InvocationMatcher.java
index a3a7c08..3b3795b 100644
--- a/Mockito_3/buggy/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/Mockito_3/fixed/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -124,10 +124,12 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
-            for (int position = indexOfVararg; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
+            for (Matcher m : uniqueMatcherSet(indexOfVararg)) {
                 if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);
+                    Object rawArgument = invocation.getRawArguments()[indexOfVararg];
+                    for (int i = 0; i < Array.getLength(rawArgument); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(rawArgument, i));
+                    }
                 }
             }
         } else {
@@ -140,6 +142,18 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
         }
     }
 
+    private Set<Matcher> uniqueMatcherSet(int indexOfVararg) {
+        HashSet<Matcher> set = new HashSet<Matcher>();
+        for (int position = indexOfVararg; position < matchers.size(); position++) {
+            Matcher matcher = matchers.get(position);
+            if(matcher instanceof MatcherDecorator) {
+                set.add(((MatcherDecorator) matcher).getActualMatcher());
+            } else {
+                set.add(matcher);
+            }
+        }
+        return set;
+    }
 
     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {
         LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();
