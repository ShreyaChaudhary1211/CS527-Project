diff --git a/JacksonXml_6/buggy/.defects4j.config b/JacksonXml_6/fixed/.defects4j.config
index ede5cfd..7452e32 100644
--- a/JacksonXml_6/buggy/.defects4j.config
+++ b/JacksonXml_6/fixed/.defects4j.config
@@ -1,3 +1,3 @@
 #File automatically generated by Defects4J
 pid=JacksonXml
-vid=6b
+vid=6f
diff --git a/JacksonXml_6/buggy/.git/HEAD b/JacksonXml_6/fixed/.git/HEAD
index e2ef093..d2e9228 100644
--- a/JacksonXml_6/buggy/.git/HEAD
+++ b/JacksonXml_6/fixed/.git/HEAD
@@ -1 +1 @@
-626c2f7e7e3a454d3f85a6541f5541285f4db2e7
+b2406529db8efc473b42771c6bb59142c21e9fc5
diff --git a/JacksonXml_6/buggy/.git/index b/JacksonXml_6/fixed/.git/index
index 7747f95..05cb927 100644
Binary files a/JacksonXml_6/buggy/.git/index and b/JacksonXml_6/fixed/.git/index differ
diff --git a/JacksonXml_6/buggy/.git/logs/HEAD b/JacksonXml_6/fixed/.git/logs/HEAD
index d35a6c8..f20bd23 100644
--- a/JacksonXml_6/buggy/.git/logs/HEAD
+++ b/JacksonXml_6/fixed/.git/logs/HEAD
@@ -7,3 +7,4 @@ b2406529db8efc473b42771c6bb59142c21e9fc5 626c2f7e7e3a454d3f85a6541f5541285f4db2e
 626c2f7e7e3a454d3f85a6541f5541285f4db2e7 7a2469a93e81c3b073f66bcd44b3672ad02538d7 defects4j <defects4j@localhost> 1709004532 -0800	checkout: moving from 626c2f7e7e3a454d3f85a6541f5541285f4db2e7 to D4J_JacksonXml_6_POST_FIX_REVISION
 7a2469a93e81c3b073f66bcd44b3672ad02538d7 2cd424f7608b1bbfce27ee03c5b63cfcd47ca7b8 defects4j <defects4j@localhost> 1709004532 -0800	commit: D4J_JacksonXml_6_PRE_FIX_REVISION
 2cd424f7608b1bbfce27ee03c5b63cfcd47ca7b8 626c2f7e7e3a454d3f85a6541f5541285f4db2e7 defects4j <defects4j@localhost> 1709004532 -0800	checkout: moving from 2cd424f7608b1bbfce27ee03c5b63cfcd47ca7b8 to D4J_JacksonXml_6_BUGGY_VERSION
+626c2f7e7e3a454d3f85a6541f5541285f4db2e7 b2406529db8efc473b42771c6bb59142c21e9fc5 defects4j <defects4j@localhost> 1709004532 -0800	checkout: moving from 626c2f7e7e3a454d3f85a6541f5541285f4db2e7 to D4J_JacksonXml_6_FIXED_VERSION
diff --git a/JacksonXml_6/buggy/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java b/JacksonXml_6/fixed/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java
index 63e42a1..35d09f6 100644
--- a/JacksonXml_6/buggy/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java
+++ b/JacksonXml_6/fixed/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java
@@ -840,14 +840,67 @@ public final class ToXmlGenerator
         }
     }
 
+    @Override
+    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException
+    {
+        if (data == null) {
+            writeNull();
+            return 0;
+        }
+        _verifyValueWrite("write Binary value");
+        if (_nextName == null) {
+            handleMissingName();
+        }
+        try {
+            if (_nextIsAttribute) {
                 // Stax2 API only has 'full buffer' write method:
+                byte[] fullBuffer = toFullBuffer(data, dataLength);
+                _xmlWriter.writeBinaryAttribute("", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);
+            } else if (checkNextIsUnwrapped()) {
               // should we consider pretty-printing or not?
+                writeStreamAsBinary(data, dataLength);
 
+            } else {
+                if (_xmlPrettyPrinter != null) {
+                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter,
+                            _nextName.getNamespaceURI(), _nextName.getLocalPart(),
+                            toFullBuffer(data, dataLength), 0, dataLength);
+                } else {
+                    _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
+                    writeStreamAsBinary(data, dataLength);
+                    _xmlWriter.writeEndElement();
+                }
+            }
+        } catch (XMLStreamException e) {
+            StaxUtil.throwAsGenerationException(e, this);
+        }
 
+        return dataLength;
+    }
 
+    private void writeStreamAsBinary(InputStream data, int len) throws IOException, XMLStreamException 
+    {
         // base64 encodes up to 3 bytes into a 4 bytes string
+        byte[] tmp = new byte[3];
+        int offset = 0;
+        int read;
+        while((read = data.read(tmp, offset, Math.min(3 - offset, len))) != -1) {
+            offset += read;
+            len -= read;
+            if(offset == 3) {
+                offset = 0;
+                _xmlWriter.writeBinary(tmp, 0, 3);
+            }
+            if (len == 0) {
+                break;
+            }
+        }
 
         // we still have < 3 bytes in the buffer
+        if(offset > 0) {
+            _xmlWriter.writeBinary(tmp, 0, offset);
+        }
+    }
 
     
     private byte[] toFullBuffer(byte[] data, int offset, int len)
@@ -863,7 +916,20 @@ public final class ToXmlGenerator
         return result;
     }
 
+    private byte[] toFullBuffer(InputStream data, final int len) throws IOException 
+    {
+        byte[] result = new byte[len];
+        int offset = 0;
 
+        for (; offset < len; ) {
+            int count = data.read(result, offset, len - offset);
+            if (count < 0) {
+                _reportError("Too few bytes available: missing "+(len - offset)+" bytes (out of "+len+")");
+            }
+            offset += count;
+        }
+        return result;
+    }
 
     /*
     /**********************************************************
