diff --git a/Closure_144/buggy/com/google/javascript/jscomp/FunctionTypeBuilder.java b/Closure_144/fixed/com/google/javascript/jscomp/FunctionTypeBuilder.java
index 8ac4f11..01fa8ba 100644
--- a/Closure_144/buggy/com/google/javascript/jscomp/FunctionTypeBuilder.java
+++ b/Closure_144/fixed/com/google/javascript/jscomp/FunctionTypeBuilder.java
@@ -71,6 +71,7 @@ final class FunctionTypeBuilder {
   private final Scope scope;
 
   private JSType returnType = null;
+  private boolean returnTypeInferred = false;
   private List<ObjectType> implementedInterfaces = null;
   private ObjectType baseType = null;
   private ObjectType thisType = null;
@@ -197,9 +198,9 @@ final class FunctionTypeBuilder {
    */
   FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info) {
     returnType = info != null && info.hasReturnType() ?
-        info.getReturnType().evaluate(scope, typeRegistry) :
-        typeRegistry.getNativeType(UNKNOWN_TYPE);
+        info.getReturnType().evaluate(scope, typeRegistry) : null;
     if (templateTypeName != null &&
+        returnType != null &&
         returnType.restrictByNotNullOrUndefined().isTemplateType()) {
       reportError(TEMPLATE_TYPE_EXPECTED, fnName);
     }
@@ -210,7 +211,37 @@ final class FunctionTypeBuilder {
    * If we haven't found a return value yet, try to look at the "return"
    * statements in the function.
    */
+  FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {
+    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {
+      return this;
+    }
+    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
+    if (returnType == null) {
+      boolean hasNonEmptyReturns = false;
+      List<Node> worklist = Lists.newArrayList(functionBlock);
+      while (!worklist.isEmpty()) {
+        Node current = worklist.remove(worklist.size() - 1);
+        int cType = current.getType();
+        if (cType == Token.RETURN && current.getFirstChild() != null ||
+            cType == Token.THROW) {
+          hasNonEmptyReturns = true;
+          break;
+        } else if (NodeUtil.isStatementBlock(current) ||
+            NodeUtil.isControlStructure(current)) {
+          for (Node child = current.getFirstChild();
+               child != null; child = child.getNext()) {
+            worklist.add(child);
+          }
+        }
+      }
 
+      if (!hasNonEmptyReturns) {
+        returnType = typeRegistry.getNativeType(VOID_TYPE);
+        returnTypeInferred = true;
+      }
+    }
+    return this;
+  }
 
   /**
    * Infer the role of the function (whether it's a constructor or interface)
@@ -493,7 +524,7 @@ final class FunctionTypeBuilder {
           .withName(fnName)
           .withSourceNode(sourceNode)
           .withParamsNode(parametersNode)
-          .withReturnType(returnType)
+          .withReturnType(returnType, returnTypeInferred)
           .withTypeOfThis(thisType)
           .withTemplateName(templateTypeName)
           .build();
diff --git a/Closure_144/buggy/com/google/javascript/jscomp/TypedScopeCreator.java b/Closure_144/fixed/com/google/javascript/jscomp/TypedScopeCreator.java
index 8bf22fc..4be3b8d 100644
--- a/Closure_144/buggy/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/Closure_144/fixed/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -574,6 +574,7 @@ final class TypedScopeCreator implements ScopeCreator {
       Node fnRoot = isFnLiteral ? rValue : null;
       Node parametersNode = isFnLiteral ?
           rValue.getFirstChild().getNext() : null;
+      Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;
 
       if (functionType == null && info != null && info.hasType()) {
         JSType type = info.getType().evaluate(scope, typeRegistry);
@@ -614,6 +615,7 @@ final class TypedScopeCreator implements ScopeCreator {
                     .setSourceNode(fnRoot)
                     .inferFromOverriddenFunction(propType, parametersNode)
                     .inferThisType(info, owner)
+                    .inferReturnStatements(fnBlock)
                     .buildAndRegister();
               }
             }
@@ -631,6 +633,7 @@ final class TypedScopeCreator implements ScopeCreator {
             .inferInheritance(info)
             .inferThisType(info, owner)
             .inferParameterTypes(parametersNode, info)
+            .inferReturnStatements(fnBlock)
             .buildAndRegister();
       }
 
diff --git a/Closure_144/buggy/com/google/javascript/rhino/jstype/FunctionBuilder.java b/Closure_144/fixed/com/google/javascript/rhino/jstype/FunctionBuilder.java
index 4a6596e..902f2e6 100644
--- a/Closure_144/buggy/com/google/javascript/rhino/jstype/FunctionBuilder.java
+++ b/Closure_144/fixed/com/google/javascript/rhino/jstype/FunctionBuilder.java
@@ -98,6 +98,11 @@ public final class FunctionBuilder {
   }
 
   /** Set the return type and whether it's inferred. */
+  public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {
+    this.returnType = returnType;
+    this.inferredReturnType = inferred;
+    return this;
+  }
 
   /** Sets an inferred return type. */
   public FunctionBuilder withInferredReturnType(JSType returnType) {
diff --git a/Closure_144/buggy/com/google/javascript/rhino/jstype/FunctionType.java b/Closure_144/fixed/com/google/javascript/rhino/jstype/FunctionType.java
index 0cae0e3..6a4d2f4 100644
--- a/Closure_144/buggy/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/Closure_144/fixed/com/google/javascript/rhino/jstype/FunctionType.java
@@ -514,7 +514,7 @@ public class FunctionType extends PrototypeObjectType {
 
   FunctionType cloneWithNewReturnType(JSType newReturnType, boolean inferred) {
     return new FunctionType(
-        registry, null, null,
+        registry, null, source,
         new ArrowType(
             registry, call.parameters, newReturnType, inferred),
         typeOfThis, null, false, false);
