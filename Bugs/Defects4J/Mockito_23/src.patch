diff --git a/Mockito_23/buggy/.defects4j.config b/Mockito_23/fixed/.defects4j.config
index 42d251d..879ca1a 100644
--- a/Mockito_23/buggy/.defects4j.config
+++ b/Mockito_23/fixed/.defects4j.config
@@ -1,3 +1,3 @@
 #File automatically generated by Defects4J
 pid=Mockito
-vid=23b
+vid=23f
diff --git a/Mockito_23/buggy/.git/HEAD b/Mockito_23/fixed/.git/HEAD
index a37c14b..3813dfc 100644
--- a/Mockito_23/buggy/.git/HEAD
+++ b/Mockito_23/fixed/.git/HEAD
@@ -1 +1 @@
-a5a36a4f3b5ba855084075ca05608b3e13ad3fff
+6b515ba4328f7de09b4f878ac0d4f92a8d79e4e1
diff --git a/Mockito_23/buggy/.git/index b/Mockito_23/fixed/.git/index
index 495a011..f5fb989 100644
Binary files a/Mockito_23/buggy/.git/index and b/Mockito_23/fixed/.git/index differ
diff --git a/Mockito_23/buggy/.git/logs/HEAD b/Mockito_23/fixed/.git/logs/HEAD
index 400c86c..f06aac6 100644
--- a/Mockito_23/buggy/.git/logs/HEAD
+++ b/Mockito_23/fixed/.git/logs/HEAD
@@ -7,3 +7,4 @@ dc1c1de6c061662dc2e24026351ff7f7019a6143 6b515ba4328f7de09b4f878ac0d4f92a8d79e4e
 a5a36a4f3b5ba855084075ca05608b3e13ad3fff d54ac926ce7e5227a584899423dbf0e264daa2e2 defects4j <defects4j@localhost> 1709005578 -0800	checkout: moving from a5a36a4f3b5ba855084075ca05608b3e13ad3fff to D4J_Mockito_23_POST_FIX_REVISION
 d54ac926ce7e5227a584899423dbf0e264daa2e2 4dd8d78c0a3cf1fa79c6d81ad864077d069befcf defects4j <defects4j@localhost> 1709005578 -0800	commit: D4J_Mockito_23_PRE_FIX_REVISION
 4dd8d78c0a3cf1fa79c6d81ad864077d069befcf a5a36a4f3b5ba855084075ca05608b3e13ad3fff defects4j <defects4j@localhost> 1709005578 -0800	checkout: moving from 4dd8d78c0a3cf1fa79c6d81ad864077d069befcf to D4J_Mockito_23_BUGGY_VERSION
+a5a36a4f3b5ba855084075ca05608b3e13ad3fff 6b515ba4328f7de09b4f878ac0d4f92a8d79e4e1 defects4j <defects4j@localhost> 1709005578 -0800	checkout: moving from a5a36a4f3b5ba855084075ca05608b3e13ad3fff to D4J_Mockito_23_FIXED_VERSION
diff --git a/Mockito_23/buggy/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/Mockito_23/fixed/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
index c4384f7..b18dd3b 100644
--- a/Mockito_23/buggy/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
+++ b/Mockito_23/fixed/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
@@ -41,14 +41,16 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     
     private static final long serialVersionUID = -7105341425736035847L;
 
-    private MockitoCore mockitoCore = new MockitoCore();
-    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
+    private transient MockitoCore mockitoCore;
+    private transient ReturnsEmptyValues delegate;
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         GenericMetadataSupport returnTypeGenericMetadata =
                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
 
         Class<?> rawType = returnTypeGenericMetadata.rawType();
+        instantiateMockitoCoreIfNeeded();
+        instantiateDelegateIfNeeded();
         if (!mockitoCore.isTypeMockable(rawType)) {
             return delegate.returnValueFor(rawType);
         }
@@ -56,7 +58,17 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         return getMock(invocation, returnTypeGenericMetadata);
     }
 
+    private synchronized void instantiateMockitoCoreIfNeeded() {
+        if (mockitoCore == null) {
+            mockitoCore = new MockitoCore();
+        }
+    }
 
+    private synchronized void instantiateDelegateIfNeeded() {
+        if (delegate == null) {
+            delegate = new ReturnsEmptyValues();
+        }
+    }
 
     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
     	InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
@@ -97,6 +109,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
                 : withSettings();
 
         return mockSettings
+		        .serializable()
                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
     }
 
@@ -111,7 +124,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
 
     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {
 
-        container.addAnswer(new Answer<Object>() {
+        container.addAnswer(new SerializableAnswer() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return mock;
             }
@@ -120,7 +133,9 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
         return mock;
     }
 	
+	abstract class SerializableAnswer implements Answer<Object>, Serializable {
 		
+	}
 	
 
     protected GenericMetadataSupport actualParameterizedType(Object mock) {
