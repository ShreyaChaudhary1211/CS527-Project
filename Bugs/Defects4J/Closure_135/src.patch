diff --git a/Closure_135/buggy/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java b/Closure_135/fixed/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java
index a42dc34..e7cfc6d 100644
--- a/Closure_135/buggy/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java
+++ b/Closure_135/fixed/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java
@@ -359,6 +359,7 @@ class DevirtualizePrototypeMethods implements CompilerPass {
     for (Node child : node.children()) {
       if (NodeUtil.isThis(child)) {
         Node newName = Node.newString(Token.NAME, name);
+        newName.setJSType(child.getJSType());
         node.replaceChild(child, newName);
       } else {
         replaceReferencesToThis(child, name);
diff --git a/Closure_135/buggy/com/google/javascript/rhino/jstype/FunctionType.java b/Closure_135/fixed/com/google/javascript/rhino/jstype/FunctionType.java
index 3e8ab07..b318d8a 100644
--- a/Closure_135/buggy/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/Closure_135/fixed/com/google/javascript/rhino/jstype/FunctionType.java
@@ -409,6 +409,10 @@ public class FunctionType extends PrototypeObjectType {
     return super.hasProperty(name) || "prototype".equals(name);
   }
 
+  @Override
+  public boolean hasOwnProperty(String name) {
+    return super.hasOwnProperty(name) || "prototype".equals(name);
+  }
 
   @Override
   public JSType getPropertyType(String name) {
@@ -469,6 +473,9 @@ public class FunctionType extends PrototypeObjectType {
     if ("prototype".equals(name)) {
       ObjectType objType = type.toObjectType();
       if (objType != null) {
+        if (objType.equals(prototype)) {
+          return true;
+        }
         return setPrototype(
             new FunctionPrototypeType(
                 registry, this, objType, isNativeObjectType()));
