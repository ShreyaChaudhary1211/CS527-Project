diff --git a/Compress_29/buggy/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/Compress_29/fixed/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index 6bd8f03..c73e665 100644
--- a/Compress_29/buggy/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/Compress_29/fixed/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -294,7 +294,11 @@ public class ArchiveStreamFactory {
             }
         }
         if (JAR.equalsIgnoreCase(archiverName)) {
+            if (entryEncoding != null) {
+                return new JarArchiveOutputStream(out, entryEncoding);
+            } else {
                 return new JarArchiveOutputStream(out);
+            }
         }
         if (CPIO.equalsIgnoreCase(archiverName)) {
             if (entryEncoding != null) {
@@ -357,7 +361,11 @@ public class ArchiveStreamFactory {
                     return new CpioArchiveInputStream(in);
                 }
             } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {
+                if (entryEncoding != null) {
+                    return new ArjArchiveInputStream(in, entryEncoding);
+                } else {
                     return new ArjArchiveInputStream(in);
+                }
             } else if (SevenZFile.matches(signature, signatureLength)) {
                 throw new StreamingNotSupportedException(SEVEN_Z);
             }
diff --git a/Compress_29/buggy/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java b/Compress_29/fixed/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
index 1ad5f10..915b56e 100644
--- a/Compress_29/buggy/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
+++ b/Compress_29/fixed/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
@@ -94,6 +94,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /**
      * Construct the cpio input stream with a blocksize of {@link
@@ -152,6 +153,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
     public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {
         this.in = in;
         this.blockSize = blockSize;
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     }
 
diff --git a/Compress_29/buggy/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java b/Compress_29/fixed/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
index d2d1282..fc829ff 100644
--- a/Compress_29/buggy/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
+++ b/Compress_29/fixed/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
@@ -95,6 +95,7 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /**
      * Construct the cpio output stream with a specified format, a
@@ -159,6 +160,7 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
         }
         this.entryFormat = format;
         this.blockSize = blockSize;
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     }
 
diff --git a/Compress_29/buggy/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java b/Compress_29/fixed/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
index 84c7839..09431a4 100644
--- a/Compress_29/buggy/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
+++ b/Compress_29/fixed/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
@@ -77,6 +77,7 @@ public class DumpArchiveInputStream extends ArchiveInputStream {
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /**
      * Constructor using the platform's default encoding for file
@@ -101,6 +102,7 @@ public class DumpArchiveInputStream extends ArchiveInputStream {
         throws ArchiveException {
         this.raw = new TapeInputStream(is);
         this.hasHitEOF = false;
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
 
         try {
diff --git a/Compress_29/buggy/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/Compress_29/fixed/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index b3cd0d6..c557007 100644
--- a/Compress_29/buggy/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/Compress_29/fixed/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -76,6 +76,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /**
      * Constructor for TarInputStream.
@@ -139,6 +140,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {
                                  String encoding) {
         this.is = is;
         this.hasHitEOF = false;
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.recordSize = recordSize;
         this.blockSize = blockSize;
diff --git a/Compress_29/buggy/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/Compress_29/fixed/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
index 96ec740..43525c8 100644
--- a/Compress_29/buggy/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
+++ b/Compress_29/fixed/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
@@ -87,6 +87,7 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     private boolean addPaxHeadersForNonAsciiNames = false;
     private static final ZipEncoding ASCII =
@@ -152,6 +153,7 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {
     public TarArchiveOutputStream(OutputStream os, int blockSize,
                                   int recordSize, String encoding) {
         out = new CountingOutputStream(os);
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
 
         this.assemLen = 0;
diff --git a/Compress_29/buggy/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/Compress_29/fixed/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 711c149..7a69141 100644
--- a/Compress_29/buggy/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/Compress_29/fixed/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -62,6 +62,7 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /** Whether to look for and use Unicode extra fields. */
     private final boolean useUnicodeExtraFields;
@@ -181,6 +182,7 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
+        this.encoding = encoding;
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
         in = new PushbackInputStream(inputStream, buf.capacity());
