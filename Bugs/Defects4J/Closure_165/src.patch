diff --git a/Closure_165/buggy/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/Closure_165/fixed/com/google/javascript/rhino/jstype/JSTypeRegistry.java
index 6c6fcd4..edce9bf 100644
--- a/Closure_165/buggy/com/google/javascript/rhino/jstype/JSTypeRegistry.java
+++ b/Closure_165/fixed/com/google/javascript/rhino/jstype/JSTypeRegistry.java
@@ -695,6 +695,10 @@ public class JSTypeRegistry implements Serializable {
         if (!greatestSubtype.isEmptyType()) {
           // We've found a type with this property. Now we just have to make
           // sure it's not a type used for internal bookkeeping.
+          RecordType maybeRecordType = greatestSubtype.toMaybeRecordType();
+          if (maybeRecordType != null && maybeRecordType.isSynthetic()) {
+            continue;
+          }
 
           return true;
         }
diff --git a/Closure_165/buggy/com/google/javascript/rhino/jstype/ObjectType.java b/Closure_165/fixed/com/google/javascript/rhino/jstype/ObjectType.java
index 82d229d..37bd487 100644
--- a/Closure_165/buggy/com/google/javascript/rhino/jstype/ObjectType.java
+++ b/Closure_165/fixed/com/google/javascript/rhino/jstype/ObjectType.java
@@ -287,6 +287,10 @@ public abstract class ObjectType extends JSType implements StaticScope<JSType> {
    * don't actually exist in the user's program. They're just used for
    * bookkeeping in the type system.
    */
+  public final boolean defineSynthesizedProperty(String propertyName,
+      JSType type, Node propertyNode) {
+    return defineProperty(propertyName, type, false, propertyNode);
+  }
 
   /**
    * Defines a property whose type is inferred.
diff --git a/Closure_165/buggy/com/google/javascript/rhino/jstype/RecordType.java b/Closure_165/fixed/com/google/javascript/rhino/jstype/RecordType.java
index 7cc4890..8ff279c 100755
--- a/Closure_165/buggy/com/google/javascript/rhino/jstype/RecordType.java
+++ b/Closure_165/fixed/com/google/javascript/rhino/jstype/RecordType.java
@@ -65,8 +65,12 @@ class RecordType extends PrototypeObjectType {
   private static final long serialVersionUID = 1L;
 
   private final SortedMap<String, JSType> properties = Maps.newTreeMap();
+  private final boolean declared;
   private boolean isFrozen = false;
 
+  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties) {
+    this(registry, properties, true);
+  }
 
   /**
    * Creates a record type.
@@ -80,9 +84,11 @@ class RecordType extends PrototypeObjectType {
    * @throws IllegalStateException if the {@code RecordProperty} associated
    *         with a property is null.
    */
-  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties) {
+  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties,
+      boolean declared) {
     super(registry, null, null);
     setPrettyPrint(true);
+    this.declared = declared;
 
     for (String property : properties.keySet()) {
       RecordProperty prop = properties.get(property);
@@ -90,8 +96,13 @@ class RecordType extends PrototypeObjectType {
         throw new IllegalStateException(
             "RecordProperty associated with a property should not be null!");
       }
+      if (declared) {
         defineDeclaredProperty(
             property, prop.getType(), prop.getPropertyNode());
+      } else {
+        defineSynthesizedProperty(
+            property, prop.getType(), prop.getPropertyNode());
+      }
     }
 
     // Freeze the record type.
@@ -99,6 +110,9 @@ class RecordType extends PrototypeObjectType {
   }
 
   /** @return Is this synthesized for internal bookkeeping? */
+  boolean isSynthetic() {
+    return !declared;
+  }
 
   @Override
   public boolean isEquivalentTo(JSType other) {
@@ -149,6 +163,7 @@ class RecordType extends PrototypeObjectType {
     if (that.isRecordType()) {
       RecordType thatRecord = that.toMaybeRecordType();
       RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+      builder.setSynthesized(true);
 
       // The greatest subtype consists of those *unique* properties of both
       // record types. If any property conflicts, then the NO_TYPE type
diff --git a/Closure_165/buggy/com/google/javascript/rhino/jstype/RecordTypeBuilder.java b/Closure_165/fixed/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
index 345795b..60d1e10 100755
--- a/Closure_165/buggy/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
+++ b/Closure_165/fixed/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
@@ -51,6 +51,7 @@ import java.util.HashMap;
  */
 public class RecordTypeBuilder {
   private boolean isEmpty = true;
+  private boolean isDeclared = true;
   private final JSTypeRegistry registry;
   private final HashMap<String, RecordProperty> properties = Maps.newHashMap();
 
@@ -59,6 +60,9 @@ public class RecordTypeBuilder {
   }
 
   /** See the comments on RecordType about synthetic types. */
+  void setSynthesized(boolean synthesized) {
+    isDeclared = !synthesized;
+  }
 
   /**
    * Adds a property with the given name and type to the record type.
@@ -89,7 +93,7 @@ public class RecordTypeBuilder {
     }
 
     return new RecordType(
-        registry, Collections.unmodifiableMap(properties));
+        registry, Collections.unmodifiableMap(properties), isDeclared);
   }
 
   static class RecordProperty {
