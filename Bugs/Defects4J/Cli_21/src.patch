diff --git a/Cli_21/buggy/org/apache/commons/cli2/WriteableCommandLine.java b/Cli_21/fixed/org/apache/commons/cli2/WriteableCommandLine.java
index d6aaf49..8bd6752 100644
--- a/Cli_21/buggy/org/apache/commons/cli2/WriteableCommandLine.java
+++ b/Cli_21/fixed/org/apache/commons/cli2/WriteableCommandLine.java
@@ -99,6 +99,7 @@ public interface WriteableCommandLine extends CommandLine {
      *
      * @return the current option
      */
+    Option getCurrentOption();
 
     /**
      * Sets the current option. This method is called by concrete option
@@ -107,4 +108,5 @@ public interface WriteableCommandLine extends CommandLine {
      *
      * @param currentOption the new current option
      */
+    void setCurrentOption(Option currentOption);
 }
diff --git a/Cli_21/buggy/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java b/Cli_21/fixed/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java
index 88d3286..8c5e29b 100644
--- a/Cli_21/buggy/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java
+++ b/Cli_21/fixed/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java
@@ -48,6 +48,8 @@ public class WriteableCommandLineImpl
     private final Map defaultSwitches = new HashMap();
     private final List normalised;
     private final Set prefixes;
+    private Option currentOption;
+    private String checkForOption;
 
     /**
      * Creates a new WriteableCommandLineImpl rooted on the specified Option, to
@@ -60,9 +62,16 @@ public class WriteableCommandLineImpl
                                     final List arguments) {
         this.prefixes = rootOption.getPrefixes();
         this.normalised = arguments;
+        setCurrentOption(rootOption);
     }
 
+    public Option getCurrentOption() {
+        return currentOption;
+    }
 
+    public void setCurrentOption(Option currentOption) {
+        this.currentOption = currentOption;
+    }
 
     public void addOption(Option option) {
         options.add(option);
@@ -231,18 +240,35 @@ public class WriteableCommandLineImpl
      */
     public boolean looksLikeOption(final String trigger)
     {
+        if (checkForOption != null)
+        {
             // this is a reentrant call
+            return !checkForOption.equals(trigger);
+        }
 
+        checkForOption = trigger;
+        try
+        {
             for (final Iterator i = prefixes.iterator(); i.hasNext();)
             {
                 final String prefix = (String) i.next();
 
                 if (trigger.startsWith(prefix))
                 {
+                    if (getCurrentOption().canProcess(this, trigger)
+                            || getCurrentOption().findOption(trigger) != null)
+                    {
                         return true;
+                    }
                 }
             }
+
             return false;
+        }
+        finally
+        {
+            checkForOption = null;
+        }
     }
 
     public String toString() {
diff --git a/Cli_21/buggy/org/apache/commons/cli2/option/GroupImpl.java b/Cli_21/fixed/org/apache/commons/cli2/option/GroupImpl.java
index 75d87f7..fc5a82d 100644
--- a/Cli_21/buggy/org/apache/commons/cli2/option/GroupImpl.java
+++ b/Cli_21/fixed/org/apache/commons/cli2/option/GroupImpl.java
@@ -510,7 +510,13 @@ public class GroupImpl
      */
     private boolean looksLikeOption(final WriteableCommandLine commandLine,
             final String trigger) {
+        Option oldOption = commandLine.getCurrentOption();
+        try {
+            commandLine.setCurrentOption(this);
             return commandLine.looksLikeOption(trigger);
+        } finally {
+            commandLine.setCurrentOption(oldOption);
+        }
     }
 }
 
