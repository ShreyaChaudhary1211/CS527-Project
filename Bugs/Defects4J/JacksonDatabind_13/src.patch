diff --git a/JacksonDatabind_13/buggy/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java b/JacksonDatabind_13/fixed/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java
index 373ac89..8132018 100644
--- a/JacksonDatabind_13/buggy/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java
+++ b/JacksonDatabind_13/fixed/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java
@@ -84,6 +84,9 @@ public abstract class DefaultDeserializationContext
         /* 02-Apr-2015, tatu: As per [databind#742] should allow 'null', similar to how
          *   missing id already works.
          */
+        if (id == null) {
+            return null;
+        }
 
         final ObjectIdGenerator.IdKey key = gen.key(id);
 
diff --git a/JacksonDatabind_13/buggy/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java b/JacksonDatabind_13/fixed/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java
index 921904f..594d85f 100644
--- a/JacksonDatabind_13/buggy/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java
+++ b/JacksonDatabind_13/fixed/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java
@@ -89,6 +89,9 @@ public final class ObjectIdValueProperty
          *  will be generated externally, at a later point, and is not available
          *  quite yet. Typical use case is with DB inserts.
          */
+        if (id == null) {
+            return null;
+        }
         
         ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver);
         roid.bindItem(instance);
