diff --git a/Gson_4/buggy/.defects4j.config b/Gson_4/fixed/.defects4j.config
index 82c1cb7..e3f98da 100644
--- a/Gson_4/buggy/.defects4j.config
+++ b/Gson_4/fixed/.defects4j.config
@@ -1,3 +1,3 @@
 #File automatically generated by Defects4J
 pid=Gson
-vid=4b
+vid=4f
diff --git a/Gson_4/buggy/gson/src/main/java/com/google/gson/stream/JsonReader.java b/Gson_4/fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java
index e3ad50e..838355c 100644
--- a/Gson_4/buggy/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/Gson_4/fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java
@@ -571,9 +571,6 @@ public class JsonReader implements Closeable {
       checkLenient();
       return peeked = PEEKED_SINGLE_QUOTED;
     case '"':
-      if (stackSize == 1) {
-        checkLenient();
-      }
       return peeked = PEEKED_DOUBLE_QUOTED;
     case '[':
       return peeked = PEEKED_BEGIN_ARRAY;
@@ -582,9 +579,6 @@ public class JsonReader implements Closeable {
     default:
       pos--; // Don't consume the first character in a literal value.
     }
-    if (stackSize == 1) {
-      checkLenient();
-    }
 
     int result = peekKeyword();
     if (result != PEEKED_NONE) {
diff --git a/Gson_4/buggy/gson/src/main/java/com/google/gson/stream/JsonWriter.java b/Gson_4/fixed/gson/src/main/java/com/google/gson/stream/JsonWriter.java
index d76f7c1..9bf2d22 100644
--- a/Gson_4/buggy/gson/src/main/java/com/google/gson/stream/JsonWriter.java
+++ b/Gson_4/fixed/gson/src/main/java/com/google/gson/stream/JsonWriter.java
@@ -322,7 +322,7 @@ public class JsonWriter implements Closeable, Flushable {
    * bracket.
    */
   private JsonWriter open(int empty, String openBracket) throws IOException {
-    beforeValue(true);
+    beforeValue();
     push(empty);
     out.write(openBracket);
     return this;
@@ -415,7 +415,7 @@ public class JsonWriter implements Closeable, Flushable {
       return nullValue();
     }
     writeDeferredName();
-    beforeValue(false);
+    beforeValue();
     string(value);
     return this;
   }
@@ -432,7 +432,7 @@ public class JsonWriter implements Closeable, Flushable {
       return nullValue();
     }
     writeDeferredName();
-    beforeValue(false);
+    beforeValue();
     out.append(value);
     return this;
   }
@@ -451,7 +451,7 @@ public class JsonWriter implements Closeable, Flushable {
         return this; // skip the name and the value
       }
     }
-    beforeValue(false);
+    beforeValue();
     out.write("null");
     return this;
   }
@@ -463,7 +463,7 @@ public class JsonWriter implements Closeable, Flushable {
    */
   public JsonWriter value(boolean value) throws IOException {
     writeDeferredName();
-    beforeValue(false);
+    beforeValue();
     out.write(value ? "true" : "false");
     return this;
   }
@@ -480,7 +480,7 @@ public class JsonWriter implements Closeable, Flushable {
       throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
     }
     writeDeferredName();
-    beforeValue(false);
+    beforeValue();
     out.append(Double.toString(value));
     return this;
   }
@@ -492,7 +492,7 @@ public class JsonWriter implements Closeable, Flushable {
    */
   public JsonWriter value(long value) throws IOException {
     writeDeferredName();
-    beforeValue(false);
+    beforeValue();
     out.write(Long.toString(value));
     return this;
   }
@@ -515,7 +515,7 @@ public class JsonWriter implements Closeable, Flushable {
         && (string.equals("-Infinity") || string.equals("Infinity") || string.equals("NaN"))) {
       throw new IllegalArgumentException("Numeric values must be finite, but was " + value);
     }
-    beforeValue(false);
+    beforeValue();
     out.append(string);
     return this;
   }
@@ -610,7 +610,7 @@ public class JsonWriter implements Closeable, Flushable {
    * closing bracket or another element.
    */
   @SuppressWarnings("fallthrough")
-  private void beforeValue(boolean root) throws IOException {
+  private void beforeValue() throws IOException {
     switch (peek()) {
     case NONEMPTY_DOCUMENT:
       if (!lenient) {
@@ -619,10 +619,6 @@ public class JsonWriter implements Closeable, Flushable {
       }
       // fall-through
     case EMPTY_DOCUMENT: // first in document
-      if (!lenient && !root) {
-        throw new IllegalStateException(
-            "JSON must start with an array or an object.");
-      }
       replaceTop(NONEMPTY_DOCUMENT);
       break;
 
