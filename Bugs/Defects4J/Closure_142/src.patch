diff --git a/Closure_142/buggy/com/google/javascript/jscomp/CoalesceVariableNames.java b/Closure_142/fixed/com/google/javascript/jscomp/CoalesceVariableNames.java
index 78c27b3..e990c82 100644
--- a/Closure_142/buggy/com/google/javascript/jscomp/CoalesceVariableNames.java
+++ b/Closure_142/fixed/com/google/javascript/jscomp/CoalesceVariableNames.java
@@ -105,6 +105,9 @@ class CoalesceVariableNames extends AbstractPostOrderCallback implements
     // a work-around for an IE bug where it throws an exception if you
     // write to the parameters of the callback in a sort(). See:
     // http://code.google.com/p/closure-compiler/issues/detail?id=58
+    if (scope.getRootNode().getFirstChild().getNext().getChildCount() == 2) {
+      liveness.markAllParametersEscaped();
+    }
     liveness.analyze();
 
     UndiGraph<Var, Void> interferenceGraph =
diff --git a/Closure_142/buggy/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/Closure_142/fixed/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index cdcd2ff..216740b 100644
--- a/Closure_142/buggy/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/Closure_142/fixed/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1165,6 +1165,8 @@ public final class JsDocInfoParser {
         case EOF:
           // When we're capturing a license block, annotations
           // in the block are ok.
+          if (!(option == WhitespaceOption.PRESERVE &&
+                token == JsDocToken.ANNOTATION)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
@@ -1180,6 +1182,7 @@ public final class JsDocInfoParser {
             }
 
             return new ExtractionInfo(multilineText, token);
+          }
 
           // FALL THROUGH
 
