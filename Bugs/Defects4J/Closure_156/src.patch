diff --git a/Closure_156/buggy/com/google/javascript/jscomp/CollapseProperties.java b/Closure_156/fixed/com/google/javascript/jscomp/CollapseProperties.java
index 01295cd..abe0159 100644
--- a/Closure_156/buggy/com/google/javascript/jscomp/CollapseProperties.java
+++ b/Closure_156/fixed/com/google/javascript/jscomp/CollapseProperties.java
@@ -452,8 +452,8 @@ class CollapseProperties implements CompilerPass {
     boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();
 
     // Handle this name first so that nested object literals get unrolled.
-    if (n.canCollapse() && canCollapseChildNames) {
-      updateObjLitOrFunctionDeclaration(n, alias);
+    if (n.canCollapse()) {
+      updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);
     }
 
     if (n.props != null) {
@@ -571,7 +571,8 @@ class CollapseProperties implements CompilerPass {
    *     this name. (This is mostly passed for convenience; it's equivalent to
    *     n.canCollapseChildNames()).
    */
-  private void updateObjLitOrFunctionDeclaration(Name n, String alias) {
+  private void updateObjLitOrFunctionDeclaration(
+      Name n, String alias, boolean canCollapseChildNames) {
     if (n.declaration == null) {
       // Some names do not have declarations, because they
       // are only defined in local scopes.
@@ -586,13 +587,14 @@ class CollapseProperties implements CompilerPass {
 
     switch (n.declaration.node.getParent().getType()) {
       case Token.ASSIGN:
-        updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);
+        updateObjLitOrFunctionDeclarationAtAssignNode(
+            n, alias, canCollapseChildNames);
         break;
       case Token.VAR:
-        updateObjLitOrFunctionDeclarationAtVarNode(n);
+        updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
         break;
       case Token.FUNCTION:
-        updateFunctionDeclarationAtFunctionNode(n);
+        updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
         break;
     }
   }
@@ -606,7 +608,7 @@ class CollapseProperties implements CompilerPass {
    * @param alias The flattened name for {@code n} (e.g. "a", "a$b$c")
    */
   private void updateObjLitOrFunctionDeclarationAtAssignNode(
-      Name n, String alias) {
+      Name n, String alias, boolean canCollapseChildNames) {
     // NOTE: It's important that we don't add additional nodes
     // (e.g. a var node before the exprstmt) because the exprstmt might be
     // the child of an if statement that's not inside a block).
@@ -650,13 +652,15 @@ class CollapseProperties implements CompilerPass {
       insertedVarNode = true;
     }
 
-    if (isObjLit) {
+    if (canCollapseChildNames) {
+      if (isObjLit) {
         declareVarsForObjLitValues(
             n, alias, rvalue,
             varNode, varParent.getChildBefore(varNode), varParent);
+      }
 
-    }
       addStubsForUndeclaredProperties(n, alias, varParent, varNode);
+    }
 
     if (insertedVarNode) {
       if (!varNode.hasChildren()) {
@@ -696,7 +700,11 @@ class CollapseProperties implements CompilerPass {
    *
    * @param n An object representing a global name (e.g. "a")
    */
-  private void updateObjLitOrFunctionDeclarationAtVarNode(Name n) {
+  private void updateObjLitOrFunctionDeclarationAtVarNode(
+      Name n, boolean canCollapseChildNames) {
+    if (!canCollapseChildNames) {
+      return;
+    }
 
     Ref ref = n.declaration;
     String name = ref.node.getString();
@@ -739,7 +747,11 @@ class CollapseProperties implements CompilerPass {
    *
    * @param n An object representing a global name (e.g. "a")
    */
-  private void updateFunctionDeclarationAtFunctionNode(Name n) {
+  private void updateFunctionDeclarationAtFunctionNode(
+      Name n, boolean canCollapseChildNames) {
+    if (!canCollapseChildNames) {
+      return;
+    }
 
     Ref ref = n.declaration;
     String fnName = ref.node.getString();
