diff --git a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java
index 3a053d4..4d8c2c4 100644
--- a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java
+++ b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java
@@ -28,10 +28,8 @@ public class CoreOperationGreaterThan extends CoreOperationRelationalExpression
         super(new Expression[] { arg1, arg2 });
     }
 
-    public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {
-        double l = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[0].computeValue(context));
-        double r = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return l > r ? Boolean.TRUE : Boolean.FALSE;
+    protected boolean evaluateCompare(int compare) {
+        return compare > 0;
     }
 
     public String getSymbol() {
diff --git a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java
index b9f156c..c3d5720 100644
--- a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java
+++ b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java
@@ -29,10 +29,8 @@ public class CoreOperationGreaterThanOrEqual extends
         super(new Expression[] { arg1, arg2 });
     }
 
-    public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {
-        double l = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[0].computeValue(context));
-        double r = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return l >= r ? Boolean.TRUE : Boolean.FALSE;
+    protected boolean evaluateCompare(int compare) {
+        return compare >= 0;
     }
 
     public String getSymbol() {
diff --git a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java
index 374f772..4c0d9ce 100644
--- a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java
+++ b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java
@@ -28,10 +28,8 @@ public class CoreOperationLessThan extends CoreOperationRelationalExpression {
         super(new Expression[] { arg1, arg2 });
     }
 
-    public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {
-        double l = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[0].computeValue(context));
-        double r = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return l < r ? Boolean.TRUE : Boolean.FALSE;
+    protected boolean evaluateCompare(int compare) {
+        return compare < 0;
     }
 
     public String getSymbol() {
diff --git a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java
index db562d8..7940ecb 100644
--- a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java
+++ b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java
@@ -29,10 +29,8 @@ public class CoreOperationLessThanOrEqual extends
         super(new Expression[] { arg1, arg2 });
     }
 
-    public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) {
-        double l = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[0].computeValue(context));
-        double r = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[1].computeValue(context));
-        return l <= r ? Boolean.TRUE : Boolean.FALSE;
+    protected boolean evaluateCompare(int compare) {
+        return compare <= 0;
     }
 
     public String getSymbol() {
diff --git a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
index 4893dd6..bbb070d 100644
--- a/JxPath_7/buggy/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
+++ b/JxPath_7/fixed/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
@@ -16,7 +16,14 @@
  */
 package org.apache.commons.jxpath.ri.compiler;
 
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
 
+import org.apache.commons.jxpath.ri.EvalContext;
+import org.apache.commons.jxpath.ri.InfoSetUtil;
+import org.apache.commons.jxpath.ri.axes.InitialContext;
+import org.apache.commons.jxpath.ri.axes.SelfContext;
 
 /**
  * Base implementation of Expression for the operations "&gt;", "&gt;=", "&lt;", "&lt;=".
@@ -30,6 +37,10 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
         super(args);
     }
 
+    public final Object computeValue(EvalContext context) {
+        return compute(args[0].computeValue(context), args[1]
+                .computeValue(context)) ? Boolean.TRUE : Boolean.FALSE;
+    }
 
     protected final int getPrecedence() {
         return 3;
@@ -39,11 +50,67 @@ public abstract class CoreOperationRelationalExpression extends CoreOperation {
         return false;
     }
 
+    protected abstract boolean evaluateCompare(int compare);
 
+    private boolean compute(Object left, Object right) {
+        left = reduce(left);
+        right = reduce(right);
 
+        if (left instanceof InitialContext) {
+            ((InitialContext) left).reset();
+        }
+        if (right instanceof InitialContext) {
+            ((InitialContext) right).reset();
+        }
+        if (left instanceof Iterator && right instanceof Iterator) {
+            return findMatch((Iterator) left, (Iterator) right);
+        }
+        if (left instanceof Iterator) {
+            return containsMatch((Iterator) left, right);
+        }
+        if (right instanceof Iterator) {
+            return containsMatch((Iterator) right, left);
+        }
+        return evaluateCompare(compare(left, right));
+    }
 
+    private Object reduce(Object o) {
+        if (o instanceof SelfContext) {
+            o = ((EvalContext) o).getSingleNodePointer();
+        }
+        if (o instanceof Collection) {
+            o = ((Collection) o).iterator();
+        }
+        return o;
+    }
 
+    private boolean containsMatch(Iterator it, Object value) {
+        while (it.hasNext()) {
+            Object element = it.next();
+            if (evaluateCompare(compare(element, value))) {
+                return true;
+            }
+        }
+        return false;
+    }
 
+    private boolean findMatch(Iterator lit, Iterator rit) {
+        HashSet left = new HashSet();
+        while (lit.hasNext()) {
+            left.add(lit.next());
+        }
+        while (rit.hasNext()) {
+            if (containsMatch(left.iterator(), rit.next())) {
+                return true;
+            }
+        }
+        return false;
+    }
 
+    private int compare(Object l, Object r) {
+        double ld = InfoSetUtil.doubleValue(l);
+        double rd = InfoSetUtil.doubleValue(r);
+        return ld == rd ? 0 : ld < rd ? -1 : 1;
+    }
 
 }
