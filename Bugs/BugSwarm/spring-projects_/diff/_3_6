[]
[<Line: -/*
>, <Line: - * Copyright 2013-2014 the original author or authors.
>, <Line: - *
>, <Line: - * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: - * you may not use this file except in compliance with the License.
>, <Line: - * You may obtain a copy of the License at
>, <Line: - *
>, <Line: - *      http://www.apache.org/licenses/LICENSE-2.0
>, <Line: - *
>, <Line: - * Unless required by applicable law or agreed to in writing, software
>, <Line: - * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: - * See the License for the specific language governing permissions and
>, <Line: - * limitations under the License.
>, <Line: - */
>, <Line: -package org.springframework.hateoas.core;
>, <Line: -import static org.hamcrest.Matchers.*;
>, <Line: -import static org.junit.Assert.*;
>, <Line: -import java.lang.reflect.Method;
>, <Line: -import java.util.List;
>, <Line: -import org.junit.Test;
>, <Line: -import org.springframework.beans.factory.annotation.Qualifier;
>, <Line: -import org.springframework.core.MethodParameter;
>, <Line: -/**
>, <Line: - * Unit tests for {@link MethodParameters}.
>, <Line: - * 
>, <Line: - * @author Oliver Gierke
>, <Line: - */
>, <Line: -public class MethodParametersUnitTests {
>, <Line: -	@Test
>, <Line: -	public void prefersAnnotatedParameterOverDiscovered() throws Exception {
>, <Line: -		Method method = Sample.class.getMethod("method", String.class, String.class, Object.class);
>, <Line: -		MethodParameters parameters = new MethodParameters(method, new AnnotationAttribute(Qualifier.class));
>, <Line: -		assertThat(parameters.getParameter("param"), is(notNullValue()));
>, <Line: -		assertThat(parameters.getParameter("foo"), is(notNullValue()));
>, <Line: -		assertThat(parameters.getParameter("another"), is(nullValue()));
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * @see #138
>, <Line: -	 */
>, <Line: -	@Test
>, <Line: -	public void returnsParametersOfAGivenType() throws Exception {
>, <Line: -		Method method = Sample.class.getMethod("method", String.class, String.class, Object.class);
>, <Line: -		MethodParameters methodParameters = new MethodParameters(method);
>, <Line: -		List<MethodParameter> objectParameters = methodParameters.getParametersOfType(Object.class);
>, <Line: -		assertThat(objectParameters, hasSize(1));
>, <Line: -		assertThat(objectParameters.get(0).getParameterIndex(), is(2));
>, <Line: -	}
>, <Line: -	static class Sample {
>, <Line: -		public void method(String param, @Qualifier("foo") String another, Object object) {}
>, <Line: -	}
>, <Line: -}
>]