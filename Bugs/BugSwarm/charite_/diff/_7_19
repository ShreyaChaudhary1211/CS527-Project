[<Line: +package de.charite.compbio.jannovar.mendel;
>, <Line: +import java.util.Collection;
>, <Line: +import java.util.Map;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import com.google.common.collect.ImmutableMap;
>, <Line: +import de.charite.compbio.jannovar.Immutable;
>, <Line: +import de.charite.compbio.jannovar.mendel.impl.AbstractMendelianChecker;
>, <Line: +import de.charite.compbio.jannovar.mendel.impl.MendelianCheckerAD;
>, <Line: +import de.charite.compbio.jannovar.mendel.impl.MendelianCheckerAR;
>, <Line: +import de.charite.compbio.jannovar.mendel.impl.MendelianCheckerXD;
>, <Line: +import de.charite.compbio.jannovar.mendel.impl.MendelianCheckerXR;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: +import de.charite.compbio.jannovar.pedigree.PedigreeQueryDecorator;
>, <Line: +/**
>, <Line: + * Facade class for checking lists of {@link GenotypeCalls} for compatibility with mendelian inheritance
>, <Line: + * 
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: + */
>, <Line: +@Immutable
>, <Line: +public final class MendelianInheritanceChecker {
>, <Line: +	/** Pedigree to use for mendelian inheritance checking */
>, <Line: +	final private Pedigree pedigree;
>, <Line: +	/** Helper for querying a pedigree */
>, <Line: +	final private PedigreeQueryDecorator queryPed;
>, <Line: +	/** Mendelian compatibility checker for each mode of inheritance */
>, <Line: +	final private ImmutableMap<ModeOfInheritance, AbstractMendelianChecker> checkers;
>, <Line: +	/**
>, <Line: +	 * Construct checker with the pedigree to use
>, <Line: +	 * 
>, <Line: +	 * @param pedigree
>, <Line: +	 *            The pedigree to use for the mendelian inheritance checking
>, <Line: +	 */
>, <Line: +	public MendelianInheritanceChecker(Pedigree pedigree) {
>, <Line: +		this.pedigree = pedigree;
>, <Line: +		this.queryPed = new PedigreeQueryDecorator(pedigree);
>, <Line: +		ImmutableMap.Builder<ModeOfInheritance, AbstractMendelianChecker> builder = new ImmutableMap.Builder<>();
>, <Line: +		builder.put(ModeOfInheritance.AUTOSOMAL_DOMINANT, new MendelianCheckerAD(this));
>, <Line: +		builder.put(ModeOfInheritance.AUTOSOMAL_RECESSIVE, new MendelianCheckerAR(this));
>, <Line: +		builder.put(ModeOfInheritance.X_DOMINANT, new MendelianCheckerXD(this));
>, <Line: +		builder.put(ModeOfInheritance.X_RECESSIVE, new MendelianCheckerXR(this));
>, <Line: +		this.checkers = builder.build();
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Perform checking for compatible mode of inheritance
>, <Line: +	 * 
>, <Line: +	 * @param calls
>, <Line: +	 *            {@link Collection} of {@link GenotypeCalls} objects to perform the mode of inheritance check for
>, <Line: +	 * @return {@link Map} that, for each {@link ModeOfInheritance}, contains the {@link Collection} of compatible
>, <Line: +	 *         {@link GenotypeCalls} from <code>list</code>
>, <Line: +	 * @throws IncompatiblePedigreeException
>, <Line: +	 *             if the individuals in <code>calls</code> do not fit to the pedigree
>, <Line: +	 */
>, <Line: +	public ImmutableMap<ModeOfInheritance, ImmutableList<GenotypeCalls>> checkMendelianInheritance(
>, <Line: +			Collection<GenotypeCalls> calls) throws IncompatiblePedigreeException {
>, <Line: +		ImmutableMap.Builder<ModeOfInheritance, ImmutableList<GenotypeCalls>> builder = new ImmutableMap.Builder<>();
>, <Line: +		for (ModeOfInheritance mode : ModeOfInheritance.values())
>, <Line: +			if (mode != ModeOfInheritance.ANY)
>, <Line: +				builder.put(mode, filterCompatibleRecords(calls, mode));
>, <Line: +			else
>, <Line: +				builder.put(mode, ImmutableList.copyOf(calls));
>, <Line: +		return builder.build();
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Filters records in <code>calls</code> for compatibility with <code>mode</code>
>, <Line: +	 * 
>, <Line: +	 * @param calls
>, <Line: +	 *            List of {@link GenotypeCalls} to filter
>, <Line: +	 * @param mode
>, <Line: +	 *            {@link ModeOfInheritance} to check for
>, <Line: +	 * @return List of {@link GenotypeCalls} from <code>calls</code> that are compatible with <code>mode</code>
>, <Line: +	 * @throws IncompatiblePedigreeException
>, <Line: +	 *             if the individuals in <code>calls</code> do not fit to the pedigree
>, <Line: +	 */
>, <Line: +	private ImmutableList<GenotypeCalls> filterCompatibleRecords(Collection<GenotypeCalls> calls,
>, <Line: +			ModeOfInheritance mode) throws IncompatiblePedigreeException {
>, <Line: +		if (mode == ModeOfInheritance.ANY)
>, <Line: +			return ImmutableList.copyOf(calls);
>, <Line: +		else
>, <Line: +			return checkers.get(mode).filterCompatibleRecords(calls);
>, <Line: +	}
>, <Line: +	/** @return {@link Pedigree} to use */
>, <Line: +	public Pedigree getPedigree() {
>, <Line: +		return pedigree;
>, <Line: +	}
>, <Line: +}
>]
[]