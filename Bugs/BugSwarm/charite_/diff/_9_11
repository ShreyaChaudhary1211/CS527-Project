[<Line: +package de.charite.compbio.jannovar.reference;
>, <Line: +import com.google.common.base.Joiner;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import org.junit.Assert;
>, <Line: +import org.junit.Test;
>, <Line: +/**
>, <Line: + * Test for {@link TranscriptSequenceDecorator}.
>, <Line: + */
>, <Line: +public class TranscriptSequenceDecoratorTest {
>, <Line: +	private static final String[] CODONS = { "ATG", "ATC", "AGA", "GCT", "TGA" };
>, <Line: +	private static final int START_LAST_CODON = 12;
>, <Line: +	private static final TranscriptModel MODEL = getTestTranscriptModel();
>, <Line: +	@Test
>, <Line: +	public void testGetCodonAt() throws Exception {
>, <Line: +		TranscriptSequenceDecorator decorator = new TranscriptSequenceDecorator(MODEL);
>, <Line: +		Assert.assertEquals(CODONS[CODONS.length - 1], decorator.getCodonAt(tx(START_LAST_CODON), cds(START_LAST_CODON)));
>, <Line: +		Assert.assertEquals(CODONS[0], decorator.getCodonAt(tx(0), cds(0)));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testGetCodonsStartingFrom() throws Exception {
>, <Line: +		TranscriptSequenceDecorator decorator = new TranscriptSequenceDecorator(MODEL);
>, <Line: +		Assert.assertEquals(CODONS[0] + CODONS[1], decorator.getCodonsStartingFrom(tx(0), cds(0), 2));
>, <Line: +		Assert.assertEquals(CODONS[CODONS.length - 2] + CODONS[CODONS.length - 1],
>, <Line: +				decorator.getCodonsStartingFrom(tx(9), cds(9), 2));
>, <Line: +	}
>, <Line: +	private static TranscriptModel getTestTranscriptModel() {
>, <Line: +		String sequence = Joiner.on("").join(CODONS);
>, <Line: +		return new TranscriptModel("TEST", "TEST", new GenomeInterval(null, Strand.FWD, 1, 0, sequence.length()),
>, <Line: +				new GenomeInterval(null, Strand.FWD, 1, 0, sequence.length()), ImmutableList.<GenomeInterval>builder().build(),
>, <Line: +				sequence, "TEST", 1);
>, <Line: +	}
>, <Line: +	private static TranscriptPosition tx(int pos) {
>, <Line: +		return new TranscriptPosition(MODEL, pos);
>, <Line: +	}
>, <Line: +	private static CDSPosition cds(int pos) {
>, <Line: +		return new CDSPosition(MODEL, pos);
>, <Line: +	}
>, <Line: +}
>]
[]