[<Line: +import net.sourceforge.argparse4j.inf.Namespace;
>, <Line: +	private JannovarDownloadOptions options;
>, <Line: +	public DownloadCommand(String argv[], Namespace args) throws CommandLineParsingException {
>, <Line: +		this.options = new JannovarDownloadOptions();
>, <Line: +		this.options.setFromArgs(args);
>, <Line: +		System.err.println(options.toString());
>, <Line: +		DatasourceOptions dsOptions = new DatasourceOptions(options.getHttpProxy(), options.getHttpsProxy(),
>, <Line: +				options.getFtpProxy(), options.isReportProgress());
>, <Line: +		for (String name : options.getDatabaseNames()) {
>, <Line: +			JannovarData data = factory.getDataSource(name).getDataFactory().build(options.getDownloadDir(),
>, <Line: +					options.isReportProgress());
>, <Line: +			String filename = PathUtil.join(options.getDownloadDir(),
>, <Line: +					name.replace('/', '_').replace('\\', '_') + ".ser");
>]
[<Line: -import org.apache.commons.cli.ParseException;
>, <Line: -import de.charite.compbio.jannovar.JannovarOptions;
>, <Line: -import de.charite.compbio.jannovar.cmd.HelpRequestedException;
>, <Line: -	public DownloadCommand(String[] argv) throws CommandLineParsingException, HelpRequestedException {
>, <Line: -		super(argv);
>, <Line: -		options.print(System.err);
>, <Line: -		DatasourceOptions dsOptions = new DatasourceOptions(options.httpProxy, options.httpsProxy, options.ftpProxy,
>, <Line: -				options.printProgressBars);
>, <Line: -		for (String name : options.dataSourceNames) {
>, <Line: -			JannovarData data = factory.getDataSource(name).getDataFactory()
>, <Line: -					.build(options.downloadPath, options.printProgressBars);
>, <Line: -			String filename = PathUtil.join(options.downloadPath, name.replace('/', '_').replace('\\', '_') + ".ser");
>, <Line: -	@Override
>, <Line: -	protected JannovarOptions parseCommandLine(String[] argv) throws CommandLineParsingException,
>, <Line: -	HelpRequestedException {
>, <Line: -		try {
>, <Line: -			return new DownloadCommandLineParser().parse(argv);
>, <Line: -		} catch (ParseException e) {
>, <Line: -			throw new CommandLineParsingException("Could not parse the command line.", e);
>, <Line: -		}
>, <Line: -	}
>]