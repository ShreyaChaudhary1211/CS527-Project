[<Line: +package de.charite.compbio.jannovar.mendel;
>, <Line: +import java.util.List;
>, <Line: +import org.junit.Assert;
>, <Line: +import org.junit.Before;
>, <Line: +import org.junit.Test;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import com.google.common.collect.ImmutableMap;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Disease;
>, <Line: +import de.charite.compbio.jannovar.pedigree.PedFileContents;
>, <Line: +import de.charite.compbio.jannovar.pedigree.PedPerson;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Sex;
>, <Line: +public class MendelianCompatibilityCheckerARLargeTest extends MendelianCompatibilityCheckerTestBase {
>, <Line: +	MendelianInheritanceChecker checker;
>, <Line: +	List<GenotypeCalls> gcList;
>, <Line: +	ImmutableMap<ModeOfInheritance, ImmutableList<GenotypeCalls>> result;
>, <Line: +	@Before
>, <Line: +	public void setUp() throws Exception {
>, <Line: +		ImmutableList.Builder<PedPerson> individuals = new ImmutableList.Builder<PedPerson>();
>, <Line: +		individuals.add(new PedPerson("ped", "I.1", "0", "0", Sex.MALE, Disease.UNAFFECTED)); // grandgrandfather
>, <Line: +		individuals.add(new PedPerson("ped", "I.2", "0", "0", Sex.FEMALE, Disease.UNAFFECTED)); // grandgrandmother
>, <Line: +		individuals.add(new PedPerson("ped", "II.1", "0", "0", Sex.MALE, Disease.UNAFFECTED)); // parent1
>, <Line: +		individuals.add(new PedPerson("ped", "II.2", "I.1", "I.2", Sex.FEMALE, Disease.UNAFFECTED)); // parent2
>, <Line: +		individuals.add(new PedPerson("ped", "II.3", "I.1", "I.2", Sex.FEMALE, Disease.AFFECTED)); // parent3
>, <Line: +		individuals.add(new PedPerson("ped", "II.4", "I.1", "I.2", Sex.FEMALE, Disease.UNKNOWN)); // parent4
>, <Line: +		individuals.add(new PedPerson("ped", "III.1", "II.1", "II.2", Sex.MALE, Disease.UNAFFECTED)); // child1
>, <Line: +		individuals.add(new PedPerson("ped", "III.2", "0", "II.3", Sex.MALE, Disease.UNAFFECTED)); // child2
>, <Line: +		individuals.add(new PedPerson("ped", "IV.1", "III.1", "0", Sex.FEMALE, Disease.AFFECTED)); // baby1
>, <Line: +		individuals.add(new PedPerson("ped", "IV.2", "III.2", "0", Sex.FEMALE, Disease.UNAFFECTED)); // baby2
>, <Line: +		PedFileContents pedFileContents = new PedFileContents(new ImmutableList.Builder<String>().build(),
>, <Line: +				individuals.build());
>, <Line: +		this.pedigree = new Pedigree(pedFileContents, "ped");
>, <Line: +		this.names = ImmutableList.of("I.1", "I.2", "II.1", "II.2", "II.3", "II.4", "III.1", "III.2", "IV.1", "IV.2");
>, <Line: +		this.checker = new MendelianInheritanceChecker(this.pedigree);
>, <Line: +		this.result = null;
>, <Line: +		this.gcList = null;
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testSizeOfPedigree() {
>, <Line: +		Assert.assertEquals(10, pedigree.getMembers().size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant1() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, HET, HET, HET, HET, HET, HET, HET, HET), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant2() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(REF, REF, REF, REF, REF, REF, REF, REF, REF, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant3() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, ALT, ALT, ALT, ALT, ALT, ALT, ALT, ALT, ALT), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant4() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(UKN, UKN, UKN, UKN, UKN, UKN, UKN, UKN, UKN, UKN), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant5() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, REF, HET, ALT, UKN, HET, HET, ALT, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		// TODO: ask max why this is not a false negative case but was in his test...
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant6() throws IncompatiblePedigreeException {
>, <Line: +		// at least one hom_alt
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, REF, HET, UKN, UKN, HET, HET, UKN, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant7() throws IncompatiblePedigreeException {
>, <Line: +		// Only one UKN has ALT is not sufficient!
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, REF, HET, UKN, ALT, HET, HET, UKN, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant1() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, REF, HET, ALT, UKN, HET, HET, ALT, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant2() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, REF, HET, ALT, REF, HET, HET, ALT, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant3() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, REF, HET, ALT, ALT, HET, HET, ALT, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant4() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, REF, HET, ALT, REF, HET, HET, UKN, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant5() throws IncompatiblePedigreeException {
>, <Line: +		// correct inheritance from II.1/2 to III.1=> II.1 is now HET.
>, <Line: +		// but false inheritance from I.1/2 to II.2 (cause II.3 is alt, II.2 must be het).
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, HET, REF, ALT, UKN, HET, HET, ALT, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant6() throws IncompatiblePedigreeException {
>, <Line: +		// correct inheritance from II.1/2 to III.1. II.1 must have the same allele affected than II.2
>, <Line: +		// correct inheritance from I.1/2 to II.2.
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, HET, HET, ALT, UKN, HET, HET, ALT, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant7() throws IncompatiblePedigreeException {
>, <Line: +		// False inheritance II.1 or II.2 must be HET/UKN (or ALT and affected).
>, <Line: +		// But it is (very unlikely) a de-novo mutation in III.1.
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, REF, REF, ALT, UKN, HET, HET, ALT, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesTwoVariants1() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, REF, REF, REF, HET, UKN, REF, REF, HET, REF),
>, <Line: +				lst(REF, HET, HET, REF, HET, UKN, HET, REF, HET, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesTwoVariants2() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(REF, HET, REF, HET, HET, UKN, HET, HET, HET, REF),
>, <Line: +				lst(HET, REF, REF, REF, HET, UKN, REF, REF, HET, REF), false);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +}
>]
[]