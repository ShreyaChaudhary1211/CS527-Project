[<Line: +package de.charite.compbio.jannovar.mendel.impl;
>, <Line: +import java.util.Collection;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +import java.util.stream.Stream;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import de.charite.compbio.jannovar.mendel.ChromosomeType;
>, <Line: +import de.charite.compbio.jannovar.mendel.Genotype;
>, <Line: +import de.charite.compbio.jannovar.mendel.GenotypeCalls;
>, <Line: +import de.charite.compbio.jannovar.mendel.MendelianInheritanceChecker;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Disease;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Person;
>, <Line: +/**
>, <Line: + * Implementation of Mendelian compatibility check for autosomal dominant case
>, <Line: + * 
>, <Line: + * <h2>Compatibility Check</h2>
>, <Line: + * 
>, <Line: + * For autosomal dominant inheritance there must be at least one {@link Genotype} that is shared by all affected
>, <Line: + * individuals but no unaffected individuals in the pedigree. We do not allow homozygous alternative for any affected
>, <Line: + * individuals (and also for the one person in these of singleton pedigrees since this is not the interesting case for
>, <Line: + * users of this class.
>, <Line: + * 
>, <Line: + * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: + */
>, <Line: +public class MendelianCheckerAD extends AbstractMendelianChecker {
>, <Line: +	public MendelianCheckerAD(MendelianInheritanceChecker parent) {
>, <Line: +		super(parent);
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public ImmutableList<GenotypeCalls> filterCompatibleRecords(Collection<GenotypeCalls> calls) {
>, <Line: +		// Filter to calls on autosomal chromosomes
>, <Line: +		Stream<GenotypeCalls> autosomalCalls = calls.stream()
>, <Line: +				.filter(call -> call.getChromType() == ChromosomeType.AUTOSOMAL);
>, <Line: +		// Filter to calls compatible with AD inheritance
>, <Line: +		Stream<GenotypeCalls> compatibleCalls;
>, <Line: +		if (this.pedigree.getNMembers() == 1)
>, <Line: +			compatibleCalls = autosomalCalls.filter(this::isCompatibleSingleton);
>, <Line: +		else
>, <Line: +			compatibleCalls = autosomalCalls.filter(this::isCompatibleFamily);
>, <Line: +		return ImmutableList.copyOf(compatibleCalls.collect(Collectors.toList()));
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return whether <code>calls</code> is compatible with AD inheritance in the case of a single individual in the
>, <Line: +	 *         pedigree
>, <Line: +	 */
>, <Line: +	private boolean isCompatibleSingleton(GenotypeCalls calls) {
>, <Line: +		if (calls.getNSamples() == 0)
>, <Line: +			return false; // no calls!
>, <Line: +		return calls.getGenotypeBySampleNo(0).isHet();
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return whether <code>calls</code> is compatible with AD inheritance in the case of multiple individuals in the
>, <Line: +	 *         pedigree
>, <Line: +	 */
>, <Line: +	private boolean isCompatibleFamily(GenotypeCalls calls) {
>, <Line: +		int numAffectedWithHet = 0;
>, <Line: +		for (Person p : pedigree.getMembers()) {
>, <Line: +			final Genotype gt = calls.getGenotypeForSample(p.getName());
>, <Line: +			final Disease d = p.getDisease();
>, <Line: +			if (d == Disease.AFFECTED) {
>, <Line: +				if (gt.isHomRef() || gt.isHomAlt())
>, <Line: +					return false;
>, <Line: +				else if (gt.isHet())
>, <Line: +					numAffectedWithHet++;
>, <Line: +			} else if (d == Disease.UNAFFECTED) {
>, <Line: +				if (gt.isHet() || gt.isHomAlt())
>, <Line: +					return false;
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return (numAffectedWithHet > 0);
>, <Line: +	}
>, <Line: +}
>]
[]