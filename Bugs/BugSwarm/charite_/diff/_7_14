[<Line: +package de.charite.compbio.jannovar.mendel;
>, <Line: +import java.util.Collection;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import de.charite.compbio.jannovar.Immutable;
>, <Line: +/**
>, <Line: + * Representation of a genotype in an individual
>, <Line: + * 
>, <Line: + * Genotypes are represented by lists of integers identifying alleles from a {@link GenotypeCalls}. By convention, the
>, <Line: + * reference allele is represented by the integer <code>0</code>. <code>-1</code> encodes no-call.
>, <Line: + * 
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: + */
>, <Line: +@Immutable
>, <Line: +public class Genotype {
>, <Line: +	public static final int NO_CALL = -1;
>, <Line: +	public static final int REF_CALL = 0;
>, <Line: +	/** List of allele numbers */
>, <Line: +	private final ImmutableList<Integer> alleleNumbers;
>, <Line: +	/**
>, <Line: +	 * Construct {@link Genotype} with list of allele numbers
>, <Line: +	 * 
>, <Line: +	 * @param alleleNumbers
>, <Line: +	 */
>, <Line: +	public Genotype(Collection<Integer> alleleNumbers) {
>, <Line: +		this.alleleNumbers = ImmutableList.copyOf(alleleNumbers);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return {@link ImmutableList} of alleles in this genotype
>, <Line: +	 */
>, <Line: +	public ImmutableList<Integer> getAlleleNumbers() {
>, <Line: +		return alleleNumbers;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return Number of alleles in the genotype
>, <Line: +	 */
>, <Line: +	public int getPloidy() {
>, <Line: +		return alleleNumbers.size();
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return <code>true</code> if the sample is diploid, <code>false</code> otherwise
>, <Line: +	 */
>, <Line: +	public boolean isDiploid() {
>, <Line: +		return (getPloidy() == 2);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return <code>true</code> if the sample is monoploid, <code>false</code> otherwise
>, <Line: +	 */
>, <Line: +	public boolean isMonoploid() {
>, <Line: +		return (getPloidy() == 1);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return <code>true</code> if the sample is heterozygous, <code>false</code> otherwise
>, <Line: +	 */
>, <Line: +	public boolean isHet() {
>, <Line: +		if (!isDiploid())
>, <Line: +			return false; // only diploid genotypes cann be heterozygous
>, <Line: +		return ((alleleNumbers.get(0) == REF_CALL && alleleNumbers.get(1) != REF_CALL
>, <Line: +				&& alleleNumbers.get(1) != NO_CALL)
>, <Line: +				|| (alleleNumbers.get(0) != REF_CALL && alleleNumbers.get(0) != NO_CALL
>, <Line: +						&& alleleNumbers.get(1) == REF_CALL));
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return <code>true</code> if the sample is homozygous ref, <code>false</code> otherwise
>, <Line: +	 */
>, <Line: +	public boolean isHomRef() {
>, <Line: +		if (alleleNumbers.isEmpty())
>, <Line: +			return false; // empty calls are nothing
>, <Line: +		return alleleNumbers.stream().allMatch(x -> (x == REF_CALL));
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return <code>true</code> if the sample is homozygous alt, <code>false</code> otherwise
>, <Line: +	 */
>, <Line: +	public boolean isHomAlt() {
>, <Line: +		if (alleleNumbers.isEmpty())
>, <Line: +			return false; // empty calls are nothing
>, <Line: +		return alleleNumbers.stream().allMatch(x -> (x != REF_CALL && x != NO_CALL));
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return <code>true</code> if the genotype is not observed in all alleles
>, <Line: +	 */
>, <Line: +	public boolean isNotObserved() {
>, <Line: +		return alleleNumbers.stream().allMatch(n -> (n == NO_CALL));
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public String toString() {
>, <Line: +		return "Genotype [alleleNumbers=" + alleleNumbers + "]";
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public int hashCode() {
>, <Line: +		final int prime = 31;
>, <Line: +		int result = 1;
>, <Line: +		result = prime * result + ((alleleNumbers == null) ? 0 : alleleNumbers.hashCode());
>, <Line: +		return result;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public boolean equals(Object obj) {
>, <Line: +		if (this == obj)
>, <Line: +			return true;
>, <Line: +		if (obj == null)
>, <Line: +			return false;
>, <Line: +		if (getClass() != obj.getClass())
>, <Line: +			return false;
>, <Line: +		Genotype other = (Genotype) obj;
>, <Line: +		if (alleleNumbers == null) {
>, <Line: +			if (other.alleleNumbers != null)
>, <Line: +				return false;
>, <Line: +		} else if (!alleleNumbers.equals(other.alleleNumbers))
>, <Line: +			return false;
>, <Line: +		return true;
>, <Line: +	}
>, <Line: +}
>]
[]