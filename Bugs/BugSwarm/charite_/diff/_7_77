[]
[<Line: -package de.charite.compbio.jannovar.pedigree;
>, <Line: -import org.junit.Assert;
>, <Line: -import org.junit.Before;
>, <Line: -import org.junit.Test;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import de.charite.compbio.jannovar.pedigree.compatibilitychecker.CompatibilityCheckerException;
>, <Line: -public class CompatibilityCheckerAutosomalRecessiveLargeTest extends CompatibilityCheckerTestBase {
>, <Line: -	@Before
>, <Line: -	public void setUp() throws PedParseException {
>, <Line: -		ImmutableList.Builder<PedPerson> individuals = new ImmutableList.Builder<PedPerson>();
>, <Line: -		individuals.add(new PedPerson("ped", "I.1", "0", "0", Sex.MALE, Disease.UNAFFECTED)); // grandgrandfather
>, <Line: -		individuals.add(new PedPerson("ped", "I.2", "0", "0", Sex.FEMALE, Disease.UNAFFECTED)); // grandgrandmother
>, <Line: -		individuals.add(new PedPerson("ped", "II.1", "0", "0", Sex.MALE, Disease.UNAFFECTED)); // parent1
>, <Line: -		individuals.add(new PedPerson("ped", "II.2", "I.1", "I.2", Sex.FEMALE, Disease.UNAFFECTED)); // parent2
>, <Line: -		individuals.add(new PedPerson("ped", "II.3", "I.1", "I.2", Sex.FEMALE, Disease.AFFECTED)); // parent3
>, <Line: -		individuals.add(new PedPerson("ped", "II.4", "I.1", "I.2", Sex.FEMALE, Disease.UNKNOWN)); // parent4
>, <Line: -		individuals.add(new PedPerson("ped", "III.1", "II.1", "II.2", Sex.MALE, Disease.UNAFFECTED)); // child1
>, <Line: -		individuals.add(new PedPerson("ped", "III.2", "0", "II.3", Sex.MALE, Disease.UNAFFECTED)); // child2
>, <Line: -		individuals.add(new PedPerson("ped", "IV.1", "III.1", "0", Sex.FEMALE, Disease.AFFECTED)); // baby1
>, <Line: -		individuals.add(new PedPerson("ped", "IV.2", "III.2", "0", Sex.FEMALE, Disease.UNAFFECTED)); // baby2
>, <Line: -		PedFileContents pedFileContents = new PedFileContents(new ImmutableList.Builder<String>().build(),
>, <Line: -				individuals.build());
>, <Line: -		this.pedigree = new Pedigree(pedFileContents, "ped");
>, <Line: -		this.names = ImmutableList.of("I.1", "I.2", "II.1", "II.2", "II.3", "II.4", "III.1", "III.2", "IV.1", "IV.2");
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void testSizeOfPedigree() {
>, <Line: -		Assert.assertEquals(10, pedigree.getMembers().size());
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void testCaseNegativesOneVariant() throws CompatibilityCheckerException {
>, <Line: -		Assert.assertFalse(buildCheckerAR(lst(HET, HET, HET, HET, HET, HET, HET, HET, HET, HET)).run());
>, <Line: -		Assert.assertFalse(buildCheckerAR(lst(REF, REF, REF, REF, REF, REF, REF, REF, REF, REF)).run());
>, <Line: -		Assert.assertFalse(buildCheckerAR(lst(ALT, ALT, ALT, ALT, ALT, ALT, ALT, ALT, ALT, ALT)).run());
>, <Line: -		Assert.assertFalse(buildCheckerAR(lst(UKN, UKN, UKN, UKN, UKN, UKN, UKN, UKN, UKN, UKN)).run());
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(HET, HET, REF, HET, ALT, UKN, HET, HET, ALT, REF)).run());
>, <Line: -		// at least one hom_alt
>, <Line: -		Assert.assertFalse(buildCheckerAR(lst(HET, HET, REF, HET, UKN, UKN, HET, HET, UKN, REF)).run());
>, <Line: -		// Only one UKN has ALT is not sufficient!
>, <Line: -		Assert.assertFalse(buildCheckerAR(lst(HET, HET, REF, HET, UKN, ALT, HET, HET, UKN, REF)).run());
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void testCaseNegativesTwoVariants() throws CompatibilityCheckerException {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void testCasePositiveOneVariant() throws CompatibilityCheckerException {
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(HET, HET, REF, HET, ALT, UKN, HET, HET, ALT, REF)).run());
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(HET, HET, REF, HET, ALT, REF, HET, HET, ALT, REF)).run());
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(HET, HET, REF, HET, ALT, ALT, HET, HET, ALT, REF)).run());
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(HET, HET, REF, HET, ALT, REF, HET, HET, UKN, REF)).run());
>, <Line: -		// correct inheritance from II.1/2 to III.1=> II.1 is now HET.
>, <Line: -		// but false inheritance from I.1/2 to II.2 (cause II.3 is alt, II.2 must be het).
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(HET, HET, HET, REF, ALT, UKN, HET, HET, ALT, REF)).run());
>, <Line: -		// correct inheritance from II.1/2 to III.1. II.1 must have the same allele affected than II.2
>, <Line: -		// correct inheritance from I.1/2 to II.2.
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(HET, HET, HET, HET, ALT, UKN, HET, HET, ALT, REF)).run());
>, <Line: -		// False inheritance II.1 or II.2 must be HET/UKN (or ALT and affected).
>, <Line: -		// But it is (very unlikely) a de-novo mutation in III.1.
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(HET, HET, REF, REF, ALT, UKN, HET, HET, ALT, REF)).run());
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void testCasePositiveTwoVariants() throws CompatibilityCheckerException {
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(HET, REF, REF, REF, HET, UKN, REF, REF, HET, REF),
>, <Line: -										 lst(REF, HET, HET, REF, HET, UKN, HET, REF, HET, REF)).run());
>, <Line: -		Assert.assertTrue(buildCheckerAR(lst(REF, HET, REF, HET, HET, UKN, HET, HET, HET, REF),
>, <Line: -										 lst(HET, REF, REF, REF, HET, UKN, REF, REF, HET, REF)).run());
>, <Line: -	}
>, <Line: -}
>]