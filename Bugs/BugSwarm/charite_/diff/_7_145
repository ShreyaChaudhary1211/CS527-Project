[]
[<Line: -package de.charite.compbio.jped;
>, <Line: -import htsjdk.variant.variantcontext.writer.Options;
>, <Line: -import htsjdk.variant.variantcontext.writer.VariantContextWriter;
>, <Line: -import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;
>, <Line: -import htsjdk.variant.vcf.VCFFileReader;
>, <Line: -import java.io.File;
>, <Line: -import java.io.IOException;
>, <Line: -import org.apache.commons.cli.ParseException;
>, <Line: -import org.apache.logging.log4j.Level;
>, <Line: -import org.apache.logging.log4j.LogManager;
>, <Line: -import org.apache.logging.log4j.core.LoggerContext;
>, <Line: -import org.apache.logging.log4j.core.config.Configuration;
>, <Line: -import de.charite.compbio.jannovar.JannovarException;
>, <Line: -import de.charite.compbio.jannovar.data.JannovarData;
>, <Line: -import de.charite.compbio.jannovar.data.JannovarDataSerializer;
>, <Line: -import de.charite.compbio.jannovar.pedigree.PedFileContents;
>, <Line: -import de.charite.compbio.jannovar.pedigree.PedFileReader;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Person;
>, <Line: -// TODO(holtgrew): Add support for DE NOVO
>, <Line: -public class JPedApp {
>, <Line: -	/** Configuration */
>, <Line: -	private JPedOptions options;
>, <Line: -	/** Jannovar DB */
>, <Line: -	JannovarData jannovarDB;
>, <Line: -	JPedApp(JPedOptions options) {
>, <Line: -		this.options = options;
>, <Line: -	}
>, <Line: -	void run() throws JannovarException, HelpRequestedException {
>, <Line: -		options.print(System.err);
>, <Line: -		setLogLevel();
>, <Line: -		final long startTime = System.nanoTime();
>, <Line: -		VCFFileReader reader = new VCFFileReader(new File(options.inputPath), false);
>, <Line: -		VariantContextWriter writer = getWriter(reader);
>, <Line: -		deserializeJannovarDB(); // only need this when inheritance filter is active
>, <Line: -		PedFileContents pedContents;
>, <Line: -		try {
>, <Line: -			pedContents = new PedFileReader(new File(options.pedPath)).read();
>, <Line: -		} catch (IOException e) {
>, <Line: -			throw new JannovarException("Could not parse Pedigree from " + options.pedPath, e);
>, <Line: -		}
>, <Line: -		Pedigree pedigree = new Pedigree(pedContents, pedContents.getIndividuals().get(0).getPedigree());
>, <Line: -		System.err.println("Family used from PED file: " + pedigree.getName());
>, <Line: -		for (Person p : pedigree.getMembers())
>, <Line: -			System.err.println("    " + p.getName());
>, <Line: -		new FilteredWriter(pedigree, options.modeOfInheritances, jannovarDB, reader, writer).run(options);
>, <Line: -		writer.close();
>, <Line: -		final long endTime = System.nanoTime();
>, <Line: -		System.err.println(String.format("Filtering and writing took %.2f sec.",
>, <Line: -				(endTime - startTime) / 1000.0 / 1000.0 / 1000.0));
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * @return {@link VariantContextWriter} given an input {@link VCFFileReader}.
>, <Line: -	 */
>, <Line: -	VariantContextWriter getWriter(VCFFileReader reader) {
>, <Line: -		// construct factory object for VariantContextWriter
>, <Line: -		VariantContextWriterBuilder builder = new VariantContextWriterBuilder();
>, <Line: -		builder.setReferenceDictionary(reader.getFileHeader().getSequenceDictionary());
>, <Line: -		builder.setOutputFile(new File(options.outputPath));
>, <Line: -		// Be more lenient in missing header fields.
>, <Line: -		builder.setOption(Options.ALLOW_MISSING_FIELDS_IN_HEADER);
>, <Line: -		// Disable on-the-fly generation of Tribble index if the input file does not have a sequence dictionary.
>, <Line: -		if (reader.getFileHeader().getSequenceDictionary() == null)
>, <Line: -			builder.unsetOption(Options.INDEX_ON_THE_FLY);
>, <Line: -		// construct VariantContextWriter and write out header
>, <Line: -		VariantContextWriter out = builder.build();
>, <Line: -		out.writeHeader(reader.getFileHeader());
>, <Line: -		return out;
>, <Line: -	}
>, <Line: -	protected void deserializeJannovarDB() throws JannovarException, HelpRequestedException {
>, <Line: -		this.jannovarDB = new JannovarDataSerializer(options.jannovarDB).load();
>, <Line: -	}
>, <Line: -	public static void main(String[] args) {
>, <Line: -		JPedCommandLineParser parser = new JPedCommandLineParser();
>, <Line: -		JPedOptions options = null;
>, <Line: -		try {
>, <Line: -			options = parser.parse(args);
>, <Line: -			new JPedApp(options).run();
>, <Line: -		} catch (ParseException e) {
>, <Line: -			System.err.println("ERROR: " + e.getMessage());
>, <Line: -			parser.printHelp();
>, <Line: -			System.exit(1);
>, <Line: -		} catch (HelpRequestedException e) {
>, <Line: -			System.err.println("ERROR: " + e.getMessage());
>, <Line: -			parser.printHelp();
>, <Line: -			System.exit(1);
>, <Line: -		} catch (JannovarException e) {
>, <Line: -			System.err.println("ERROR: " + e.getMessage());
>, <Line: -			if (options != null && options.verbosity >= 2)
>, <Line: -				e.printStackTrace(System.err);
>, <Line: -			else
>, <Line: -				System.err.println("Use --verbose to see more information");
>, <Line: -			parser.printHelp();
>, <Line: -			System.exit(1);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Set log level, depending on this.verbosity.
>, <Line: -	 */
>, <Line: -	private void setLogLevel() {
>, <Line: -		LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
>, <Line: -		Configuration conf = ctx.getConfiguration();
>, <Line: -		if (options.verbosity <= 1)
>, <Line: -			conf.getLoggerConfig(LogManager.ROOT_LOGGER_NAME).setLevel(Level.INFO);
>, <Line: -		else if (options.verbosity <= 2)
>, <Line: -			conf.getLoggerConfig(LogManager.ROOT_LOGGER_NAME).setLevel(Level.DEBUG);
>, <Line: -		else
>, <Line: -			conf.getLoggerConfig(LogManager.ROOT_LOGGER_NAME).setLevel(Level.TRACE);
>, <Line: -		ctx.updateLoggers(conf);
>, <Line: -	}
>, <Line: -}
>]