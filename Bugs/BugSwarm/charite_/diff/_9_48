[<Line: +package de.charite.compbio.jannovar.vardbs.generic_vcf;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import de.charite.compbio.jannovar.vardbs.base.DBAnnotationOptions;
>, <Line: +import java.util.List;
>, <Line: +/**
>, <Line: + * Configuration for generic annotation of VCF with options.
>, <Line: + * 
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: + */
>, <Line: +public class GenericVCFAnnotationOptions extends DBAnnotationOptions {
>, <Line: +	/** Path to VCF file. */
>, <Line: +	private final String pathVcfFile;
>, <Line: +	/** Field names to use for annotation. */
>, <Line: +	private final List<String> fieldNames;
>, <Line: +	// TODO: support different accumulation strategies, similar to TSV
>, <Line: +	/**
>, <Line: +	 * Parse configuration from command line string.
>, <Line: +	 * 
>, <Line: +	 * <p>
>, <Line: +	 * The value must be of the format <code>pathToVfFile:prefix:field1,field2,field3</code>.
>, <Line: +	 * </p>
>, <Line: +	 */
>, <Line: +	public static GenericVCFAnnotationOptions parseFrom(String s) {
>, <Line: +		String tokens[] = s.split(":", 3);
>, <Line: +		if (tokens.length != 3) {
>, <Line: +			throw new RuntimeException("Could not parse VCF annotation config from " + s);
>, <Line: +		}
>, <Line: +		return new GenericVCFAnnotationOptions(true, false, tokens[1],
>, <Line: +				MultipleMatchBehaviour.BEST_ONLY, tokens[0],
>, <Line: +				ImmutableList.copyOf(tokens[2].split(",")));
>, <Line: +	}
>, <Line: +	public GenericVCFAnnotationOptions(boolean reportOverlapping,
>, <Line: +			boolean reportOverlappingAsIdentical, String identifierPrefix,
>, <Line: +			MultipleMatchBehaviour multiMatchBehaviour, String pathVcfFile,
>, <Line: +			List<String> fieldNames) {
>, <Line: +		super(reportOverlapping, reportOverlappingAsIdentical, identifierPrefix,
>, <Line: +				multiMatchBehaviour);
>, <Line: +		this.pathVcfFile = pathVcfFile;
>, <Line: +		this.fieldNames = fieldNames;
>, <Line: +	}
>, <Line: +	public List<String> getFieldNames() {
>, <Line: +		return fieldNames;
>, <Line: +	}
>, <Line: +	public String getPathVcfFile() {
>, <Line: +		return pathVcfFile;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public String toString() {
>, <Line: +		return "GenericVCFAnnotationOptions [fieldNames=" + fieldNames + ", super="
>, <Line: +				+ super.toString() + ", pathVcfFile=" + pathVcfFile + "]";
>, <Line: +	}
>, <Line: +}
>]
[]