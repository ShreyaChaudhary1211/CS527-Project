[]
[<Line: -package de.charite.compbio.jannovar.pedigree.compatibilitychecker.ad;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Disease;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Genotype;
>, <Line: -import de.charite.compbio.jannovar.pedigree.GenotypeList;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: -import de.charite.compbio.jannovar.pedigree.compatibilitychecker.CompatibilityCheckerBase;
>, <Line: -import de.charite.compbio.jannovar.pedigree.compatibilitychecker.CompatibilityCheckerException;
>, <Line: -/**
>, <Line: - * Helper class for checking a {@link GenotypeList} for compatibility with a {@link Pedigree} and autosomal dominant
>, <Line: - * mode of inheritance.
>, <Line: - *
>, <Line: - * <h2>Compatibility Check</h2>
>, <Line: - *
>, <Line: - * For autosomal dominant inheritance, there must be at least one {@link Genotype} that is shared by all affected
>, <Line: - * individuals but no unaffected individuals in the pedigree.
>, <Line: - *
>, <Line: - * We do not allow {@link Genotype#HOMOZYGOUS_ALT} for any affected (and also for the one person in the case of
>, <Line: - * single-person pedigrees) since this is not the interesting case for users of this class.
>, <Line: - *
>, <Line: - * @author <a href="mailto:manuel.holtgrewe@charite.de">Manuel Holtgrewe</a>
>, <Line: - * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
>, <Line: - * @author <a href="mailto:peter.robinson@charite.de">Peter N Robinson</a>
>, <Line: - * 
>, <Line: - * @deprecated use {@link VariantContextCompatibilityCheckerAutosomalDominant} instead.
>, <Line: - */
>, <Line: -@Deprecated
>, <Line: -public class CompatibilityCheckerAutosomalDominant extends CompatibilityCheckerBase {
>, <Line: -	/**
>, <Line: -	 * Initialize compatibility checker and perform some sanity checks.
>, <Line: -	 *
>, <Line: -	 * The {@link GenotypeList} object passed to the constructor is expected to represent all of the variants found in a
>, <Line: -	 * certain gene (possibly after filtering for rarity or predicted pathogenicity). The samples represented by the
>, <Line: -	 * {@link GenotypeList} must be in the same order as the list of individuals contained in this pedigree.
>, <Line: -	 *
>, <Line: -	 * @param pedigree
>, <Line: -	 *            the {@link Pedigree} to use for the initialize
>, <Line: -	 * @param list
>, <Line: -	 *            the {@link GenotypeList} to use for the initialization
>, <Line: -	 * @throws CompatibilityCheckerException
>, <Line: -	 *             if the pedigree or variant list is invalid
>, <Line: -	 */
>, <Line: -	public CompatibilityCheckerAutosomalDominant(Pedigree pedigree, GenotypeList list)
>, <Line: -			throws CompatibilityCheckerException {
>, <Line: -		super(pedigree, list);
>, <Line: -	}
>, <Line: -	public boolean runSingleSampleCase() {
>, <Line: -		// We could also allow Genotye.HOMOZYGOUS_ALT here but that is not the interesting case.
>, <Line: -		for (ImmutableList<Genotype> gtList : list.getCalls())
>, <Line: -			if (gtList.get(0) == Genotype.HETEROZYGOUS)
>, <Line: -				return true;
>, <Line: -		return false;
>, <Line: -	}
>, <Line: -	public boolean runMultiSampleCase() {
>, <Line: -		for (ImmutableList<Genotype> gtList : list.getCalls()) {
>, <Line: -			boolean currentVariantCompatible = true; // current variant compatible with AD?
>, <Line: -			int numAffectedWithHet = 0;
>, <Line: -			for (int i = 0; i < pedigree.getMembers().size(); ++i) {
>, <Line: -				final Genotype gt = gtList.get(i);
>, <Line: -				final Disease d = pedigree.getMembers().get(i).getDisease();
>, <Line: -				if (d == Disease.AFFECTED) {
>, <Line: -					if (gt == Genotype.HOMOZYGOUS_REF || gt == Genotype.HOMOZYGOUS_ALT) {
>, <Line: -						currentVariantCompatible = false; // current variant not compatible with AD
>, <Line: -						break;
>, <Line: -					} else if (gt == Genotype.HETEROZYGOUS) {
>, <Line: -						numAffectedWithHet++;
>, <Line: -					}
>, <Line: -				} else if (d == Disease.UNAFFECTED) {
>, <Line: -					if (gt == Genotype.HETEROZYGOUS || gt == Genotype.HOMOZYGOUS_ALT) {
>, <Line: -						currentVariantCompatible = false; // current variant not compatible with AD
>, <Line: -						break;
>, <Line: -					}
>, <Line: -				}
>, <Line: -			}
>, <Line: -			// If we reach here, we have either examined all members of the pedigree or have decided that the
>, <Line: -			// variant is incompatible in one person. If any one variant is compatible with AD inheritance, then the
>, <Line: -			// Gene is compatible and we can return true without examining the other variants.
>, <Line: -			if (currentVariantCompatible && numAffectedWithHet > 0)
>, <Line: -				return true;
>, <Line: -		}
>, <Line: -		return false;
>, <Line: -	}
>, <Line: -}
>]