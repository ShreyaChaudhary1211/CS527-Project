[<Line: +package de.charite.compbio.jannovar.mendel.impl;
>, <Line: +import java.util.Collection;
>, <Line: +import java.util.HashSet;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +import java.util.stream.Stream;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import de.charite.compbio.jannovar.mendel.GenotypeCalls;
>, <Line: +import de.charite.compbio.jannovar.mendel.IncompatiblePedigreeException;
>, <Line: +import de.charite.compbio.jannovar.mendel.MendelianInheritanceChecker;
>, <Line: +/**
>, <Line: + * Implementation of Mendelian compatibility check for autosomal recessive case
>, <Line: + * 
>, <Line: + * <h2>Compatibility Check</h2>
>, <Line: + *
>, <Line: + * This class merely delegates to the {@link MendelianCheckerXRHom} and {@link MendelianCheckerXRCompoundHet}. The
>, <Line: + * {@link GenotypeCalls} objects passing either filter will be returned.
>, <Line: + * 
>, <Line: + * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: + */
>, <Line: +public class MendelianCheckerXR extends AbstractMendelianChecker {
>, <Line: +	final private MendelianCheckerXRCompoundHet checkerCompound;
>, <Line: +	final private MendelianCheckerXRHom checkerHom;
>, <Line: +	public MendelianCheckerXR(MendelianInheritanceChecker parent) {
>, <Line: +		super(parent);
>, <Line: +		this.checkerCompound = new MendelianCheckerXRCompoundHet(parent);
>, <Line: +		this.checkerHom = new MendelianCheckerXRHom(parent);
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public ImmutableList<GenotypeCalls> filterCompatibleRecords(Collection<GenotypeCalls> calls)
>, <Line: +			throws IncompatiblePedigreeException {
>, <Line: +		// Apply homozygous and compound heterozygous checker, then select distinct records
>, <Line: +		Stream<GenotypeCalls> joint = Stream.concat(checkerCompound.filterCompatibleRecords(calls).stream(),
>, <Line: +				checkerHom.filterCompatibleRecords(calls).stream());
>, <Line: +		HashSet<GenotypeCalls> set = new HashSet<>();
>, <Line: +		set.addAll(joint.collect(Collectors.toList()));
>, <Line: +		return ImmutableList.copyOf(set);
>, <Line: +	}
>, <Line: +}
>]
[]