[<Line: +package de.charite.compbio.jannovar.vardbs.generic_tsv;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.Collections;
>, <Line: +import org.junit.Assert;
>, <Line: +import org.junit.Before;
>, <Line: +import org.junit.Test;
>, <Line: +import com.google.common.collect.Lists;
>, <Line: +import de.charite.compbio.jannovar.vardbs.base.JannovarVarDBException;
>, <Line: +import htsjdk.samtools.util.CloseableIterator;
>, <Line: +import htsjdk.variant.variantcontext.VariantContext;
>, <Line: +import htsjdk.variant.vcf.VCFHeader;
>, <Line: +/**
>, <Line: + * Test for annotation with dbNSFP with default options
>, <Line: + * 
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: + */
>, <Line: +public class GenericTSVAnnotationDriverWithRemmReportOnlyOverlappingTest
>, <Line: +		extends GenericTSVAnnotationDriverWithRemmBaseTest {
>, <Line: +	@Before
>, <Line: +	public void setUp() throws Exception {
>, <Line: +		super.setUp();
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testAnnotateExtendHeader() throws JannovarVarDBException {
>, <Line: +		GenericTSVAnnotationDriver driver = new GenericTSVAnnotationDriver(fastaPath, options);
>, <Line: +		VCFHeader header = vcfReader.getFileHeader();
>, <Line: +		// Check header before extension
>, <Line: +		Assert.assertEquals(0, header.getFilterLines().size());
>, <Line: +		Assert.assertEquals(0, header.getInfoHeaderLines().size());
>, <Line: +		Assert.assertEquals(0, header.getFormatHeaderLines().size());
>, <Line: +		Assert.assertEquals(0, header.getIDHeaderLines().size());
>, <Line: +		Assert.assertEquals(0, header.getOtherHeaderLines().size());
>, <Line: +		driver.constructVCFHeaderExtender().addHeaders(header);
>, <Line: +		// Check header after extension
>, <Line: +		Assert.assertEquals(0, header.getFilterLines().size());
>, <Line: +		Assert.assertEquals(1, header.getInfoHeaderLines().size());
>, <Line: +		Assert.assertEquals(0, header.getFormatHeaderLines().size());
>, <Line: +		Assert.assertEquals(1, header.getIDHeaderLines().size());
>, <Line: +		Assert.assertEquals(0, header.getOtherHeaderLines().size());
>, <Line: +		Assert.assertNotNull(header.getInfoHeaderLine("REMM_SCORE"));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testAnnotateVariantContext() throws JannovarVarDBException {
>, <Line: +		GenericTSVAnnotationDriver driver = new GenericTSVAnnotationDriver(fastaPath, options);
>, <Line: +		// Annotation of first variant
>, <Line: +		final CloseableIterator<VariantContext> iter = vcfReader.iterator();
>, <Line: +		VariantContext vcFirst = iter.next();
>, <Line: +		Assert.assertEquals(vcFirst.getStart(), 10026);
>, <Line: +		Assert.assertEquals(0, vcFirst.getAttributes().size());
>, <Line: +		Assert.assertEquals(".", vcFirst.getID());
>, <Line: +		VariantContext annotatedFirst = driver.annotateVariantContext(vcFirst);
>, <Line: +		Assert.assertEquals(".", annotatedFirst.getID());
>, <Line: +		Assert.assertEquals(1, annotatedFirst.getAttributes().size());
>, <Line: +		ArrayList<String> keys = Lists.newArrayList(annotatedFirst.getAttributes().keySet());
>, <Line: +		Collections.sort(keys);
>, <Line: +		Assert.assertEquals("[REMM_SCORE]", keys.toString());
>, <Line: +		Assert.assertEquals("[., 0.102, 0.102, 0.102]",
>, <Line: +				annotatedFirst.getAttributeAsString("REMM_SCORE", null));
>, <Line: +		// Annotation of second variant
>, <Line: +		VariantContext vcSecond = iter.next();
>, <Line: +		Assert.assertEquals(vcSecond.getStart(), 10032);
>, <Line: +		Assert.assertEquals(0, vcFirst.getAttributes().size());
>, <Line: +		Assert.assertEquals(".", vcFirst.getID());
>, <Line: +		VariantContext annotatedSecond = driver.annotateVariantContext(vcSecond);
>, <Line: +		Assert.assertEquals(".", annotatedSecond.getID());
>, <Line: +		Assert.assertEquals(1, annotatedSecond.getAttributes().size());
>, <Line: +		ArrayList<String> keysSecond = Lists.newArrayList(annotatedSecond.getAttributes().keySet());
>, <Line: +		Collections.sort(keysSecond);
>, <Line: +		Assert.assertEquals("[REMM_SCORE]", keys.toString());
>, <Line: +		Assert.assertEquals("[., 0.104]", annotatedSecond.getAttributeAsString("REMM_SCORE", null));
>, <Line: +	}
>, <Line: +}
>]
[]