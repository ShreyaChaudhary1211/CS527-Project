[<Line: +package de.charite.compbio.jannovar.mendel.filter;
>, <Line: +import java.util.TreeSet;
>, <Line: +import de.charite.compbio.jannovar.mendel.ModeOfInheritance;
>, <Line: +import htsjdk.variant.variantcontext.VariantContext;
>, <Line: +/**
>, <Line: + * A {@link VariantContext} with an integer counter and set of compatible modes
>, <Line: + * 
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: + */
>, <Line: +public class VariantContextCounter {
>, <Line: +	private VariantContext variantContext;
>, <Line: +	private int counter;
>, <Line: +	private TreeSet<ModeOfInheritance> compatibleModes;
>, <Line: +	public VariantContextCounter(VariantContext variantContext) {
>, <Line: +		this(variantContext, 0);
>, <Line: +	}
>, <Line: +	public VariantContextCounter(VariantContext variantContext, int counter) {
>, <Line: +		this.variantContext = variantContext;
>, <Line: +		this.counter = counter;
>, <Line: +		this.compatibleModes = new TreeSet<>();
>, <Line: +	}
>, <Line: +	public int increment() {
>, <Line: +		return ++this.counter;
>, <Line: +	}
>, <Line: +	public int decrement() {
>, <Line: +		--this.counter;
>, <Line: +		if (this.counter < 0)
>, <Line: +			throw new RuntimeException("Negative counter " + this.counter);
>, <Line: +		return this.counter;
>, <Line: +	}
>, <Line: +	public VariantContext getVariantContext() {
>, <Line: +		return variantContext;
>, <Line: +	}
>, <Line: +	public void setVariantContext(VariantContext variantContext) {
>, <Line: +		this.variantContext = variantContext;
>, <Line: +	}
>, <Line: +	public int getCounter() {
>, <Line: +		return counter;
>, <Line: +	}
>, <Line: +	public void setCounter(int counter) {
>, <Line: +		this.counter = counter;
>, <Line: +		if (this.counter < 0)
>, <Line: +			throw new RuntimeException("Negative counter " + this.counter);
>, <Line: +	}
>, <Line: +	public void addCompatibleMode(ModeOfInheritance mode) {
>, <Line: +		this.compatibleModes.add(mode);
>, <Line: +	}
>, <Line: +	public TreeSet<ModeOfInheritance> getCompatibleModes() {
>, <Line: +		return compatibleModes;
>, <Line: +	}
>, <Line: +	public void setCompatibleModes(TreeSet<ModeOfInheritance> compatibleModes) {
>, <Line: +		this.compatibleModes = compatibleModes;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public String toString() {
>, <Line: +		return "VariantContextCounter [variantContext=" + variantContext + ", counter=" + counter + ", compatibleModes="
>, <Line: +				+ compatibleModes + "]";
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public int hashCode() {
>, <Line: +		final int prime = 31;
>, <Line: +		int result = 1;
>, <Line: +		result = prime * result + ((compatibleModes == null) ? 0 : compatibleModes.hashCode());
>, <Line: +		result = prime * result + counter;
>, <Line: +		result = prime * result + ((variantContext == null) ? 0 : variantContext.hashCode());
>, <Line: +		return result;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public boolean equals(Object obj) {
>, <Line: +		if (this == obj)
>, <Line: +			return true;
>, <Line: +		if (obj == null)
>, <Line: +			return false;
>, <Line: +		if (getClass() != obj.getClass())
>, <Line: +			return false;
>, <Line: +		VariantContextCounter other = (VariantContextCounter) obj;
>, <Line: +		if (compatibleModes == null) {
>, <Line: +			if (other.compatibleModes != null)
>, <Line: +				return false;
>, <Line: +		} else if (!compatibleModes.equals(other.compatibleModes))
>, <Line: +			return false;
>, <Line: +		if (counter != other.counter)
>, <Line: +			return false;
>, <Line: +		if (variantContext == null) {
>, <Line: +			if (other.variantContext != null)
>, <Line: +				return false;
>, <Line: +		} else if (!variantContext.equals(other.variantContext))
>, <Line: +			return false;
>, <Line: +		return true;
>, <Line: +	}
>, <Line: +}
>]
[]