[]
[<Line: -package de.charite.compbio.jannovar.cmd.annotate_vcf;
>, <Line: -import java.io.PrintWriter;
>, <Line: -import org.apache.commons.cli.CommandLine;
>, <Line: -import org.apache.commons.cli.HelpFormatter;
>, <Line: -import org.apache.commons.cli.Option;
>, <Line: -import org.apache.commons.cli.ParseException;
>, <Line: -import de.charite.compbio.jannovar.JannovarOptions;
>, <Line: -import de.charite.compbio.jannovar.cmd.HelpRequestedException;
>, <Line: -import de.charite.compbio.jannovar.cmd.JannovarAnnotationCommandLineParser;
>, <Line: -/**
>, <Line: - * Parser for annotate-vcf command line.
>, <Line: - * 
>, <Line: - * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
>, <Line: - */
>, <Line: -public class AnnotateVCFCommandLineParser extends JannovarAnnotationCommandLineParser {
>, <Line: -	@Override
>, <Line: -	public JannovarOptions parse(String[] argv) throws ParseException, HelpRequestedException {
>, <Line: -		// check if Help is set
>, <Line: -		CommandLine cmd = parser.parse(helpOptions, argv, true);
>, <Line: -		printHelpIfOptionIsSet(cmd);
>, <Line: -		// Parse the command line.
>, <Line: -		cmd = parser.parse(options, argv);
>, <Line: -		printHelpIfOptionIsSet(cmd);
>, <Line: -		// Fill the resulting JannovarOptions.
>, <Line: -		JannovarOptions result = new JannovarOptions();
>, <Line: -		result.printProgressBars = true;
>, <Line: -		result.command = JannovarOptions.Command.ANNOTATE_VCF;
>, <Line: -		if (cmd.hasOption("verbose"))
>, <Line: -			result.verbosity = 2;
>, <Line: -		if (cmd.hasOption("very-verbose"))
>, <Line: -			result.verbosity = 3;
>, <Line: -		if (cmd.hasOption("output-dir"))
>, <Line: -			result.outVCFFolder = cmd.getOptionValue("output-dir");
>, <Line: -		if (cmd.hasOption("reference-fasta"))
>, <Line: -			result.pathFASTARef = cmd.getOptionValue("reference-fasta");
>, <Line: -		if (cmd.hasOption("dbsnp-vcf") && !cmd.hasOption("reference-fasta"))
>, <Line: -			throw new HelpRequestedException("Argument --reference-fasta is required if --dbsnp-vcf is given");
>, <Line: -		if (cmd.hasOption("dbsnp-vcf"))
>, <Line: -			result.pathVCFDBSNP = cmd.getOptionValue("dbsnp-vcf");
>, <Line: -		if (cmd.hasOption("dbsnp-prefix"))
>, <Line: -			result.prefixDBSNP = cmd.getOptionValue("dbsnp-prefix");
>, <Line: -		else
>, <Line: -			result.prefixDBSNP = "DBSNP_";
>, <Line: -		if (cmd.hasOption("exac-vcf") && !cmd.hasOption("reference-fasta"))
>, <Line: -			throw new HelpRequestedException("Argument --reference-fasta is required if --exac-vcf is given");
>, <Line: -		if (cmd.hasOption("exac-vcf"))
>, <Line: -			result.pathVCFExac = cmd.getOptionValue("exac-vcf");
>, <Line: -		if (cmd.hasOption("exac-prefix"))
>, <Line: -			result.prefixExac = cmd.getOptionValue("exac-prefix");
>, <Line: -		else
>, <Line: -			result.prefixExac = "EXAC_";
>, <Line: -		if (cmd.hasOption("uk10k-vcf") && !cmd.hasOption("reference-fasta"))
>, <Line: -			throw new HelpRequestedException("Argument --reference-fasta is required if --uk10k-vcf is given");
>, <Line: -		if (cmd.hasOption("uk10k-vcf"))
>, <Line: -			result.pathVCFUK10K = cmd.getOptionValue("uk10k-vcf");
>, <Line: -		if (cmd.hasOption("uk10k-prefix"))
>, <Line: -			result.prefixUK10K = cmd.getOptionValue("uk10k-prefix");
>, <Line: -		else
>, <Line: -			result.prefixUK10K = "UK10K_";
>, <Line: -		if (cmd.hasOption("pedigree-file"))
>, <Line: -			result.pathPedFile = cmd.getOptionValue("pedigree-file");
>, <Line: -		result.showAll = cmd.hasOption("showall");
>, <Line: -		result.writeVCFAnnotationStandardInfoFields = !cmd.hasOption("no-new-info-field");
>, <Line: -		result.escapeAnnField = !cmd.hasOption("no-escape-ann-field");
>, <Line: -		result.nt3PrimeShifting = !cmd.hasOption("no-3-prime-shifting");
>, <Line: -		if (cmd.hasOption("output-infix"))
>, <Line: -			result.outputInfix = cmd.getOptionValue("output-infix");
>, <Line: -		result.dataFile = cmd.getOptionValue("database");
>, <Line: -		result.useThreeLetterAminoAcidCode = cmd.hasOption("three-letter-amino-acid-code");
>, <Line: -		for (String vcfPath : cmd.getOptionValues("vcf-in")) {
>, <Line: -			result.vcfFilePaths.add(vcfPath);
>, <Line: -		}
>, <Line: -		return result;
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected void initializeParser() {
>, <Line: -		super.initializeParser();
>, <Line: -		options.addOption(new Option("a", "showall", false,
>, <Line: -				"report annotations for all affected transcripts (by default only one "
>, <Line: -						+ "with the highest impact is shown for each alternative allele)"));
>, <Line: -		options.addOption(
>, <Line: -				new Option("o", "output-dir", true, "output directory (default is to write parallel to input file)"));
>, <Line: -		options.addOption(new Option(null, "no-new-info-field", false,
>, <Line: -				"do not write out the new VCF annotation standard INFO field \"ANN\" (default is on)"));
>, <Line: -		options.addOption(new Option(null, "no-escape-ann-field", false,
>, <Line: -				"do not escape characters in INFO field \"ANN\" (default is on)"));
>, <Line: -		options.addOption(new Option(null, "no-3-prime-shifting", false,
>, <Line: -				"disable shifting of variants towards the 3' end of the transcript (default is on)"));
>, <Line: -		options.addOption(new Option(null, "output-infix", true,
>, <Line: -				"output infix to place before .vcf/.vcf.gz/.bcf in output file name (default is \".jv\")"));
>, <Line: -		options.addOption(Option.builder("i").longOpt("vcf-in").required().hasArgs()
>, <Line: -				.desc("VCF file to annotate (.vcf/.gz)").argName("IN.vcf").build());
>, <Line: -		options.addOption(new Option(null, "reference-fasta", true,
>, <Line: -				"path to FAI-indexed FASTA reference, required for dbSNP annotation"));
>, <Line: -		options.addOption(new Option(null, "dbsnp-vcf", true,
>, <Line: -				"path to indexed, bgzip-compressed, and normalized dbSNP VCF file"));
>, <Line: -		options.addOption(new Option(null, "dbsnp-prefix", true, "prefix to use for dbSNP-based VCF INFO fields"));
>, <Line: -		options.addOption(
>, <Line: -				new Option(null, "exac-vcf", true, "path to indexed, bgzip-compressed, and normalized ExAC VCF file"));
>, <Line: -		options.addOption(new Option(null, "exac-prefix", true, "prefix to use for ExAC-based VCF INFO fields"));
>, <Line: -		options.addOption(new Option(null, "uk10k-vcf", true,
>, <Line: -				"path to indexed, bgzip-compressed, and normalized UK10K COHORT VCF file"));
>, <Line: -		options.addOption(new Option(null, "uk10k-prefix", true, "prefix to use for UK10K-based VCF INFO fields"));
>, <Line: -		options.addOption(new Option(null, "pedigree-file", true, "path to pedigree file"));
>, <Line: -		options.addOption(new Option(null, "three-letter-amino-acid-code", false,
>, <Line: -				"use three-letter amino acid code instead of one-letter code"));
>, <Line: -	}
>, <Line: -	protected void printHelp() {
>, <Line: -		final String HEADER = new StringBuilder().append("Jannovar Command: annotate\n\n")
>, <Line: -				.append("Use this command to annotate a VCF file.\n\n")
>, <Line: -				.append("Usage: java -jar de.charite.compbio.jannovar.jar annotate [options] -d <database> -i [<IN.vcf>]+\n\n")
>, <Line: -				.toString();
>, <Line: -		final String FOOTER = new StringBuilder()
>, <Line: -				.append("\n\nExample: java -jar de.charite.compbio.jannovar.jar annotate -d data/hg19_ucsc.ser -i IN.vcf\n\n")
>, <Line: -				.toString();
>, <Line: -		System.err.print(HEADER);
>, <Line: -		HelpFormatter hf = new HelpFormatter();
>, <Line: -		PrintWriter pw = new PrintWriter(System.err, true);
>, <Line: -		hf.printOptions(pw, 78, options, 2, 2);
>, <Line: -		System.err.print(FOOTER);
>, <Line: -	}
>, <Line: -}
>]