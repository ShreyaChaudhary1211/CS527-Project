[]
[<Line: -package de.charite.compbio.jannovar.filter;
>, <Line: -import java.util.ArrayList;
>, <Line: -import java.util.List;
>, <Line: -import org.slf4j.Logger;
>, <Line: -import org.slf4j.LoggerFactory;
>, <Line: -import com.google.common.base.Joiner;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import com.google.common.collect.ImmutableSet;
>, <Line: -import de.charite.compbio.jannovar.pedigree.ModeOfInheritance;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Person;
>, <Line: -import de.charite.compbio.jannovar.pedigree.compatibilitychecker.InheritanceCompatibilityChecker;
>, <Line: -import de.charite.compbio.jannovar.pedigree.compatibilitychecker.InheritanceCompatibilityCheckerException;
>, <Line: -import htsjdk.variant.variantcontext.VariantContext;
>, <Line: -/**
>, <Line: - * A {@link VariantContext} filter that checks each variant individually for compatibility.
>, <Line: - *
>, <Line: - * @author <a href="mailto:manuel.holtgrewe@charite.de">Manuel Holtgrewe</a>
>, <Line: - * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
>, <Line: - */
>, <Line: -public class VariantWiseInheritanceFilter implements VariantContextFilter {
>, <Line: -	/** the logger object to use */
>, <Line: -	private static final Logger LOGGER = LoggerFactory.getLogger(VariantWiseInheritanceFilter.class);
>, <Line: -	/** Next filter. */
>, <Line: -	private final VariantContextFilter next;
>, <Line: -	/** Compatibility checker for genotype call lists and {@link #pedigree}. */
>, <Line: -	private final InheritanceCompatibilityChecker checker;
>, <Line: -	/** Initialize */
>, <Line: -	public VariantWiseInheritanceFilter(Pedigree pedigree, ImmutableSet<ModeOfInheritance> modeOfInheritances,
>, <Line: -			VariantContextFilter next) {
>, <Line: -		this.next = next;
>, <Line: -		this.checker = new InheritanceCompatibilityChecker.Builder().pedigree(pedigree).addModes(modeOfInheritances)
>, <Line: -				.build();
>, <Line: -		ImmutableList.Builder<String> namesBuilder = new ImmutableList.Builder<String>();
>, <Line: -		for (Person p : pedigree.getMembers())
>, <Line: -			namesBuilder.add(p.getName());
>, <Line: -	}
>, <Line: -	public void put(FlaggedVariant fv) throws FilterException {
>, <Line: -		// check gene for compatibility and mark variants as compatible if so
>, <Line: -		List<VariantContext> list = new ArrayList<VariantContext>();
>, <Line: -		list.add(fv.getVC());
>, <Line: -		try {
>, <Line: -			fv.setIncluded(!checker.getCompatibleWith(list).isEmpty());
>, <Line: -		} catch (InheritanceCompatibilityCheckerException e) {
>, <Line: -			throw new FilterException("Problem in mode of inheritance filter.", e);
>, <Line: -		}
>, <Line: -		if (fv.isIncluded())
>, <Line: -			next.put(fv);
>, <Line: -		LOGGER.trace("Variant {} compatible with {} (var={})", new Object[] { fv.isIncluded() ? "" : "in",
>, <Line: -				Joiner.on(", ").join(checker.getInheritanceModes()), fv.getVC() });
>, <Line: -	}
>, <Line: -	public void finish() throws FilterException {
>, <Line: -		next.finish();
>, <Line: -	}
>, <Line: -}
>]