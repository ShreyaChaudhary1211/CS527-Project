[]
[<Line: -package de.charite.compbio.jannovar.filter;
>, <Line: -import java.nio.file.Path;
>, <Line: -import java.nio.file.Paths;
>, <Line: -import java.util.ArrayList;
>, <Line: -import java.util.Iterator;
>, <Line: -import java.util.List;
>, <Line: -import org.junit.Assert;
>, <Line: -import org.junit.Before;
>, <Line: -import org.junit.Test;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import com.google.common.collect.ImmutableSet;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Disease;
>, <Line: -import de.charite.compbio.jannovar.pedigree.ModeOfInheritance;
>, <Line: -import de.charite.compbio.jannovar.pedigree.PedFileContents;
>, <Line: -import de.charite.compbio.jannovar.pedigree.PedParseException;
>, <Line: -import de.charite.compbio.jannovar.pedigree.PedPerson;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Sex;
>, <Line: -import htsjdk.variant.variantcontext.VariantContext;
>, <Line: -import htsjdk.variant.vcf.VCFFileReader;
>, <Line: -public class VariantWiseInheritanceFilterTest {
>, <Line: -	private Pedigree pedigreeAffectedChild;
>, <Line: -	private Pedigree pedigreeAffectedTwoAffected;
>, <Line: -	private List<VariantContext> variants;
>, <Line: -	final Path inheritanceFilterVCFPath = Paths.get("src/test/resources/inheritanceFilterTest.vcf");
>, <Line: -	private VCFFileReader reader;
>, <Line: -	@Before
>, <Line: -	public void setUp() throws PedParseException {
>, <Line: -		ImmutableList.Builder<PedPerson> individuals = new ImmutableList.Builder<PedPerson>();
>, <Line: -		individuals.add(new PedPerson("ped", "Eva", "0", "0", Sex.FEMALE, Disease.UNAFFECTED)); // Mother
>, <Line: -		individuals.add(new PedPerson("ped", "Adam", "0", "0", Sex.MALE, Disease.UNAFFECTED)); // Father
>, <Line: -		individuals.add(new PedPerson("ped", "Seth", "Adam", "Eva", Sex.MALE, Disease.AFFECTED)); // Child
>, <Line: -		PedFileContents pedFileContents = new PedFileContents(new ImmutableList.Builder<String>().build(),
>, <Line: -				individuals.build());
>, <Line: -		pedigreeAffectedChild = new Pedigree(pedFileContents, "ped");
>, <Line: -		individuals = new ImmutableList.Builder<PedPerson>();
>, <Line: -		individuals.add(new PedPerson("ped", "Eva", "0", "0", Sex.FEMALE, Disease.UNAFFECTED)); // Mother
>, <Line: -		individuals.add(new PedPerson("ped", "Adam", "0", "0", Sex.MALE, Disease.AFFECTED)); // Father
>, <Line: -		individuals.add(new PedPerson("ped", "Seth", "Adam", "Eva", Sex.MALE, Disease.AFFECTED)); // Child
>, <Line: -		pedFileContents = new PedFileContents(new ImmutableList.Builder<String>().build(), individuals.build());
>, <Line: -		pedigreeAffectedTwoAffected = new Pedigree(pedFileContents, "ped");
>, <Line: -		reader = new VCFFileReader(inheritanceFilterVCFPath.toFile(),false);
>, <Line: -		variants = new ArrayList<VariantContext>();
>, <Line: -		for (VariantContext variantContext : reader) {
>, <Line: -			variants.add(variantContext);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void pedigreeAffectedChildADTest() {
>, <Line: -		WriterFilterHelper helper = new WriterFilterHelper();
>, <Line: -		VariantWiseInheritanceFilter filter = new VariantWiseInheritanceFilter(pedigreeAffectedChild,
>, <Line: -				ImmutableSet.of(ModeOfInheritance.AUTOSOMAL_DOMINANT),helper);
>, <Line: -		List<FlaggedVariant> flaggedVariants = getFlaggedVariants();
>, <Line: -		try {
>, <Line: -			for (FlaggedVariant fv : flaggedVariants) {
>, <Line: -				filter.put(fv);
>, <Line: -			}
>, <Line: -			filter.finish();
>, <Line: -		} catch (FilterException e) {
>, <Line: -			// TODO Auto-generated catch block
>, <Line: -			e.printStackTrace();
>, <Line: -		}
>, <Line: -		List<VariantContext> vars = helper.getVariants();
>, <Line: -		Assert.assertTrue(!vars.isEmpty());
>, <Line: -		Assert.assertTrue(vars.size() == 1);
>, <Line: -		Assert.assertEquals(vars.iterator().next().getStart(), 145515898);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void pedigreeAffectedChildARTest() {
>, <Line: -		WriterFilterHelper helper = new WriterFilterHelper();
>, <Line: -		VariantWiseInheritanceFilter filter = new VariantWiseInheritanceFilter(pedigreeAffectedChild,
>, <Line: -				ImmutableSet.of(ModeOfInheritance.AUTOSOMAL_RECESSIVE), helper);
>, <Line: -		List<FlaggedVariant> flaggedVariants = getFlaggedVariants();
>, <Line: -		try {
>, <Line: -			for (FlaggedVariant fv : flaggedVariants) {
>, <Line: -				filter.put(fv);
>, <Line: -			}
>, <Line: -			filter.finish();
>, <Line: -		} catch (FilterException e) {
>, <Line: -			// TODO Auto-generated catch block
>, <Line: -			e.printStackTrace();
>, <Line: -		}
>, <Line: -		List<VariantContext> vars = helper.getVariants();
>, <Line: -		Assert.assertTrue(!vars.isEmpty());
>, <Line: -		Assert.assertTrue(vars.size() == 1);
>, <Line: -		Iterator<VariantContext> vcIt = vars.iterator();
>, <Line: -		Assert.assertEquals(vcIt.next().getStart(), 123239370);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void pedigreeTwoAffectedADTest() {
>, <Line: -		WriterFilterHelper helper = new WriterFilterHelper();
>, <Line: -		VariantWiseInheritanceFilter filter = new VariantWiseInheritanceFilter(pedigreeAffectedTwoAffected,
>, <Line: -				ImmutableSet.of(ModeOfInheritance.AUTOSOMAL_DOMINANT), helper);
>, <Line: -		List<FlaggedVariant> flaggedVariants = getFlaggedVariants();
>, <Line: -		try {
>, <Line: -			for (FlaggedVariant fv : flaggedVariants) {
>, <Line: -				filter.put(fv);
>, <Line: -			}
>, <Line: -			filter.finish();
>, <Line: -		} catch (FilterException e) {
>, <Line: -			// TODO Auto-generated catch block
>, <Line: -			e.printStackTrace();
>, <Line: -		}
>, <Line: -		List<VariantContext> vars = helper.getVariants();
>, <Line: -		Assert.assertTrue(!vars.isEmpty());
>, <Line: -		Assert.assertTrue(vars.size() == 1);
>, <Line: -		Assert.assertEquals(vars.iterator().next().getStart(), 145513532);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void pedigreeTwoAffectedARTest() {
>, <Line: -		WriterFilterHelper helper = new WriterFilterHelper();
>, <Line: -		VariantWiseInheritanceFilter filter = new VariantWiseInheritanceFilter(pedigreeAffectedTwoAffected,
>, <Line: -				ImmutableSet.of(ModeOfInheritance.AUTOSOMAL_RECESSIVE), helper);
>, <Line: -		List<FlaggedVariant> flaggedVariants = getFlaggedVariants();
>, <Line: -		try {
>, <Line: -			for (FlaggedVariant fv : flaggedVariants) {
>, <Line: -				filter.put(fv);
>, <Line: -			}
>, <Line: -			filter.finish();
>, <Line: -		} catch (FilterException e) {
>, <Line: -			// TODO Auto-generated catch block
>, <Line: -			e.printStackTrace();
>, <Line: -		}
>, <Line: -		List<VariantContext> vars = helper.getVariants();
>, <Line: -		Assert.assertTrue(!vars.isEmpty());
>, <Line: -		Assert.assertTrue(vars.size() == 1);
>, <Line: -		Iterator<VariantContext> vcIt = vars.iterator();
>, <Line: -		Assert.assertEquals(vcIt.next().getStart(), 123357972);
>, <Line: -	}
>, <Line: -	private List<FlaggedVariant> getFlaggedVariants() {
>, <Line: -		List<FlaggedVariant> output = new ArrayList<FlaggedVariant>();
>, <Line: -		for (VariantContext vc : variants) {
>, <Line: -			output.add(new FlaggedVariant(vc));
>, <Line: -		}
>, <Line: -		return output;
>, <Line: -	}
>, <Line: -}
>]