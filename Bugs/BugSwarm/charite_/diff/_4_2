[<Line: +import java.util.function.BiFunction;
>, <Line: +import de.charite.compbio.jannovar.cmd.JannovarBaseOptions;
>, <Line: +import de.charite.compbio.jannovar.cmd.annotate_pos.JannovarAnnotatePosOptions;
>, <Line: +import de.charite.compbio.jannovar.cmd.annotate_vcf.JannovarAnnotateVCFOptions;
>, <Line: +import de.charite.compbio.jannovar.cmd.db_list.JannovarDBListOptions;
>, <Line: +import de.charite.compbio.jannovar.cmd.download.JannovarDownloadOptions;
>, <Line: +import net.sourceforge.argparse4j.ArgumentParsers;
>, <Line: +import net.sourceforge.argparse4j.inf.ArgumentParser;
>, <Line: +import net.sourceforge.argparse4j.inf.ArgumentParserException;
>, <Line: +import net.sourceforge.argparse4j.inf.Namespace;
>, <Line: +import net.sourceforge.argparse4j.inf.Subparsers;
>, <Line: + * This is the driver class for a program called Jannovar.
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: +	/** the version of the program */
>, <Line: +	public static final String JANNOVAR_VERSION = "0.17";
>, <Line: +	public static void main(String argv[]) {
>, <Line: +		// Setup command line parser
>, <Line: +		ArgumentParser parser = ArgumentParsers.newArgumentParser("jannovar-cli");
>, <Line: +		parser.version(JANNOVAR_VERSION);
>, <Line: +		parser.description("Jannovar CLI performs a series of VCF annotation tasks, including predicted "
>, <Line: +				+ "molecular impact of variants and annotation of compatible Mendelian inheritance.");
>, <Line: +		Subparsers subParsers = parser.addSubparsers();
>, <Line: +		JannovarAnnotatePosOptions.setupParser(subParsers);
>, <Line: +		JannovarAnnotateVCFOptions.setupParser(subParsers);
>, <Line: +		JannovarDBListOptions.setupParser(subParsers);
>, <Line: +		JannovarDownloadOptions.setupParser(subParsers);
>, <Line: +		parser.defaultHelp(true);
>, <Line: +		parser.epilog("You can find out more at http://jannovar.rtfd.org");
>, <Line: +		// Parse command line arguments
>, <Line: +		Namespace args = null;
>, <Line: +			args = parser.parseArgs(argv);
>, <Line: +		} catch (ArgumentParserException e) {
>, <Line: +			parser.handleError(e);
>, <Line: +			System.exit(1);
>, <Line: +		BiFunction<String[], Namespace, JannovarCommand> factory = args.get("cmd");
>, <Line: +		JannovarCommand cmd = factory.apply(argv, args);
>]
[<Line: -/** Command line functions from apache */
>, <Line: -import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
>, <Line: -import de.charite.compbio.jannovar.cmd.HelpRequestedException;
>, <Line: -import de.charite.compbio.jannovar.cmd.annotate_pos.AnnotatePositionCommand;
>, <Line: -import de.charite.compbio.jannovar.cmd.annotate_vcf.AnnotateVCFCommand;
>, <Line: -import de.charite.compbio.jannovar.cmd.db_list.DatabaseListCommand;
>, <Line: -import de.charite.compbio.jannovar.cmd.download.DownloadCommand;
>, <Line: -import de.charite.compbio.jannovar.reference.TranscriptModel;
>, <Line: - * This is the driver class for a program called Jannovar. It has two purposes
>, <Line: - * <OL>
>, <Line: - * <LI>Take the UCSC files knownGene.txt, kgXref.txt, knownGeneMrna.txt, and knownToLocusLink.txt, and to create
>, <Line: - * corresponding {@link TranscriptModel} objects and to serialize them. The resulting serialized file can be used both
>, <Line: - * by this program itself (see next item) or by the main Exomizer program to annotated VCF file.
>, <Line: - * <LI>Using the serialized file of {@link TranscriptModel} objects (see above item) annotate a VCF file using
>, <Line: - * annovar-type program logic. Note that this functionality is also used by the main Exomizer program and thus this
>, <Line: - * program can be used as a stand-alone annotator ("Jannovar") or as a way of testing the code for the Exomizer.
>, <Line: - * </OL>
>, <Line: - * <P>
>, <Line: - * To run the "Jannovar" executable:
>, <Line: - * <P>
>, <Line: - * {@code java -Xms1G -Xmx1G -jar Jannovar.jar -V xyz.vcf -D $SERIAL}
>, <Line: - * <P>
>, <Line: - * This will annotate a VCF file. The results of de.charite.compbio.jannovar annotation are shown in the form
>, <Line: - *
>, <Line: - * <PRE>
>, <Line: - * Annotation {original VCF line}
>, <Line: - * </PRE>
>, <Line: - * <P>
>, <Line: - * Just a reminder, to set up annovar to do this, use the following commands.
>, <Line: - *
>, <Line: - * <PRE>
>, <Line: - *   perl annotate_variation.pl --downdb knownGene --buildver hg19 humandb/
>, <Line: - * </PRE>
>, <Line: - *
>, <Line: - * then, to annotate a VCF file called BLA.vcf, we first need to convert it to Annovar input format and run the main
>, <Line: - * annovar program as follows.
>, <Line: - *
>, <Line: - * <PRE>
>, <Line: - * $ perl convert2annovar.pl BLA.vcf -format vcf4 &gt; BLA.av
>, <Line: - * $ perl annotate_variation.pl -buildver hg19 --geneanno BLA.av --dbtype knowngene humandb/
>, <Line: - * </PRE>
>, <Line: - *
>, <Line: - * This will create two files with all variants and a special file with exonic variants.
>, <Line: - * <p>
>, <Line: - * There are three ways of using this program.
>, <Line: - * <ol>
>, <Line: - * <li>To create a serialized version of the UCSC gene definition data. In this case, the command-line flag <b>- S</b>
>, <Line: - * is provide as is the path to the four UCSC files. Then, {@code anno.serialize()} is true and a file <b>ucsc.ser</b>
>, <Line: - * is created.
>, <Line: - * <li>To deserialize the serialized data (<b>ucsc.ser</b>). In this case, the flag <b>- D</b> must be used.
>, <Line: - * <li>To simply read in the UCSC data without creating a serialized file.
>, <Line: - * </ol>
>, <Line: - * Whichever of the three versions is chosen, the user may additionally pass the path to a VCF file using the <b>-v</b>
>, <Line: - * flag. If so, then this file will be annotated using the UCSC data, and a new version of the file will be written to a
>, <Line: - * file called test.vcf.jannovar (assuming the original file was named test.vcf). The
>, <Line: -	/** Configuration for the Jannovar program. */
>, <Line: -	JannovarOptions options = null;
>, <Line: -	public static void main(String argv[]) {
>, <Line: -		if (argv.length == 0) {
>, <Line: -			// No arguments, print top level help and exit.
>, <Line: -			printTopLevelHelp();
>, <Line: -			System.exit(1);
>, <Line: -		}
>, <Line: -		String[] newArgs = new String[argv.length - 1];
>, <Line: -		for (int i = 0; i < newArgs.length; i++) {
>, <Line: -			newArgs[i] = argv[i + 1];
>, <Line: -		}
>, <Line: -		// Create the corresponding command.
>, <Line: -		JannovarCommand cmd = null;
>, <Line: -			if (argv[0].equals("download")) {
>, <Line: -				cmd = new DownloadCommand(newArgs);
>, <Line: -			} else if (argv[0].equals("db-list")) {
>, <Line: -				cmd = new DatabaseListCommand(newArgs);
>, <Line: -			} else if (argv[0].equals("annotate")) {
>, <Line: -				cmd = new AnnotateVCFCommand(newArgs);
>, <Line: -			} else if (argv[0].equals("annotate-pos")) {
>, <Line: -				cmd = new AnnotatePositionCommand(newArgs);
>, <Line: -			} else {
>, <Line: -				System.err.println("unrecognized command " + argv[0]);
>, <Line: -				printTopLevelHelp();
>, <Line: -			}
>, <Line: -		} catch (CommandLineParsingException e) {
>, <Line: -			System.err.println("ERROR: problem with parsing command line options: " + e.getMessage());
>, <Line: -			System.err.println("");
>, <Line: -			System.err.println("Use --help for obtaining usage instructions.");
>, <Line: -		} catch (HelpRequestedException e) {
>, <Line: -			return; // no error, user wanted help
>, <Line: -		// Stop if no command could be created.
>, <Line: -		// Execute the command.
>, <Line: -	/**
>, <Line: -	 * Print top level help (without any command).
>, <Line: -	 */
>, <Line: -	private static void printTopLevelHelp() {
>, <Line: -		System.err.println("Program: de.charite.compbio.jannovar (functional annotation of VCF files)");
>, <Line: -		System.err.println("Version: " + JannovarOptions.JANNOVAR_VERSION);
>, <Line: -		System.err.println("Contact: Peter N Robinson <peter.robinson@charite.de>");
>, <Line: -		System.err.println("");
>, <Line: -		System.err.println("Usage: java -jar de.charite.compbio.jannovar.jar <command> [options]");
>, <Line: -		System.err.println("");
>, <Line: -		System.err.println("Command: download      download transcript database");
>, <Line: -		System.err.println("         db-list       list downloadable databases");
>, <Line: -		System.err.println("         annotate      functional annotation of VCF files");
>, <Line: -		System.err.println("         annotate-pos  functional annotation of genomic change");
>, <Line: -		System.err.println("");
>, <Line: -		System.err.println("Example: java -jar de.charite.compbio.jannovar.jar download -d hg19/ucsc");
>, <Line: -		System.err.println("         java -jar de.charite.compbio.jannovar.jar db-list");
>, <Line: -		System.err
>, <Line: -				.println("         java -jar de.charite.compbio.jannovar.jar annotate -d data/hg19_ucsc.ser -i variants.vcf");
>, <Line: -		System.err
>, <Line: -				.println("         java -jar de.charite.compbio.jannovar.jar annotate-pos -d data/hg19_ucsc.ser -c 'chr1:12345C>A'");
>, <Line: -		System.err.println("");
>, <Line: -	}
>]