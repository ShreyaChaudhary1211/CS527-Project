[<Line: +package de.charite.compbio.jannovar.mendel.impl;
>, <Line: +import java.util.Collection;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +import java.util.stream.Stream;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import com.google.common.collect.ImmutableSet;
>, <Line: +import de.charite.compbio.jannovar.mendel.ChromosomeType;
>, <Line: +import de.charite.compbio.jannovar.mendel.Genotype;
>, <Line: +import de.charite.compbio.jannovar.mendel.GenotypeCalls;
>, <Line: +import de.charite.compbio.jannovar.mendel.IncompatiblePedigreeException;
>, <Line: +import de.charite.compbio.jannovar.mendel.MendelianInheritanceChecker;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Disease;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Person;
>, <Line: +/**
>, <Line: + * Helper class for checking a {@link Collection} of {@link GenotypeCalls} for compatibility with a {@link Pedigree} and
>, <Line: + * autosomal recessive homozygous mode of inheritance.
>, <Line: + *
>, <Line: + * <h2>Compatibility Check</h2>
>, <Line: + *
>, <Line: + * In the case of a single individual, we require an homozygous alternative call.
>, <Line: + *
>, <Line: + * In the case of multiple individuals, we require that the affects are compatible, that the unaffected parents of
>, <Line: + * affected individuals are not homozygous ref or homozygous alt and that the unaffected individuals are not homozygous
>, <Line: + * alt. The affected individuals are compatible if no affected individual is homozygous ref or heterozygous and there is
>, <Line: + * at least one affected individual that is homozygous alt.
>, <Line: + *
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@charite.de">Manuel Holtgrewe</a>
>, <Line: + * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
>, <Line: + * @author <a href="mailto:peter.robinson@charite.de">Peter N Robinson</a>
>, <Line: + */
>, <Line: +public class MendelianCheckerARHom extends AbstractMendelianChecker {
>, <Line: +	public MendelianCheckerARHom(MendelianInheritanceChecker parent) {
>, <Line: +		super(parent);
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public ImmutableList<GenotypeCalls> filterCompatibleRecords(Collection<GenotypeCalls> calls)
>, <Line: +			throws IncompatiblePedigreeException {
>, <Line: +		// Filter to calls on autosomal chromosomes
>, <Line: +		Stream<GenotypeCalls> autosomalCalls = calls.stream()
>, <Line: +				.filter(call -> call.getChromType() == ChromosomeType.AUTOSOMAL);
>, <Line: +		// Filter to calls compatible with AD inheritance
>, <Line: +		Stream<GenotypeCalls> compatibleCalls;
>, <Line: +		if (this.pedigree.getNMembers() == 1)
>, <Line: +			compatibleCalls = autosomalCalls.filter(this::isCompatibleSingleton);
>, <Line: +		else
>, <Line: +			compatibleCalls = autosomalCalls.filter(this::isCompatibleFamily);
>, <Line: +		return ImmutableList.copyOf(compatibleCalls.collect(Collectors.toList()));
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return whether <code>calls</code> is compatible with AR homozygous inheritance in the case of a single
>, <Line: +	 *         individual in the pedigree
>, <Line: +	 */
>, <Line: +	private boolean isCompatibleSingleton(GenotypeCalls calls) {
>, <Line: +		if (calls.getNSamples() == 0)
>, <Line: +			return false; // no calls!
>, <Line: +		return calls.getGenotypeBySampleNo(0).isHomAlt();
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return whether <code>calls</code> is compatible with AR homozygous inheritance in the case of multiple
>, <Line: +	 *         individuals in the pedigree
>, <Line: +	 */
>, <Line: +	private boolean isCompatibleFamily(GenotypeCalls calls) {
>, <Line: +		return (affectedsAreCompatible(calls) && unaffectedParentsOfAffectedAreNotHomozygous(calls)
>, <Line: +				&& unaffectedsAreNotHomozygousAlt(calls));
>, <Line: +	}
>, <Line: +	private boolean affectedsAreCompatible(GenotypeCalls calls) {
>, <Line: +		int numHomozygousAlt = 0;
>, <Line: +		for (Pedigree.IndexedPerson entry : pedigree.getNameToMember().values()) {
>, <Line: +			if (entry.getPerson().getDisease() == Disease.AFFECTED) {
>, <Line: +				final Genotype gt = calls.getGenotypeForSample(entry.getPerson().getName());
>, <Line: +				if (gt.isHomRef() || gt.isHet())
>, <Line: +					return false;
>, <Line: +				else if (gt.isHomAlt())
>, <Line: +					numHomozygousAlt += 1;
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return (numHomozygousAlt > 0);
>, <Line: +	}
>, <Line: +	private boolean unaffectedParentsOfAffectedAreNotHomozygous(GenotypeCalls calls) {
>, <Line: +		for (String name : getUnaffectedParentNamesOfAffecteds()) {
>, <Line: +			final Genotype gt = calls.getGenotypeForSample(name);
>, <Line: +			if (gt.isHomAlt() || gt.isHomRef())
>, <Line: +				return false;
>, <Line: +		}
>, <Line: +		return true;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * @return names of unaffected parents of unaffecteds
>, <Line: +	 */
>, <Line: +	private ImmutableSet<String> getUnaffectedParentNamesOfAffecteds() {
>, <Line: +		ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<String>();
>, <Line: +		for (Person person : pedigree.getMembers())
>, <Line: +			if (person.getDisease() == Disease.AFFECTED) {
>, <Line: +				if (person.getFather() != null && person.getFather().getDisease() == Disease.UNAFFECTED)
>, <Line: +					builder.add(person.getFather().getName());
>, <Line: +				if (person.getMother() != null && person.getMother().getDisease() == Disease.UNAFFECTED)
>, <Line: +					builder.add(person.getMother().getName());
>, <Line: +			}
>, <Line: +		return builder.build();
>, <Line: +	}
>, <Line: +	private boolean unaffectedsAreNotHomozygousAlt(GenotypeCalls calls) {
>, <Line: +		for (Pedigree.IndexedPerson entry : pedigree.getNameToMember().values())
>, <Line: +			if (entry.getPerson().getDisease() == Disease.UNAFFECTED
>, <Line: +					&& calls.getGenotypeForSample(entry.getPerson().getName()).isHomAlt())
>, <Line: +				return false;
>, <Line: +		return true;
>, <Line: +	}
>, <Line: +}
>]
[]