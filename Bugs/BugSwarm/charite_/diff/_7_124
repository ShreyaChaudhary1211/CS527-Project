[<Line: +package de.charite.compbio.jannovar.mendel.filter;
>, <Line: +import java.nio.file.Path;
>, <Line: +import java.nio.file.Paths;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +import org.junit.Assert;
>, <Line: +import org.junit.Before;
>, <Line: +import org.junit.Test;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import de.charite.compbio.jannovar.data.JannovarData;
>, <Line: +import de.charite.compbio.jannovar.factories.TestJannovarDataFactory;
>, <Line: +import de.charite.compbio.jannovar.mendel.bridge.MendelVCFHeaderExtender;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Disease;
>, <Line: +import de.charite.compbio.jannovar.pedigree.PedFileContents;
>, <Line: +import de.charite.compbio.jannovar.pedigree.PedParseException;
>, <Line: +import de.charite.compbio.jannovar.pedigree.PedPerson;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Sex;
>, <Line: +import htsjdk.variant.variantcontext.VariantContext;
>, <Line: +import htsjdk.variant.vcf.VCFFileReader;
>, <Line: +/**
>, <Line: + * Test for annotating compatible modes of inheritance
>, <Line: + * 
>, <Line: + * This test case uses one trio for the test
>, <Line: + * 
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: + */
>, <Line: +public class GeneWiseInheritanceProcessorOneAffectedTest {
>, <Line: +	final static String KEY = MendelVCFHeaderExtender.key();
>, <Line: +	/** Pedigree with one affected child */
>, <Line: +	private Pedigree trio;
>, <Line: +	/** Jannovar DB */
>, <Line: +	private JannovarData jannovarDB;
>, <Line: +	/** Variants to filter */
>, <Line: +	private List<VariantContext> variants;
>, <Line: +	/** The VCF file reader to use */
>, <Line: +	private VCFFileReader reader;
>, <Line: +	@Before
>, <Line: +	public void setUp() throws PedParseException {
>, <Line: +		// Construct first pedigree
>, <Line: +		ImmutableList.Builder<PedPerson> individuals = new ImmutableList.Builder<PedPerson>();
>, <Line: +		individuals.add(new PedPerson("ped", "Eva", "0", "0", Sex.FEMALE, Disease.UNAFFECTED)); // Mother
>, <Line: +		individuals.add(new PedPerson("ped", "Adam", "0", "0", Sex.MALE, Disease.UNAFFECTED)); // Father
>, <Line: +		individuals.add(new PedPerson("ped", "Seth", "Adam", "Eva", Sex.MALE, Disease.AFFECTED)); // Child
>, <Line: +		PedFileContents pedFileContents = new PedFileContents(new ImmutableList.Builder<String>().build(),
>, <Line: +				individuals.build());
>, <Line: +		trio = new Pedigree(pedFileContents, "ped");
>, <Line: +		// Load test Jannovar data
>, <Line: +		jannovarDB = new TestJannovarDataFactory().getJannovarData();
>, <Line: +	}
>, <Line: +	private void loadVariants(String infix) {
>, <Line: +		Path inheritanceFilterVCFPath = Paths.get("src/test/resources/inheritanceFilterTest." + infix + "vcf");
>, <Line: +		reader = new VCFFileReader(inheritanceFilterVCFPath.toFile(), false);
>, <Line: +		variants = new ArrayList<VariantContext>();
>, <Line: +		for (VariantContext variantContext : reader)
>, <Line: +			variants.add(variantContext);
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testGRCh37() {
>, <Line: +		loadVariants("b37.");
>, <Line: +		ArrayList<VariantContext> result = new ArrayList<>();
>, <Line: +		try (GeneWiseMendelianAnnotationProcessor proc = new GeneWiseMendelianAnnotationProcessor(trio, jannovarDB,
>, <Line: +				vc -> result.add(vc))) {
>, <Line: +			for (VariantContext vc : variants)
>, <Line: +				proc.put(vc);
>, <Line: +		}
>, <Line: +		Assert.assertEquals(7, result.size());
>, <Line: +		Assert.assertEquals("1", result.get(0).getContig());
>, <Line: +		Assert.assertEquals(145513532, result.get(0).getStart());
>, <Line: +		Assert.assertEquals("[AR]", result.get(0).getAttribute(KEY).toString());
>, <Line: +		Assert.assertEquals("1", result.get(1).getContig());
>, <Line: +		Assert.assertEquals(145513533, result.get(1).getStart());
>, <Line: +		Assert.assertNull(result.get(1).getAttribute(KEY));
>, <Line: +		Assert.assertEquals("1", result.get(2).getContig());
>, <Line: +		Assert.assertEquals(145513534, result.get(2).getStart());
>, <Line: +		Assert.assertEquals("[AR]", result.get(2).getAttribute(KEY).toString());
>, <Line: +		Assert.assertEquals("1", result.get(3).getContig());
>, <Line: +		Assert.assertEquals(145515898, result.get(3).getStart());
>, <Line: +		Assert.assertEquals("[AD]", result.get(3).getAttribute(KEY).toString());
>, <Line: +		Assert.assertEquals("1", result.get(4).getContig());
>, <Line: +		Assert.assertEquals(145515899, result.get(4).getStart());
>, <Line: +		Assert.assertNull(result.get(4).getAttribute(KEY));
>, <Line: +		Assert.assertEquals("10", result.get(5).getContig());
>, <Line: +		Assert.assertEquals(123239370, result.get(5).getStart());
>, <Line: +		Assert.assertEquals("[AR]", result.get(5).getAttribute(KEY).toString());
>, <Line: +		Assert.assertEquals("10", result.get(6).getContig());
>, <Line: +		Assert.assertEquals(123357972, result.get(6).getStart());
>, <Line: +		Assert.assertNull(result.get(6).getAttribute(KEY));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testHG19() {
>, <Line: +		loadVariants("hg19.");
>, <Line: +		ArrayList<VariantContext> result = new ArrayList<>();
>, <Line: +		try (GeneWiseMendelianAnnotationProcessor proc = new GeneWiseMendelianAnnotationProcessor(trio, jannovarDB,
>, <Line: +				vc -> result.add(vc))) {
>, <Line: +			for (VariantContext vc : variants)
>, <Line: +				proc.put(vc);
>, <Line: +		}
>, <Line: +		Assert.assertEquals(7, result.size());
>, <Line: +		Assert.assertEquals("chr1", result.get(0).getContig());
>, <Line: +		Assert.assertEquals(145513532, result.get(0).getStart());
>, <Line: +		Assert.assertEquals("[AR]", result.get(0).getAttribute(KEY).toString());
>, <Line: +		Assert.assertEquals("chr1", result.get(1).getContig());
>, <Line: +		Assert.assertEquals(145513533, result.get(1).getStart());
>, <Line: +		Assert.assertNull(result.get(1).getAttribute(KEY));
>, <Line: +		Assert.assertEquals("chr1", result.get(2).getContig());
>, <Line: +		Assert.assertEquals(145513534, result.get(2).getStart());
>, <Line: +		Assert.assertEquals("[AR]", result.get(2).getAttribute(KEY).toString());
>, <Line: +		Assert.assertEquals("chr1", result.get(3).getContig());
>, <Line: +		Assert.assertEquals(145515898, result.get(3).getStart());
>, <Line: +		Assert.assertEquals("[AD]", result.get(3).getAttribute(KEY).toString());
>, <Line: +		Assert.assertEquals("chr1", result.get(4).getContig());
>, <Line: +		Assert.assertEquals(145515899, result.get(4).getStart());
>, <Line: +		Assert.assertNull(result.get(4).getAttribute(KEY));
>, <Line: +		Assert.assertEquals("chr10", result.get(5).getContig());
>, <Line: +		Assert.assertEquals(123239370, result.get(5).getStart());
>, <Line: +		Assert.assertEquals("[AR]", result.get(5).getAttribute(KEY).toString());
>, <Line: +		Assert.assertEquals("chr10", result.get(6).getContig());
>, <Line: +		Assert.assertEquals(123357972, result.get(6).getStart());
>, <Line: +		Assert.assertNull(result.get(6).getAttribute(KEY));
>, <Line: +	}
>, <Line: +}
>]
[]