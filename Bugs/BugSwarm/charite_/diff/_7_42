[]
[<Line: -package de.charite.compbio.jannovar.pedigree.compatibilitychecker.ar;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import com.google.common.collect.ImmutableSet;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Disease;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Genotype;
>, <Line: -import de.charite.compbio.jannovar.pedigree.GenotypeList;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Pedigree.IndexedPerson;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Person;
>, <Line: -import de.charite.compbio.jannovar.pedigree.compatibilitychecker.CompatibilityCheckerBase;
>, <Line: -import de.charite.compbio.jannovar.pedigree.compatibilitychecker.CompatibilityCheckerException;
>, <Line: -/**
>, <Line: - * Helper class for checking a {@link GenotypeList} for compatibility with a {@link Pedigree} and autosomal recessive
>, <Line: - * homozygous mode of inheritance.
>, <Line: - *
>, <Line: - * <h2>Compatibility Check</h2>
>, <Line: - *
>, <Line: - * In the case of a single individual, we require {@link Genotype#HOMOZYGOUS_ALT}.
>, <Line: - *
>, <Line: - * In the case of multiple individuals, we require that the affects are compatible, that the unaffected parents of
>, <Line: - * affected individuals are not {@link Genotype#HOMOZYGOUS_REF} or {@link Genotype#HOMOZYGOUS_ALT} and that the
>, <Line: - * unaffected individuals are not {@link Genotype#HOMOZYGOUS_ALT}. The affected individuals are compatible if no
>, <Line: - * affected individual is {@link Genotype#HOMOZYGOUS_REF} or {@link Genotype#HETEROZYGOUS} and there is at least one
>, <Line: - * affected individual that is {@link Genotype#HOMOZYGOUS_ALT}.
>, <Line: - *
>, <Line: - * @author <a href="mailto:manuel.holtgrewe@charite.de">Manuel Holtgrewe</a>
>, <Line: - * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
>, <Line: - * @author <a href="mailto:peter.robinson@charite.de">Peter N Robinson</a>
>, <Line: - * 
>, <Line: - * @deprecated use {@link VariantContextCompatibilityCheckerAutosomalDominant} instead.
>, <Line: - */
>, <Line: -@Deprecated
>, <Line: -public class CompatibilityCheckerAutosomalRecessiveHomozygous extends CompatibilityCheckerBase {
>, <Line: -	/**
>, <Line: -	 * Initialize compatibility checker and perform some sanity checks.
>, <Line: -	 *
>, <Line: -	 * The {@link GenotypeList} object passed to the constructor is expected to represent all of the variants found in a
>, <Line: -	 * certain gene (possibly after filtering for rarity or predicted pathogenicity). The samples represented by the
>, <Line: -	 * {@link GenotypeList} must be in the same order as the list of individuals contained in this pedigree.
>, <Line: -	 *
>, <Line: -	 * @param pedigree
>, <Line: -	 *            the {@link Pedigree} to use for the initialize
>, <Line: -	 * @param list
>, <Line: -	 *            the {@link GenotypeList} to use for the initialization
>, <Line: -	 * @throws CompatibilityCheckerException
>, <Line: -	 *             if the pedigree or variant list is invalid
>, <Line: -	 */
>, <Line: -	public CompatibilityCheckerAutosomalRecessiveHomozygous(Pedigree pedigree, GenotypeList list)
>, <Line: -			throws CompatibilityCheckerException {
>, <Line: -		super(pedigree, list);
>, <Line: -	}
>, <Line: -	public boolean runSingleSampleCase() {
>, <Line: -		for (ImmutableList<Genotype> gtList : list.getCalls())
>, <Line: -			if (gtList.get(0) == Genotype.HOMOZYGOUS_ALT)
>, <Line: -				return true;
>, <Line: -		return false;
>, <Line: -	}
>, <Line: -	public boolean runMultiSampleCase() {
>, <Line: -		for (ImmutableList<Genotype> gtList : list.getCalls())
>, <Line: -			if (containsCompatibleHomozygousVariants(gtList))
>, <Line: -				return true;
>, <Line: -		return false;
>, <Line: -	}
>, <Line: -	private boolean containsCompatibleHomozygousVariants(ImmutableList<Genotype> gtList) {
>, <Line: -		return (affectedsAreCompatible(gtList) && unaffectedParentsOfAffectedAreNotHomozygous(gtList) && unaffectedsAreNotHomozygousAlt(gtList));
>, <Line: -	}
>, <Line: -	private boolean unaffectedsAreNotHomozygousAlt(ImmutableList<Genotype> gtList) {
>, <Line: -		for (Pedigree.IndexedPerson entry : pedigree.getNameToMember().values())
>, <Line: -			if (entry.getPerson().getDisease() == Disease.UNAFFECTED && gtList.get(entry.getIdx()) == Genotype.HOMOZYGOUS_ALT)
>, <Line: -				return false;
>, <Line: -		return true;
>, <Line: -	}
>, <Line: -	private boolean unaffectedParentsOfAffectedAreNotHomozygous(ImmutableList<Genotype> gtList) {
>, <Line: -		for (String name : getUnaffectedParentNamesOfAffecteds()) {
>, <Line: -			IndexedPerson iPerson = pedigree.getNameToMember().get(name);
>, <Line: -			// INVARIANT: iPerson cannot be null due to construction of Pedigree class
>, <Line: -			if (gtList.get(iPerson.getIdx()) == Genotype.HOMOZYGOUS_ALT
>, <Line: -					|| gtList.get(iPerson.getIdx()) == Genotype.HOMOZYGOUS_REF)
>, <Line: -				return false;
>, <Line: -		}
>, <Line: -		return true;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * @return names of unaffected parents of unaffecteds
>, <Line: -	 */
>, <Line: -	private ImmutableSet<String> getUnaffectedParentNamesOfAffecteds() {
>, <Line: -		ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<String>();
>, <Line: -		for (Person person : pedigree.getMembers())
>, <Line: -			if (person.getDisease() == Disease.AFFECTED) {
>, <Line: -				if (person.getFather() != null && person.getFather().getDisease() == Disease.UNAFFECTED)
>, <Line: -					builder.add(person.getFather().getName());
>, <Line: -				if (person.getMother() != null && person.getMother().getDisease() == Disease.UNAFFECTED)
>, <Line: -					builder.add(person.getMother().getName());
>, <Line: -			}
>, <Line: -		return builder.build();
>, <Line: -	}
>, <Line: -	private boolean affectedsAreCompatible(ImmutableList<Genotype> gtList) {
>, <Line: -		int numHomozygousAlt = 0;
>, <Line: -		for (Pedigree.IndexedPerson entry : pedigree.getNameToMember().values())
>, <Line: -			if (entry.getPerson().getDisease() == Disease.AFFECTED) {
>, <Line: -				if (gtList.get(entry.getIdx()) == Genotype.HOMOZYGOUS_REF || gtList.get(entry.getIdx()) == Genotype.HETEROZYGOUS)
>, <Line: -					return false;
>, <Line: -				else if (gtList.get(entry.getIdx()) == Genotype.HOMOZYGOUS_ALT)
>, <Line: -					numHomozygousAlt += 1;
>, <Line: -			}
>, <Line: -		return (numHomozygousAlt > 0);
>, <Line: -	}
>, <Line: -}
>]