[<Line: +import com.google.common.collect.ImmutableMap;
>, <Line: +	 * @return <code>true</code> if the nth person in the PED file is parent of an affected child
>, <Line: +	 * @return list of parents in the same order as in {@link Pedigree#members pedigree.getMembers()}
>, <Line: +	/**
>, <Line: +	 * @return sibling map for each {@link Person} in {@link Pedigree}, both parents must be in {@link Pedigree} and the
>, <Line: +	 *         same pedigree
>, <Line: +	 */
>, <Line: +	public ImmutableMap<Person, ImmutableList<Person>> buildSiblings() {
>, <Line: +		ImmutableMap.Builder<Person, ImmutableList<Person>> mapBuilder = new ImmutableMap.Builder<Person, ImmutableList<Person>>();
>, <Line: +		for (Person p1 : pedigree.getMembers()) {
>, <Line: +			if (p1.getMother() == null || p1.getFather() == null)
>, <Line: +				continue;
>, <Line: +			ImmutableList.Builder<Person> listBuilder = new ImmutableList.Builder<Person>();
>, <Line: +			for (Person p2 : pedigree.getMembers()) {
>, <Line: +				if (p1.equals(p2) || !p1.getMother().equals(p2.getMother()) || !p1.getFather().equals(p2.getFather()))
>, <Line: +					continue;
>, <Line: +				listBuilder.add(p2);
>, <Line: +			}
>, <Line: +			mapBuilder.put(p1, listBuilder.build());
>, <Line: +		}
>, <Line: +		return mapBuilder.build();
>, <Line: +	}
>]
[<Line: -	 * @return <code>true</code> if the nth person in the PED file is parent of
>, <Line: -	 *         an affected child
>, <Line: -	 * @return list of parents in the same order as in {@link Pedigree#members
>, <Line: -	 *         pedigree.getMembers()}
>]